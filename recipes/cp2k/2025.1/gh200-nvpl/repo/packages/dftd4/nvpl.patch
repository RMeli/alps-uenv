diff --git a/.github/workflows/codeql.yml b/.github/workflows/codeql.yml
index b014a4c..a95f57f 100644
--- a/.github/workflows/codeql.yml
+++ b/.github/workflows/codeql.yml
@@ -2,9 +2,9 @@ name: "CodeQL"
 
 on:
   push:
-    branches: [ "main" ]
+    branches: ["main"]
   pull_request:
-    branches: [ "main" ]
+    branches: ["main"]
   schedule:
     - cron: "6 8 * * 2"
 
@@ -20,11 +20,13 @@ jobs:
     strategy:
       fail-fast: false
       matrix:
-        language: [ python ]
+        language: [python]
 
     steps:
       - name: Checkout
-        uses: actions/checkout@v3
+        uses: actions/checkout@v4
+        with:
+          persist-credentials: false
 
       - name: Initialize CodeQL
         uses: github/codeql-action/init@v2
diff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml
index e3f7c3e..e77ed25 100644
--- a/.github/workflows/docs.yml
+++ b/.github/workflows/docs.yml
@@ -1,29 +1,60 @@
 name: docs
 
-on: [push, pull_request]
+on:
+  push:
+    branches:
+      - main
+
+  pull_request:
+
+  workflow_dispatch:
 
 jobs:
   build-and-deploy:
     runs-on: ubuntu-latest
     steps:
-    - id: deploy-on-push
-      run:
-        echo "::set-output name=result::${{ env.DEPLOY_BRANCH }}"
-      env:
-        DEPLOY_BRANCH: ${{ secrets.DEPLOY_BRANCH && contains(github.ref, secrets.DEPLOY_BRANCH) && 1 || 0 }}
-    - uses: actions/checkout@v2
-    - uses: actions/setup-python@v1
-      with:
-        python-version: '3.x'
-    - name: Install dependencies
-      run: pip install ford
-    - name: Build Documentation
-      run: ford ford.md
-    - uses: JamesIves/github-pages-deploy-action@4.1.6
-      if: ${{ github.event_name == 'push' && steps.deploy-on-push.outputs.result != 0 }}
-      with:
-        branch: gh-pages
-        folder: _docs
-        single-commit: true
-        git-config-email: 49320512+dftd4@users.noreply.github.com
-        git-config-name: DFT-D4
+      - id: deploy-on-push
+        run: echo "result=$DEPLOY_BRANCH" >> $GITHUB_OUTPUT
+        env:
+          DEPLOY_BRANCH: ${{ secrets.DEPLOY_BRANCH && contains(github.ref, secrets.DEPLOY_BRANCH) && '1' || '0' }}
+
+      - name: Set DEPLOY_BRANCH
+        id: set-deploy-branch
+        run: echo "DEPLOY_BRANCH=$DEPLOY_BRANCH" >> $GITHUB_ENV
+        env:
+          DEPLOY_BRANCH: ${{ secrets.DEPLOY_BRANCH && contains(github.ref, secrets.DEPLOY_BRANCH) && '1' || '0' }}
+
+      - name: Validate DEPLOY_BRANCH
+        run: |
+          if [[ "$DEPLOY_BRANCH" != "1" && "$DEPLOY_BRANCH" != "0" ]]; then
+            echo "Invalid DEPLOY_BRANCH value: $DEPLOY_BRANCH"
+            exit 1
+          fi
+        env:
+          DEPLOY_BRANCH: ${{ env.DEPLOY_BRANCH }}
+
+      - name: Checkout code
+        uses: actions/checkout@v4
+        with:
+          persist-credentials: false
+
+      - name: Set up Python
+        uses: actions/setup-python@v4
+        with:
+          python-version: "3.x"
+
+      - name: Install dependencies
+        run: pip install ford
+
+      - name: Build Documentation
+        run: ford ford.md
+
+      - name: Deploy to GitHub Pages
+        uses: JamesIves/github-pages-deploy-action@4.1.6
+        if: ${{ github.event_name == 'push' && steps.deploy-on-push.outputs.result != '0' }}
+        with:
+          branch: gh-pages
+          folder: _docs
+          single-commit: true
+          git-config-email: 49320512+dftd4@users.noreply.github.com
+          git-config-name: DFT-D4
diff --git a/.github/workflows/fortran-build.yml b/.github/workflows/fortran-build.yml
index 7b417ea..f5fa02c 100644
--- a/.github/workflows/fortran-build.yml
+++ b/.github/workflows/fortran-build.yml
@@ -1,9 +1,49 @@
 name: CI
 
-on: [push, pull_request]
+on:
+  push:
+    branches:
+      - main
+    paths-ignore:
+      - "doc*/**"
+      - "./*.ya?ml"
+      - "**/*.adoc"
+      - "**/*.md"
+      - "**/*.rst"
+
+  pull_request:
+    paths-ignore:
+      - "doc*/**"
+      - "./*.ya?ml"
+      - "**/*.adoc"
+      - "**/*.md"
+      - "**/*.rst"
+
+  workflow_dispatch:
 
 env:
   BUILD_DIR: _build
+  PIP_PACKAGES: >-
+    meson
+    cmake
+    ninja
+    gcovr
+  PIP_EXTRAS: >-
+    pkgconfig
+    pytest
+    pytest-cov
+    cffi
+    numpy
+    ase
+    matplotlib
+    qcelemental
+    setuptools
+    tomli
+  LINUX_INTEL_COMPONENTS: >-
+    intel-oneapi-compiler-fortran-2021.2.0
+    intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-2021.2.0
+    intel-oneapi-mkl-2021.2.0
+    intel-oneapi-mkl-devel-2021.2.0
 
 jobs:
   build:
@@ -11,242 +51,315 @@ jobs:
     strategy:
       fail-fast: false
       matrix:
-        os: [ubuntu-latest]
-        build: [meson, cmake, fpm]
+        os: [ubuntu-latest, macos-latest]
+        build: [meson, cmake]
         build-type: [debug]
         compiler: [gnu]
-        version: [10]
+        version: [12]
 
         include:
-        - os: ubuntu-20.04
-          build: cmake
-          build-type: debug
-          compiler: gnu
-          version: 8
-
-        - os: macos-13
-          build: cmake
-          build-type: debug
-          compiler: gnu
-          version: 10
-
-        - os: ubuntu-latest
-          build: meson
-          build-type: coverage
-          compiler: gnu
-          version: 9
-
-        - os: macos-13
-          build: meson
-          build-type: debug
-          compiler: gnu
-          version: 10
-
-        - os: ubuntu-latest
-          build: meson
-          build-type: debug
-          compiler: gnu
-          version: 11
-
-        - os: ubuntu-20.04
-          build: meson
-          build-type: debug
-          compiler: intel
-          version: 2021.2.0
+          - os: ubuntu-20.04
+            build: cmake
+            build-type: debug
+            compiler: gnu
+            version: 8
+
+          - os: macos-13
+            build: cmake
+            build-type: debug
+            compiler: gnu
+            version: 10
+
+          - os: macos-13
+            build: meson
+            build-type: debug
+            compiler: gnu
+            version: 10
+
+          - os: ubuntu-latest
+            build: meson
+            build-type: coverage
+            compiler: gnu
+            version: 9
+
+          - os: ubuntu-latest
+            build: meson
+            build-type: debug
+            compiler: gnu
+            version: 10
+
+          - os: ubuntu-latest
+            build: meson
+            build-type: debug
+            compiler: intel
+            version: 2021.2.0
+
+          - os: ubuntu-latest
+            build: fpm
+            build-type: debug
+            compiler: gnu
+            version: 10
 
     defaults:
       run:
-        shell: ${{ matrix.shell || 'bash -l {0}' }}
+        shell: ${{ matrix.shell || 'bash' }}
 
     env:
       FC: ${{ matrix.compiler == 'intel' && 'ifort' || 'gfortran' }}
       CC: ${{ matrix.compiler == 'intel' && 'icc' || 'gcc' }}
       GCC_V: ${{ matrix.version }}
-      PYTHON_V: 3.8
+      PYTHON_V: 3.9
 
     steps:
-    - name: Checkout code
-      uses: actions/checkout@v3
-
-    - name: Install GCC (OSX)
-      if: ${{ contains(matrix.os, 'macos') && matrix.compiler == 'gnu' }}
-      run: |
-        brew install gcc@${{ env.GCC_V }} openblas
-        ln -s /usr/local/bin/gfortran-${{ env.GCC_V }} /usr/local/bin/gfortran
-        ln -s /usr/local/bin/gcc-${{ env.GCC_V }} /usr/local/bin/gcc
-        ln -s /usr/local/bin/g++-${{ env.GCC_V }} /usr/local/bin/g++
-        echo "PKG_CONFIG_PATH=/usr/local/opt/openblas/lib/pkgconfig" >> $GITHUB_ENV
-
-    - name: Install GCC (Linux)
-      if: ${{ contains(matrix.os, 'ubuntu') && matrix.compiler == 'gnu' }}
-      run: |
-        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
-        sudo apt-get update
-        sudo apt-get install -y gcc-${{ env.GCC_V}} gfortran-${{ env.GCC_V }}
-        sudo update-alternatives \
-          --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_V }} 100 \
-          --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ env.GCC_V }} \
-          --slave /usr/bin/gcov gcov /usr/bin/gcov-${{ env.GCC_V }}
-
-    - name: Install GCC (Windows)
-      if: ${{ contains(matrix.os, 'windows') && matrix.compiler == 'gnu' }}
-      uses: msys2/setup-msys2@v2
-      with:
-        msystem: MINGW64
-        update: false
-        install: >-
-          git
-          mingw-w64-x86_64-gcc-fortran
-          mingw-w64-x86_64-lapack
-          mingw-w64-x86_64-cmake
-          mingw-w64-x86_64-meson
-          mingw-w64-x86_64-ninja
-
-    - name: Install dependencies
-      if: ${{ ! contains(matrix.os, 'windows') }}
-      uses: mamba-org/setup-micromamba@v1
-      with:
-        environment-file: assets/ci/build-env.yaml
-
-    - name: Prepare for cache restore
-      if: ${{ matrix.compiler == 'intel' }}
-      run: |
-        sudo mkdir -p /opt/intel
-        sudo chown $USER /opt/intel
-
-    - name: Cache Intel install
-      if: ${{ matrix.compiler == 'intel' }}
-      id: cache-install
-      uses: actions/cache@v3
-      with:
-        path: /opt/intel/oneapi
-        key: install-${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.os }}
-
-    - name: Install Intel
-      if: ${{ contains(matrix.compiler, 'intel') && steps.cache-install.outputs.cache-hit != 'true' }}
-      run: |
-        bash assets/ci/setup-intel.sh
-
-    - name: Setup Intel oneAPI environment
-      if: ${{ matrix.compiler == 'intel' }}
-      run: |
-        source /opt/intel/oneapi/setvars.sh
-        printenv >> $GITHUB_ENV
-
-    - name: Configure build (meson)
-      if: ${{ matrix.build == 'meson' }}
-      run: >-
-        meson setup ${{ env.BUILD_DIR }}
-        --buildtype=debug
-        --prefix=$PWD/_dist
-        --libdir=lib
-        --warnlevel=0
-        -Db_coverage=${{ env.COVERAGE }}
-        ${{ env.MESON_ARGS }}
-      env:
-        COVERAGE: ${{ matrix.build-type == 'coverage' }}
-        MESON_ARGS: >-
-          ${{ contains(matrix.os, 'macos') && '-Dlapack=openblas' || '' }}
-
-    - name: Configure build (CMake)
-      if: ${{ matrix.build == 'cmake' }}
-      run: >-
-        cmake -B${{ env.BUILD_DIR }}
-        -GNinja
-        -DCMAKE_BUILD_TYPE=Debug
-        -DCMAKE_INSTALL_PREFIX=$PWD/_dist
-        -DCMAKE_INSTALL_LIBDIR=lib
-
-    - name: Build library (fpm)
-      if: ${{ matrix.build == 'fpm' }}
-      run: fpm build
-
-    - name: Build library
-      if: ${{ matrix.build != 'fpm' }}
-      run: ninja -C ${{ env.BUILD_DIR }}
-
-    - name: Run unit tests (fpm)
-      if: ${{ matrix.build == 'fpm' }}
-      run: fpm test
-
-    - name: Run unit tests (meson)
-      if: ${{ matrix.build == 'meson' }}
-      run: >-
-         meson test
-         -C ${{ env.BUILD_DIR }}
-         --print-errorlogs
-         --no-rebuild
-         --num-processes 1
-         --suite dftd4
-         -t 2
-      env:
-        OMP_NUM_THREADS: 1,2,1
-
-    - name: Run benchmarks
-      if: ${{ matrix.build == 'meson' }}
-      run: >-
-         meson test
-         -C ${{ env.BUILD_DIR }}
-         --print-errorlogs
-         --no-rebuild
-         --num-processes 1
-         --suite dftd4
-         -t 2
-         --benchmark
-
-    - name: Run unit tests (ctest)
-      if: ${{ matrix.build == 'cmake' }}
-      run: |
-         ctest --output-on-failure --parallel 2
-      working-directory: ${{ env.BUILD_DIR }}
-      env:
-        OMP_NUM_THREADS: 1,2,1
-
-    - name: Create coverage report
-      if: ${{ matrix.build == 'meson' && matrix.build-type == 'coverage' }}
-      run:
-         ninja -C ${{ env.BUILD_DIR }} coverage
-
-    - name: Install project
-      if: ${{ matrix.build != 'fpm' }}
-      run: |
-        ninja -C ${{ env.BUILD_DIR }} install
-        echo "DFTD4_PREFIX=$PWD/_dist" >> $GITHUB_ENV
-
-    - name: Create package
-      if: ${{ matrix.build == 'meson' }}
-      run: |
-        tar cvf ${{ env.OUTPUT }} _dist
-        xz -T0 ${{ env.OUTPUT }}
-        echo "DFTD4_OUTPUT=${{ env.OUTPUT }}.xz" >> $GITHUB_ENV
-      env:
-        OUTPUT: dftd4-${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.os }}.tar
-
-    - name: Upload package
-      if: ${{ matrix.build == 'meson' && matrix.build-type != 'coverage' }}
-      uses: actions/upload-artifact@v3
-      with:
-        name: ${{ env.DFTD4_OUTPUT }}
-        path: ${{ env.DFTD4_OUTPUT }}
-
-    - name: Upload coverage report
-      if: ${{ matrix.build-type == 'coverage' }}
-      uses: codecov/codecov-action@v3
-
+      - name: Checkout code
+        uses: actions/checkout@v4
+        with:
+          persist-credentials: false
+
+      - uses: actions/setup-python@v5
+        with:
+          python-version: ${{ env.PYTHON_V }}
+
+      - name: Link pre-installed GCC and FC (MacOS - ARM)
+        if: ${{ contains(matrix.os, 'macos') && ! contains(matrix.os, '13') && matrix.compiler == 'gnu' }}
+        run: |
+          brew install openblas
+          gfortran_path=$( which gfortran-${GCC_V} )
+          gcc_path=$( which gcc-${GCC_V} )
+          gplusplus_path=$( which g++-${GCC_V} )
+          export FC=$gfortran_path
+          export CC=$gcc_path
+          export CXX=$gplusplus_path
+          ln -s $gfortran_path /usr/local/bin/gfortran
+          ln -s $gcc_path /usr/local/bin/gcc
+          ln -s $gplusplus_path /usr/local/bin/g++
+          echo "PKG_CONFIG_PATH=/usr/local/opt/openblas/lib/pkgconfig" >> $GITHUB_ENV
+          echo "LDFLAGS=-L/opt/homebrew/opt/openblas/lib" >> $GITHUB_ENV
+          echo "CPPFLAGS=-I/opt/homebrew/opt/openblas/include" >> $GITHUB_ENV
+          brew install libffi
+          export LDFLAGS="-L$(brew --prefix libffi)/lib"
+          export CPPFLAGS="-I$(brew --prefix libffi)/include"
+        env:
+          GCC_V: ${{ env.GCC_V }}
+
+      - name: Install GCC (MacOS - x86_64)
+        if: ${{ contains(matrix.os, 'macos-13') && matrix.compiler == 'gnu' }}
+        run: |
+          brew install gcc@$GCC_V openblas
+          ln -s /usr/local/bin/gfortran-${GCC_V} /usr/local/bin/gfortran
+          ln -s /usr/local/bin/gcc-${GCC_V} /usr/local/bin/gcc
+          ln -s /usr/local/bin/g++-${GCC_V} /usr/local/bin/g++
+          echo "PKG_CONFIG_PATH=/usr/local/opt/openblas/lib/pkgconfig" >> $GITHUB_ENV
+        env:
+          GCC_V: ${{ env.GCC_V }}
+
+      - name: Install GCC (Linux)
+        if: ${{ contains(matrix.os, 'ubuntu') && matrix.compiler == 'gnu' }}
+        run: |
+          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
+          sudo apt-get update
+          sudo apt-get install -y gcc-${GCC_V} gfortran-${GCC_V}
+          sudo update-alternatives \
+            --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
+            --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V} \
+            --slave /usr/bin/gcov gcov /usr/bin/gcov-${GCC_V}
+          sudo apt-get install -y liblapack-dev
+        env:
+          GCC_V: ${{ env.GCC_V }}
+
+      - name: Install GCC (Windows)
+        if: ${{ contains(matrix.os, 'windows') && matrix.compiler == 'msys' }}
+        uses: msys2/setup-msys2@v2
+        with:
+          msystem: MINGW64
+          update: false
+          install: >-
+            git
+            mingw-w64-x86_64-gcc-fortran
+            mingw-w64-x86_64-openblas
+            mingw-w64-x86_64-lapack
+            mingw-w64-x86_64-cmake
+            mingw-w64-x86_64-meson
+            mingw-w64-x86_64-ninja
+
+      - name: Install fpm
+        if: ${{ matrix.build == 'fpm' }}
+        uses: fortran-lang/setup-fpm@v5
+        with:
+          github-token: ${{ secrets.GITHUB_TOKEN }}
+
+      - name: Prepare for cache restore
+        if: ${{ matrix.compiler == 'intel' }}
+        run: |
+          sudo mkdir -p /opt/intel
+          sudo chown $USER /opt/intel
+
+      - name: Cache Intel install
+        if: ${{ matrix.compiler == 'intel' }}
+        id: cache-install
+        uses: actions/cache@v4
+        with:
+          path: /opt/intel/oneapi
+          key: install-${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.os }}
+
+      - name: Install Intel (Linux)
+        if: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'intel') && steps.cache-install.outputs.cache-hit != 'true' }}
+        run: |
+          wget https://apt.repos.intel.com/intel-gpg-keys/$KEY
+          sudo apt-key add $KEY
+          rm $KEY
+          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
+          sudo apt-get update
+          sudo apt-get install $PKG
+        env:
+          KEY: GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
+          PKG: ${{ env.LINUX_INTEL_COMPONENTS }}
+
+      - name: Setup Intel oneAPI environment
+        if: ${{ matrix.compiler == 'intel' }}
+        run: |
+          source /opt/intel/oneapi/setvars.sh
+          printenv >> $GITHUB_ENV
+
+      - name: Install build and test dependencies
+        if: ${{ ! contains(matrix.os, 'windows') }}
+        run: pip3 install $PIP_PACKAGES $PIP_EXTRAS
+        env:
+          PIP_PACKAGES: ${{ env.PIP_PACKAGES }}
+          PIP_EXTRAS: ${{ env.PIP_EXTRAS }}
+
+      - name: Configure build (meson)
+        if: ${{ matrix.build == 'meson' }}
+        run: >-
+          meson setup $BUILD_DIR
+          --buildtype=debug
+          --prefix=$PWD/_dist
+          --libdir=lib
+          --warnlevel=0
+          -Db_coverage=$COVERAGE
+          $MESON_ARGS
+        env:
+          BUILD_DIR: ${{ env.BUILD_DIR }}
+          COVERAGE: ${{ matrix.build-type == 'coverage' }}
+          MESON_ARGS: >-
+            ${{ matrix.compiler == 'intel' && '-Dfortran_link_args=-qopenmp -Dapi=false' || '' }}
+            ${{ contains(matrix.os, 'macos') && '-Dlapack=openblas' || '' }}
+            ${{ contains(matrix.os, 'windows') && '-Dfortran_link_args=-Wl,--allow-multiple-definition' || '' }}
+
+      - name: Configure build (CMake)
+        if: ${{ matrix.build == 'cmake' }}
+        run: >-
+          cmake -B${BUILD_DIR}
+          -GNinja
+          -DCMAKE_BUILD_TYPE=Debug
+          -DCMAKE_INSTALL_PREFIX=$PWD/_dist
+          -DCMAKE_INSTALL_LIBDIR=lib
+        env:
+          BUILD_DIR: ${{ env.BUILD_DIR }}
+
+      - name: Build library (fpm)
+        if: ${{ matrix.build == 'fpm' }}
+        run: |
+          fpm --version
+          fpm build
+
+      - name: Build library
+        if: ${{ matrix.build != 'fpm' }}
+        run: ninja -C $BUILD_DIR
+        env:
+          BUILD_DIR: ${{ env.BUILD_DIR }}
+
+      - name: Run unit tests (fpm)
+        if: ${{ matrix.build == 'fpm' }}
+        run: fpm test
+
+      - name: Run unit tests (meson)
+        if: ${{ matrix.build == 'meson' }}
+        run: >-
+          meson test
+          -C $BUILD_DIR
+          --print-errorlogs
+          --no-rebuild
+          --num-processes 1
+          --suite dftd4
+          -t 2
+        env:
+          OMP_NUM_THREADS: 1,2,1
+          BUILD_DIR: ${{ env.BUILD_DIR }}
+
+      - name: Run benchmarks
+        if: ${{ matrix.build == 'meson' }}
+        run: >-
+          meson test
+          -C $BUILD_DIR
+          --print-errorlogs
+          --no-rebuild
+          --num-processes 1
+          --suite dftd4
+          -t 2
+          --benchmark
+        env:
+          BUILD_DIR: ${{ env.BUILD_DIR }}
+
+      - name: Run unit tests (ctest)
+        if: ${{ matrix.build == 'cmake' }}
+        run: |
+          ctest --output-on-failure --parallel 2
+        working-directory: ${{ env.BUILD_DIR }}
+        env:
+          OMP_NUM_THREADS: 1,2,1
+
+      - name: Create coverage report
+        if: ${{ matrix.build == 'meson' && matrix.build-type == 'coverage' }}
+        run: ninja -C $BUILD_DIR coverage
+        env:
+          BUILD_DIR: ${{ env.BUILD_DIR }}
+
+      - name: Install project
+        if: ${{ matrix.build != 'fpm' }}
+        run: |
+          ninja -C $BUILD_DIR install
+          echo "DFTD4_PREFIX=$PWD/_dist" >> $GITHUB_ENV
+        env:
+          BUILD_DIR: ${{ env.BUILD_DIR }}
+
+      - name: Create package
+        if: ${{ matrix.build == 'meson' && matrix.version == 12 && matrix.build-type == 'debug' && matrix.compiler == 'gnu' }}
+        run: |
+          tar cvf ${OUTPUT} _dist
+          xz -T0 $OUTPUT
+          echo "DFTD4_OUTPUT=${OUTPUT}.xz" >> $GITHUB_ENV
+        env:
+          OUTPUT: dftd4-${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.os }}.tar
+
+      - name: Upload package
+        if: ${{ matrix.build == 'meson' && matrix.version == 12 && matrix.build-type == 'debug' && matrix.compiler == 'gnu' }}
+        uses: actions/upload-artifact@v4
+        with:
+          name: ${{ env.DFTD4_OUTPUT }}
+          path: ${{ env.DFTD4_OUTPUT }}
+
+      - name: Upload coverage report
+        if: ${{ matrix.build == 'meson' && matrix.build-type == 'coverage' }}
+        uses: codecov/codecov-action@v4
+        with:
+          token: ${{ secrets.CODECOV_TOKEN }}
 
   python:
     needs:
       - build
     runs-on: ${{ matrix.os }}
-    defaults:
-      run:
-        shell: bash -l {0}
     strategy:
       fail-fast: false
       matrix:
         os: [ubuntu-latest]
-        gcc_v: [10]
-        python_v: ['3.7', '3.8', '3.9', '3.10']
+        gcc_v: [12]
+        python_v: ["3.8", "3.9", "3.10", "3.11", "3.12"]
+
+        include:
+          - os: macos-latest
+            gcc_v: 12
+            python_v: "3.9"
 
     env:
       FC: gfortran
@@ -257,65 +370,83 @@ jobs:
       DFTD4_OUTPUT: dftd4-gnu-${{ matrix.gcc_v }}-${{ matrix.os }}.tar.xz
 
     steps:
-    - name: Checkout code
-      uses: actions/checkout@v3
-
-    - name: Install dependencies
-      uses: mamba-org/setup-micromamba@v1
-      with:
-        environment-file: assets/ci/python-env.yaml
-        create-args: >-
-          python=${{ matrix.python_v }}
-
-    - name: Install ase<3.23 for Python 3.7
-      if: matrix.python_v == '3.7'
-      run: |
-        micromamba install -y -c conda-forge "ase<3.23"
-
-    - name: Install GCC (OSX)
-      if: ${{ contains(matrix.os, 'macos') }}
-      run: |
-        brew install gcc@${{ env.GCC_V }} openblas
-        ln -s /usr/local/bin/gfortran-${{ env.GCC_V }} /usr/local/bin/gfortran
-        ln -s /usr/local/bin/gcc-${{ env.GCC_V }} /usr/local/bin/gcc
-        ln -s /usr/local/bin/g++-${{ env.GCC_V }} /usr/local/bin/g++
-        echo "PKG_CONFIG_PATH=/usr/local/opt/openblas/lib/pkgconfig" >> $GITHUB_ENV
-
-    - name: Install GCC (Linux)
-      if: ${{ contains(matrix.os, 'ubuntu') }}
-      run: >-
-        sudo update-alternatives
-        --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_V }} 100
-        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ env.GCC_V }}
-        --slave /usr/bin/gcov gcov /usr/bin/gcov-${{ env.GCC_V }}
-
-    - name: Download package
-      uses: actions/download-artifact@v3
-      with:
-        name: ${{ env.DFTD4_OUTPUT }}
-
-    - name: Unpack package
-      run: |
-        tar xvf ${{ env.DFTD4_OUTPUT }}
-        echo "DFTD4_PREFIX=$PWD/_dist" >> $GITHUB_ENV
-
-    - name: Copy parameter file
-      run: |
-        cp assets/parameters.toml python/dftd4
-
-    - name: Install Python extension module (pip)
-      run: pip3 install . -vv
-      working-directory: python
-      env:
-        PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}:${{ env.DFTD4_PREFIX }}/lib/pkgconfig
-
-    - name: Test Python API
-      run: pytest --pyargs dftd4 --cov=dftd4 -vv
-      env:
-        LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}:${{ env.DFTD4_PREFIX }}/lib
-        DYLD_LIBRARY_PATH: ${{ env.DYLD_LIBRARY_PATH }}:${{ env.DFTD4_PREFIX }}/lib
-
-    - run: pip3 install coverage
-
-    - name: Upload coverage report
-      uses: codecov/codecov-action@v3
+      - name: Checkout code
+        uses: actions/checkout@v4
+        with:
+          persist-credentials: false
+
+      - uses: actions/setup-python@v5
+        with:
+          python-version: ${{ matrix.python_v }}
+
+      - name: Link pre-installed GCC and FC (macOS)
+        if: ${{ contains(matrix.os, 'macos') }}
+        run: |
+          brew install openblas
+          gfortran_path=$( which gfortran-${GCC_V} )
+          gcc_path=$( which gcc-${GCC_V} )
+          gplusplus_path=$( which g++-${GCC_V} )
+          export FC=$gfortran_path
+          export CC=$gcc_path
+          export CXX=$gplusplus_path
+          ln -s $gfortran_path /usr/local/bin/gfortran
+          ln -s $gcc_path /usr/local/bin/gcc
+          ln -s $gplusplus_path /usr/local/bin/g++
+          echo "PKG_CONFIG_PATH=/usr/local/opt/openblas/lib/pkgconfig" >> $GITHUB_ENV
+          echo "LDFLAGS=-L/opt/homebrew/opt/openblas/lib" >> $GITHUB_ENV
+          echo "CPPFLAGS=-I/opt/homebrew/opt/openblas/include" >> $GITHUB_ENV
+        env:
+          GCC_V: ${{ env.GCC_V }}
+
+      - name: Install GCC (Linux)
+        if: ${{ contains(matrix.os, 'ubuntu') }}
+        run: |
+          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
+          sudo apt-get update
+          sudo update-alternatives \
+          --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
+          --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V} \
+          --slave /usr/bin/gcov gcov /usr/bin/gcov-${GCC_V}
+          sudo apt-get install liblapack-dev
+        env:
+          GCC_V: ${{ env.GCC_V }}
+
+      - name: Install meson and test dependencies
+        run: pip3 install $PIP_EXTRAS
+        env:
+          PIP_EXTRAS: ${{ env.PIP_EXTRAS }}
+
+      - name: Download package
+        uses: actions/download-artifact@v4
+        with:
+          name: ${{ env.DFTD4_OUTPUT }}
+
+      - name: Unpack package
+        run: |
+          tar xvf $DFTD4_OUTPUT
+          echo "DFTD4_PREFIX=$PWD/_dist" >> $GITHUB_ENV
+        env:
+          DFTD4_OUTPUT: ${{ env.DFTD4_OUTPUT }}
+
+      - name: Copy parameter file
+        run: |
+          cp assets/parameters.toml python/dftd4
+
+      - name: Install Python extension module (pip)
+        run: pip3 install . -vv
+        working-directory: python
+        env:
+          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}:${{ env.DFTD4_PREFIX }}/lib/pkgconfig
+
+      - name: Test Python API
+        run: pytest --pyargs dftd4 --cov=dftd4 -vv
+        env:
+          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}:${{ env.DFTD4_PREFIX }}/lib
+          DYLD_LIBRARY_PATH: ${{ env.DYLD_LIBRARY_PATH }}:${{ env.DFTD4_PREFIX }}/lib
+
+      - run: pip3 install coverage
+
+      - name: Upload coverage report
+        uses: codecov/codecov-action@v4
+        with:
+          token: ${{ secrets.CODECOV_TOKEN }}
diff --git a/.github/workflows/wheel.yml b/.github/workflows/wheel.yml
index 05f3367..d8918d4 100644
--- a/.github/workflows/wheel.yml
+++ b/.github/workflows/wheel.yml
@@ -1,95 +1,199 @@
 name: wheel
 
-on: [push, workflow_dispatch]
+on:
+  push:
+    branches:
+      - main
+    paths-ignore:
+      - "doc*/**"
+      - "./*.ya?ml"
+      - "**/*.adoc"
+      - "**/*.md"
+      - "**/*.rst"
 
-env:
-  # https://github.com/actions/checkout/issues/1809
-  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
+  pull_request:
+    paths-ignore:
+      - "doc*/**"
+      - "./*.ya?ml"
+      - "**/*.adoc"
+      - "**/*.md"
+      - "**/*.rst"
+
+  workflow_dispatch:
+
+  release:
+    types: [published]
 
 jobs:
+  source:
+    runs-on: ubuntu-latest
+    defaults:
+      run:
+        shell: bash -l {0}
+    steps:
+      - name: Checkout code
+        uses: actions/checkout@v4
+        with:
+          persist-credentials: false
+
+      - name: Install LAPACK
+        run: |
+          sudo apt-get update
+          sudo apt-get install -y liblapack-dev
+
+      - name: Setup Python
+        uses: mamba-org/setup-micromamba@v1
+        with:
+          environment-file: assets/ci/build-env.yaml
+
+      - run: |
+          meson setup _build
+          meson dist -C _build --no-tests --include-subprojects
+          mv _build/meson-dist/*.tar.xz .
+
+      - uses: actions/upload-artifact@v4
+        with:
+          name: dftd4-source
+          path: ./*.tar.xz
+          retention-days: 5
+
   sdist:
     runs-on: ubuntu-latest
+    defaults:
+      run:
+        shell: bash -l {0}
     steps:
-    - uses: actions/checkout@v2
-    - name: Reorganize repository
-      run: |
-        git config user.email ""
-        git config user.name "dummy"
-        git subtree add --prefix python/subprojects/dftd4 . HEAD
-        git mv {assets,python/dftd4}/parameters.toml
-        git commit -m "Python dist"
-    - run: |
-        pipx run build python/ --sdist --outdir .
-    - uses: actions/upload-artifact@v3
-      with:
-        name: dftd4-python-sdist
-        path: ./*.tar.gz
-        retention-days: 5
-
-  manylinux:
+      - name: Checkout code
+        uses: actions/checkout@v4
+        with:
+          persist-credentials: false
+
+      - name: Install LAPACK
+        run: |
+          sudo apt-get update
+          sudo apt-get install -y liblapack-dev
+
+      - name: Setup Python
+        uses: mamba-org/setup-micromamba@v1
+        with:
+          environment-file: assets/ci/python-env.yaml
+          create-args: >-
+            meson-python
+            python-build
+
+      - name: Install LAPACK
+        run: |
+          sudo apt-get update
+          sudo apt-get install -y liblapack-dev
+
+      - name: Reorganize repository
+        run: |
+          git config user.email ""
+          git config user.name "dummy"
+          git subtree add --prefix python/subprojects/dftd4 . HEAD
+          git mv {assets,python/dftd4}/parameters.toml
+          git commit -m "Python dist"
+
+      - name: Build source distribution
+        run: |
+          python -m build python/ --sdist --outdir . -n
+
+      - name: Upload source distribution as artifact
+        uses: actions/upload-artifact@v4
+        with:
+          name: dftd4-python-sdist
+          path: ./*.tar.gz
+          retention-days: 5
+
+  wheels:
     needs:
       - sdist
-    runs-on: ubuntu-latest
-    container: condaforge/linux-anvil-cos7-x86_64
+    runs-on: ${{ matrix.os }}
     strategy:
       fail-fast: false
       matrix:
-        python: ['3.7', '3.8', '3.9', '3.10', '3.11']
+        os:
+          - ubuntu-latest
+          - macos-latest
+          - macos-13
+        python: ["39", "310", "311", "312", "313"]
+        include: # Python 3.7 and 3.8 is not supported on 'macos-latest'
+          - os: ubuntu-latest
+            python: "37"
+          - os: ubuntu-latest
+            python: "38"
+          - os: macos-13
+            python: "37"
+          - os: macos-13
+            python: "38"
 
     defaults:
       run:
-        shell: ${{ matrix.shell || 'bash -l {0}' }}
+        shell: bash -l {0}
 
     steps:
-    - name: Create environment
-      run: >-
-        mamba create -n wheel
-        --yes
-        c-compiler
-        fortran-compiler
-        python=${{ matrix.python }}
-        auditwheel
-        git
-        python
-        pip
-        python-build
-        pkgconfig
-        patchelf
-        cffi
-        numpy
-        meson
-        unzip
-        wheel
-    - name: Download sdist
-      uses: actions/download-artifact@v2
-      with:
-        name: dftd4-python-sdist
-    - name: Build wheel
-      run: |
-        conda activate wheel
-        set -ex
-        tar xvf dftd4-*.tar.gz
-        python -m build dftd4-*/ --wheel
-        auditwheel show dftd4-*/dist/*.whl
-        auditwheel repair -w . dftd4-*/dist/*.whl --plat ${{ env.plat }}
-      env:
-        plat: manylinux2014_x86_64
-    - uses: actions/upload-artifact@v3
-      with:
-        name: dftd4-python-${{ matrix.python }}
-        path: ./*.whl
-        retention-days: 5
+      # Set up Python to host 'cibuildwheel'
+      - uses: actions/setup-python@v5
+        with:
+          python-version: "3.x"
+
+      # Install 'cibuildwheel' as the driver for building wheels
+      - name: Install cibuildwheel
+        run: python -m pip install cibuildwheel==2.20.0
+
+      # Download the source distribution from above
+      - name: Download sdist
+        uses: actions/download-artifact@v4
+        with:
+          name: dftd4-python-sdist
+
+      # Build wheels for all supported Python versions
+      - name: Build wheels
+        run: python -m cibuildwheel --output-dir . *.tar.gz
+        env:
+          CIBW_PLAT: ${{ contains(matrix.os, 'macos') && '-Dlapack=openblas' || '' }}
+          CIBW_ARCHS_MACOS: ${{ matrix.os == 'macos-13' && 'x86_64' || 'arm64' }}
+          CIBW_ARCHS_LINUX: x86_64
+          CIBW_BUILD: "*${{ matrix.python }}-*"
+          # MM: Package installation (yum install ...) works differently on musllinux
+          CIBW_SKIP: "*musllinux*"
+          # Control verbosity of the 'pip wheel' output
+          CIBW_BUILD_VERBOSITY: 1
+          CIBW_BEFORE_ALL_LINUX: yum install -y lapack-devel
+          # Delete all other (=/= gcc-14) GCC versions to avoid conflicts in delocation of the wheel
+          # MM: 'openblas' from brew requires gcc@14, using a different version for building leads to delocation errors
+          # MM: gcc@14 needs macOS14
+          CIBW_BEFORE_ALL_MACOS: |
+            brew uninstall gcc@12
+            brew uninstall gcc@13
+            brew autoremove
+            brew install openblas
+          # Set macOS variables to find gfortran, lapack, and avoid testing against macOS earlier than 14 (see above)
+          CIBW_ENVIRONMENT_MACOS: >
+            CC=gcc-14 CXX=g++-14 FC=gfortran-14
+            PKG_CONFIG_PATH="$(brew --prefix openblas)/lib/pkgconfig"
+            LDFLAGS="-L$(brew --prefix openblas)/lib -L/usr/local/lib"
+            CPPFLAGS="-I$(brew --prefix openblas)/include"
+            MACOSX_DEPLOYMENT_TARGET=${{ matrix.os == 'macos-13' && '13.0' || '14.0' }}
+
+      # Upload the built wheels as artifacts
+      - uses: actions/upload-artifact@v4
+        with:
+          name: dftd4-python-${{ matrix.os }}-${{ matrix.python }}
+          path: ./*.whl
+          retention-days: 5
 
   release:
     needs:
+      - source
       - sdist
-      - manylinux
+      - wheels
     runs-on: ubuntu-latest
     steps:
       - name: Download artifacts
-        uses: actions/download-artifact@v2
+        uses: actions/download-artifact@v4
         with:
-          path: ${{ github.workspace }}  # This will download all files
+          path: ${{ github.workspace }} # This will download all files
 
       - name: Create SHA256 checksums
         run: |
@@ -111,7 +215,7 @@ jobs:
         with:
           user: __token__
           password: ${{ secrets.TEST_PYPI_TOKEN }}
-          repository_url: https://test.pypi.org/legacy/
+          repository-url: https://test.pypi.org/legacy/
 
       - name: Upload assets
         uses: svenstaro/upload-release-action@v2
diff --git a/.gitignore b/.gitignore
index 4e6c2c3..ca6e3b2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -33,6 +33,7 @@
 
 # Build directories
 /build*/
+/install*/
 /_*/
 
 # Python files
diff --git a/CITATION.bib b/CITATION.bib
new file mode 100644
index 0000000..26d18cd
--- /dev/null
+++ b/CITATION.bib
@@ -0,0 +1,63 @@
+@article{dftd4-1,
+  author    = {Eike Caldeweyher and Christoph Bannwarth and Stefan Grimme},
+  journal   = {J. Chem. Phys.},
+  title     = {Extension of the D3 dispersion coefficient model},
+  year      = {2017},
+  month     = {7},
+  number    = {3},
+  pages     = {034112},
+  volume    = {147},
+  doi       = {10.1063/1.4993215},
+  publisher = {{AIP} Publishing}
+}
+
+@article{dftd4-2,
+  author    = {Eike Caldeweyher and Sebastian Ehlert and Andreas Hansen and Hagen Neugebauer and Sebastian Spicher and Christoph Bannwarth and Stefan Grimme},
+  journal   = {J. Chem. Phys.},
+  title     = {A generally applicable atomic-charge dependent London dispersion correction},
+  year      = {2019},
+  month     = {4},
+  number    = {15},
+  pages     = {154122},
+  volume    = {150},
+  doi       = {10.1063/1.5090222},
+  publisher = {{AIP} Publishing}
+}
+
+@article{dftd4-periodic,
+  author    = {Eike Caldeweyher and Jan-Michael Mewes and Sebastian Ehlert and Stefan Grimme},
+  journal   = {Phys. Chem. Chem. Phys.},
+  title     = {Extension and evaluation of the D4 London-dispersion model for periodic systems},
+  year      = {2020},
+  number    = {16},
+  pages     = {8499--8512},
+  volume    = {22},
+  doi       = {10.1039/d0cp00502a},
+  publisher = {Royal Society of Chemistry ({RSC})}
+}
+
+@article{dftd4-rsh,
+  author  = {Friede, Marvin and Ehlert, Sebastian and Grimme, Stefan and Mewes, Jan-Michael},
+  title   = {Do Optimally Tuned Range-Separated Hybrid Functionals Require a Reparametrization of the Dispersion Correction? It Depends},
+  journal = {Journal of Chemical Theory and Computation},
+  volume  = {19},
+  number  = {22},
+  pages   = {8097-8107},
+  year    = {2023},
+  doi     = {10.1021/acs.jctc.3c00717},
+  note    = {PMID: 37955590},
+  url     = {https://doi.org/10.1021/acs.jctc.3c00717}
+}
+
+@article{dftd4-actinides,
+  author    = {Wittmann, Lukas and Gordiy, Igor and Friede, Marvin and Helmich-Paris, Benjamin and Grimme, Stefan and Hansen, Andreas and Bursch, Markus},
+  title     = {Extension of the D3 and D4 London dispersion corrections to the full actinides series},
+  journal   = {Phys. Chem. Chem. Phys.},
+  year      = {2024},
+  volume    = {26},
+  issue     = {32},
+  pages     = {21379-21394},
+  publisher = {The Royal Society of Chemistry},
+  doi       = {10.1039/D4CP01514B},
+  url       = {http://dx.doi.org/10.1039/D4CP01514B},
+}
diff --git a/CMakeLists.txt b/CMakeLists.txt
index dd87742..43b52a7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -39,8 +39,8 @@ elseif(WITH_ILP64)
   message(FATAL_ERROR "ILP64 support needs BLAS_LIBRARIES")
 endif()
 
-if(NOT TARGET "BLAS::BLAS")
-  find_package("custom-blas" REQUIRED)
+if(NOT TARGET "DFTD4::BLAS")
+  find_package("dftd4-blas" REQUIRED)
 endif()
 
 # Collect subprojects
@@ -129,6 +129,10 @@ install(
   "${PROJECT_NAME}::"
   DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
 )
+install(
+  FILES ${CMAKE_SOURCE_DIR}/config/cmake/Finddftd4-blas.cmake
+  DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+)
 install(
   DIRECTORY
   "${CMAKE_CURRENT_BINARY_DIR}/include/"
diff --git a/README.md b/README.md
index 7e82086..7144f4f 100644
--- a/README.md
+++ b/README.md
@@ -250,6 +250,26 @@ dftd4 --func GGA_X_PBE:GGA_C_PBE coord
 The exchange and correlation functional must be separated by a colon.
 All names are case-insensitive.
 
+<details>
+<summary>Note on ωB97X-type functionals</summary>
+
+Since there has been some confusion concerning the different ωB97X functionals, we provide a detailed summary: 
+
+- [ωB97X](https://doi.org/10.1063/1.2834918) (original functional, 2008, parameters: `wb97x-2008`)
+- [ωB97X-D](https://doi.org/10.1039/B810189B) (re-optimization of ωB97X to include dispersion correction, 2008, no D4 parameters)
+- [ωB97X-D3](https://doi.org/10.1021/ct300715s) (re-optimization of ωB97X-D with improved dispersion corrections, D3(0), 2013, no D4 parameters)
+- [ωB97X-V](https://doi.org/10.1039/C3CP54374A) (new functional, different from the above ωB97X's and not just a re-optimization for VV10 dispersion, 2013)
+- [ωB97X-D4](https://doi.org/10.1002/jcc.26411) (ωB97X-V with D4 dispersion instead of VV10 dispersion, parameters: `wb97x`)
+- [ωB97X-D4rev](https://doi.org/10.1063/5.0133026) (revised D4 parameters for ωB97X-V with D4 dispersion instead of VV10 dispersion, parameters: `wb97x-rev`)
+- [ωB97X-3c](https://doi.org/10.1063/5.0133026) (Composite "3c" method based on ωB97X-V, parameters: `wb97x-3c`)
+
+Note that the ωB97X parameters (`wb97x-2008`) cannot be used for the ωB97X-V functional (`wb97x`, `wb97x-rev`).
+We recommend the revised D4 parameters for ωB97X-V (`wb97x-rev`).
+
+</details>
+
+<br>
+
 You can add new functionals using to the TOML file by adding a new subtable
 
 ```toml
@@ -325,6 +345,16 @@ LLIBS       += $(shell pkg-config --libs dftd4)
 INCS        += $(shell pkg-config --cflags dftd4)
 ```
 
+Depending on how you built DFT-D4, DFT-D4's dependencies might not be properly recognized during the VASP build. Try to explicitly add them to the link line.
+
+```make
+CPP_OPTIONS += -DDFTD4
+LLIBS       += $(shell pkg-config --libs dftd4) -lmulticharge -lmctc-lib -lmstore
+INCS        += $(shell pkg-config --cflags dftd4)
+```
+
+If you still run into issues, check out [VASP-related issues](https://github.com/dftd4/dftd4/issues?q=label%3Avasp%20) on the ``dftd4`` issue tracker.
+
 
 ### C API
 
@@ -391,6 +421,24 @@ Eike Caldeweyher, Jan-Michael Mewes, Sebastian Ehlert and Stefan Grimme, *Phys.
 DOI: [10.1039/D0CP00502A](https://doi.org/10.1039/D0CP00502A)
 chemrxiv: [10.26434/chemrxiv.10299428](https://doi.org/10.26434/chemrxiv.10299428.v1)
 
+<br>
+
+In the range-separate hybrid context:
+
+Marvin Friede, Sebastian Ehlert, Stefan Grimme and Jan-Michael Mewes, *J. Chem. Theory Comput.*, **2023**, 19 (22), 8097-8107.
+DOI: [10.1021/acs.jctc.3c00717](10.1021/acs.jctc.3c00717)
+
+<br>
+
+Extension to Fr, Ra, and full Actinide series:
+
+Lukas Wittmann, Igor Gordiy, Marvin Friede, Benjamin Helmich-Paris, Stefan Grimme, Andreas Hansen and Markus Bursch, *Phys. Chem. Chem. Phys.*, **2024**, 26, 21379-21394.
+DOI: [10.1039/D4CP01514B](10.1039/D4CP01514B)
+
+<br>
+
+Citations can also be viewed via `dftd4 --citation` or in the [BibTeX file](CITATION.bib).
+
 
 ## License
 
diff --git a/app/01-energy-d4s.json b/app/01-energy-d4s.json
new file mode 100644
index 0000000..529cc0a
--- /dev/null
+++ b/app/01-energy-d4s.json
@@ -0,0 +1,4 @@
+{
+  "version":  "3.7.0",
+  "energy":    -2.6607170022857E-02
+}
diff --git a/app/02-gradient-d4s.json b/app/02-gradient-d4s.json
new file mode 100644
index 0000000..75f3069
--- /dev/null
+++ b/app/02-gradient-d4s.json
@@ -0,0 +1,143 @@
+{
+  "version":  "3.7.0",
+  "energy":    -1.1715899737148880E-02,
+  "virial": [
+     3.7851713933501705E-03,
+    -8.1288172988859856E-04,
+     7.1872985559556118E-04,
+    -8.1288172988859856E-04,
+     7.6271285791837395E-03,
+     4.9673613055807478E-04,
+     7.1872985559556129E-04,
+     4.9673613055807478E-04,
+     2.5557679250609640E-03
+  ],
+  "gradient": [
+     5.0708719950501157E-06,
+     6.9790285785804521E-05,
+     7.4582379483635716E-05,
+     2.6758658553916956E-05,
+     6.8291798400885105E-05,
+     3.6759881358822335E-05,
+    -1.5529094867403934E-05,
+     5.2360740334214594E-05,
+     5.3431230234034356E-05,
+    -6.3119373387228183E-06,
+     3.1214699061503701E-05,
+     6.0937861068977001E-08,
+    -5.7029639195333330E-06,
+     5.3610332896693898E-05,
+    -4.9070935939292271E-05,
+    -5.2189205334807051E-05,
+     5.3597739527035802E-05,
+    -3.6345247975372378E-05,
+    -3.2193863984979353E-05,
+     6.3050940822830315E-05,
+    -7.4406219121144236E-05,
+    -6.8199471199151069E-07,
+     2.4800444411536608E-06,
+     4.1668314838319672E-06,
+     4.7935669175707516E-05,
+    -8.9185800761939102E-06,
+     4.4187557288377929E-06,
+     5.2979151308826060E-05,
+    -5.1533875231268932E-05,
+     3.0711593412684880E-06,
+     1.4066680634948404E-05,
+    -7.1035881518115326E-05,
+     3.3680744313132799E-06,
+    -2.9389221372569086E-05,
+    -6.8022388147806817E-05,
+     4.4063865455187328E-06,
+    -4.1298549426047041E-05,
+    -2.6538614213660617E-05,
+     5.7133966647469458E-06,
+    -7.6446781370116375E-05,
+    -1.7953651272498908E-05,
+     4.4407660447327063E-06,
+    -8.0016860146350468E-05,
+    -1.0581016208387845E-05,
+    -2.7811899542245357E-05,
+    -8.3546830039757863E-05,
+    -1.6669008630562762E-05,
+     3.4432465592290238E-05,
+     2.3812380214019830E-05,
+    -1.1684002908194005E-04,
+    -1.6459621246456614E-05,
+     4.1901825929315152E-05,
+    -5.5298626809437875E-05,
+     1.6125411888942118E-05,
+    -1.8448502525466406E-05,
+    -6.7274096432440124E-05,
+     1.3721139232111884E-05,
+     1.3714912277191165E-05,
+    -6.0356444056628161E-05,
+    -4.6329314505097146E-05,
+     7.7284864829571523E-05,
+     1.2708386125635737E-05,
+     4.6889168799917932E-07,
+     7.7237713501119115E-05,
+     1.7633592416565384E-05,
+     2.9688298304026077E-05,
+     8.4330592553775904E-05,
+     1.9663861619767448E-05,
+    -3.2546049197661539E-05,
+    -1.5120796151620731E-06,
+     1.0964990459210503E-05,
+     1.6021176317327828E-05,
+     1.0244388622063988E-05,
+     1.5134766002302252E-05,
+     2.0937787525761237E-05,
+     2.2011557406793824E-06,
+     2.3771471231183852E-05,
+     1.4791426291776318E-05,
+     1.9308809652847292E-06,
+     1.7332053458200055E-05,
+     1.7554027601555432E-05,
+     5.2017185849279400E-06,
+     1.6376459441194721E-05,
+     2.5857740812920871E-05,
+     9.5638420207772876E-07,
+     1.9530360103273072E-05,
+     7.4996334135244906E-06,
+     4.0630634209782417E-06,
+     8.0380387900326991E-06,
+     1.1826601794699065E-05,
+    -8.2949178580240949E-06,
+     1.9146007324269666E-05,
+    -7.5163575675225402E-06,
+    -5.6109526891496664E-06,
+     7.4617872093392460E-06,
+    -1.1492761254151282E-05,
+    -9.0155187684656316E-06,
+     1.5741311365132330E-05,
+    -1.7038284364516450E-05,
+    -1.0872704967761594E-05,
+     1.3044294136487020E-05,
+    -2.5790540671218004E-05,
+    -2.8910685042547403E-06,
+     1.0985821515427485E-05,
+    -1.6151938115027560E-05,
+    -1.5229358339843181E-05,
+     1.0057621859720810E-05,
+    -2.0771530621925347E-05,
+    -1.1275265521351752E-05,
+     2.1436075701735326E-05,
+    -1.4883288846923001E-05,
+     1.6460619722856689E-05,
+    -1.0054436061838848E-05,
+     3.4858502718417217E-06,
+    -1.1626784643225676E-05,
+    -1.5629047576246960E-05,
+     3.5432729610590167E-06,
+     1.4505266325490599E-06,
+    -6.9822951171518358E-06,
+    -2.3029130827042162E-06,
+     7.6975944868542779E-06,
+    -2.4480308489769973E-05,
+    -5.6013584732218666E-06,
+     2.7848025932698499E-06,
+    -2.5255181105650209E-05,
+    -5.8552623491669292E-06
+  ]
+}
diff --git a/app/cli.f90 b/app/cli.f90
index eccb5ac..fea7fd6 100644
--- a/app/cli.f90
+++ b/app/cli.f90
@@ -39,6 +39,7 @@ module dftd4_cli
       integer, allocatable :: input_format
       type(rational_damping_param) :: inp
       character(len=:), allocatable :: method
+      character(len=:), allocatable :: model
       logical :: json = .false.
       character(len=:), allocatable :: json_output
       logical :: wrap = .true.
@@ -180,6 +181,14 @@ subroutine get_run_arguments(config, list, start, error)
             call fatal_error(error, "Too many positional arguments present")
          end if
          exit
+      case("-m", "--model") 
+         iarg = iarg + 1
+         call get_argument(iarg, arg)
+         if (.not.allocated(arg)) then
+            call fatal_error(error, "Missing argument for model")
+            exit
+         end if
+         call move_alloc(arg, config%model)
       case("-i", "--input")
          iarg = iarg + 1
          call get_argument(iarg, arg)
@@ -280,6 +289,10 @@ subroutine get_run_arguments(config, list, start, error)
       config%grad_output = "dftd4.txt"
    end if
 
+   if (.not.allocated(config%model)) then
+      config%model = "d4"
+   end if
+
    if (.not.allocated(config%input)) then
       if (.not.allocated(error)) then
          write(output_unit, '(a)') help_text
diff --git a/app/driver.f90 b/app/driver.f90
index 9c7913d..4ffe6d6 100644
--- a/app/driver.f90
+++ b/app/driver.f90
@@ -19,7 +19,8 @@ module dftd4_driver
    use, intrinsic :: iso_fortran_env, only : output_unit, input_unit
    use mctc_env, only : error_type, fatal_error, wp
    use mctc_io, only : structure_type, read_structure, filetype
-   use dftd4, only : get_dispersion, d4_model, new_d4_model, &
+   use dftd4, only : get_dispersion, dispersion_model, &
+      & d4_model, new_d4_model, d4s_model, new_d4s_model, &
       realspace_cutoff, get_lattice_points, get_coordination_number, &
       damping_param, rational_damping_param, get_rational_damping, &
       get_properties, get_pairwise_dispersion, get_dispersion_hessian
@@ -71,7 +72,7 @@ subroutine run_main(config, error)
    character(len=:), allocatable :: filename
    character(len=:), allocatable :: functional
    class(damping_param), allocatable :: param
-   type(d4_model) :: d4
+   class(dispersion_model), allocatable :: d4
    real(wp) :: charge
    real(wp), allocatable :: energy, gradient(:, :), sigma(:, :), hessian(:, :, :, :)
    real(wp), allocatable :: pair_disp2(:, :), pair_disp3(:, :)
@@ -164,7 +165,23 @@ subroutine run_main(config, error)
       end if
    end if
 
-   call new_d4_model(error, d4, mol, ga=ga, gc=gc, wf=config%wf)
+   if(lowercase(config%model) == "d4") then
+      block 
+         type(d4_model), allocatable :: tmp
+         allocate(tmp)
+         call new_d4_model(error, tmp, mol, ga=ga, gc=gc, wf=config%wf)
+         call move_alloc(tmp, d4)
+      end block 
+   else if(lowercase(config%model) == "d4s") then
+      block 
+         type(d4s_model), allocatable :: tmp
+         allocate(tmp)
+         call new_d4s_model(error, tmp, mol, ga=ga, gc=gc)
+         call move_alloc(tmp, d4)
+      end block
+   else
+      call fatal_error(error, "Unknown model selected")
+   end if
    if (allocated(error)) return
 
    if (config%properties) then
diff --git a/app/help.f90 b/app/help.f90
index 4609e36..f36cade 100644
--- a/app/help.f90
+++ b/app/help.f90
@@ -37,8 +37,9 @@ module dftd4_help
       "   --mbdscale <s9>       Use scaled ATM three-body dispersion"//nl//&
       "   --zeta <list>         Adjust charge scaling parameters, takes two reals,"//nl//&
       "                         expected order is ga, gc (default: 3.0, 2.0)"//nl//&
-      "   --wfactor <real>      Adjust weighting factor for interpolation"//nl//&
+      "   --wfactor <real>      Adjust weighting factor for interpolation (only D4)"//nl//&
       "                         (default: 6.0)"//nl//&
+      "-m,--model <model>       Use specific D4 model (options: D4 (default), D4S)"//nl//&
       "-g,--grad [file]         Evaluate molecular gradient and virial,"//nl//&
       "                         write results to file (default: dftd4.txt),"//nl//&
       "                         attempts to add to Turbomole gradient and gradlatt files"//nl//&
@@ -57,7 +58,7 @@ module dftd4_help
    character(len=*), parameter :: help_text_run = &
       "Usage: "//prog_name//" [run] [options] <input>"//nl//&
       ""//nl//&
-      "Takes an geometry input to calculate the D4 dispersion correction."//nl//&
+      "Takes an geometry input to calculate the D4(S) dispersion correction."//nl//&
       "Periodic calculations are performed automatically for periodic input formats."//nl//&
       "Reads .CHRG file (if present) from the same directory as the input."//nl//&     
       "Specify the functional to select the correct parameters."//nl//&
@@ -81,7 +82,7 @@ module dftd4_help
       ""//nl//&
       !
       "Generally Applicable Atomic-Charge Dependent London Dispersion Correction."//nl//&
-      "Takes an geometry input to calculate the D4 dispersion correction."//nl//&
+      "Takes an geometry input to calculate the D4(S) dispersion correction."//nl//&
       "Periodic calculations are performed automatically for periodic input formats."//nl//&
       "Reads .CHRG file (if present) from the same directory as the input."//nl//&     
       "Specify the functional to select the correct parameters."//nl//&
@@ -118,6 +119,7 @@ subroutine header(unit)
       "     |          Mulliken Center for Theoretical Chemistry        |",&
       "     |                    University of Bonn                     |",&
       "      ----------------------------------------------------------- ",""
+
 end subroutine header
 
 
@@ -146,16 +148,32 @@ subroutine citation(unit)
       "DFTD4 model:", &
       "Eike Caldeweyher, Sebastian Ehlert, Andreas Hansen, Hagen Neugebauer,", &
       "Sebastian Spicher, Christoph Bannwarth and Stefan Grimme,", &
-      "J. Chem Phys, 2019, 150, 154122.", &
+      "J. Chem. Phys., 2019, 150, 154122.", &
       "DOI: 10.1063/1.5090222", &
       "ChemRxiv: 10.26434/chemrxiv.7430216.v2", &
       "", &
       "Periodic DFTD4 model:", &
-      "Eike Caldeweyher, Jan-Michael Mewes, Sebastian Ehlert", &
-      "and Stefan Grimme, Phys. Chem. Chem. Phys., 2020, 22, 8499-8512.", &
+      "Eike Caldeweyher, Jan-Michael Mewes, Sebastian Ehlert and Stefan Grimme,", &
+      "Phys. Chem. Chem. Phys., 2020, 22, 8499-8512.", &
       "DOI: 10.1039/D0CP00502A", &
       "ChemRxiv: 10.26434/chemrxiv.10299428.v1", &
-      ""
+      "", &
+      "DFTD4 for range-separated hybrids:", &
+      "Marvin Friede, Sebastian Ehlert, Stefan Grimme, Jan-Michael Mewes,", &
+      "J. Chem. Theory Comput., 2023, 19 (22), 8097-8107.", &
+      "DOI: 10.1021/acs.jctc.3c00717", &
+      "", &
+      "Extension to Fr, Ra, and full Actinide series:", &
+      "Lukas Wittmann, Igor Gordiy, Marvin Friede, Benjamin Helmich-Paris, ", &
+      "Stefan Grimme, Andreas Hansen and Markus Bursch,", &
+      "Phys. Chem. Chem. Phys., 2024, 26, 21379-21394.", &
+      "DOI: 10.1039/D4CP01514B", &   
+      "", &
+      "Smooth D4S model:", &
+      "Nikolay V. Tkachenko, Linus B. Dittmer, Rebecca Tomann and Martin Head-Gordon, ", &
+      "J. Phys. Chem. Lett., 2024, 15, 42, 10629-10637.", &
+      "DOI: 10.1021/acs.jpclett.4c02653", &
+      "ChemRxiv: 10.26434/chemrxiv-2024-31x2z"
 
 end subroutine citation
 
@@ -176,6 +194,7 @@ subroutine license(unit)
       "", &
       "You should have received a copy of the Lesser GNU General Public License", &
       "along with dftd4.  If not, see <https://www.gnu.org/licenses/>."
+
 end subroutine license
 
 
diff --git a/app/meson.build b/app/meson.build
index 77505e5..d5f7fce 100644
--- a/app/meson.build
+++ b/app/meson.build
@@ -50,6 +50,18 @@ test(
     '--func', 'tpssh'
   ],
 )
+test(
+  'app-energy-d4s',
+  app_tester,
+  args: [
+    dftd4_exe,
+    files('01-energy-d4s.json'),
+    files('01-ammonia.tmol'),
+    '--noedisp',
+    '--func', 'tpssh',
+    '--model', 'D4S'
+  ],
+)
 test(
   'app-gradient',
   app_tester,
@@ -63,6 +75,20 @@ test(
     files('02-nitralin.mol'),
   ],
 )
+test(
+  'app-gradient-d4s',
+  app_tester,
+  args: [
+    dftd4_exe,
+    files('02-gradient-d4s.json'),
+    '--noedisp',
+    '--func', 'scan',
+    '--model', 'D4S',
+    '--grad',
+    '--',
+    files('02-nitralin.mol'),
+  ],
+)
 test(
   'app-properties',
   app_tester,
diff --git a/assets/ci/build-env.yaml b/assets/ci/build-env.yaml
index d822884..a462fb9 100644
--- a/assets/ci/build-env.yaml
+++ b/assets/ci/build-env.yaml
@@ -2,8 +2,8 @@ name: devel
 channels:
   - conda-forge
 dependencies:
-  - meson 0.58.0
-  - fpm 0.3.0
+  - meson
+  - fpm
   - cmake
   - ninja
   - gcovr
diff --git a/assets/parameters.toml b/assets/parameters.toml
index 5a22cb6..c4f2da4 100644
--- a/assets/parameters.toml
+++ b/assets/parameters.toml
@@ -402,11 +402,15 @@ reference.doi = ["10.1063/1.2834918"]
 d4.bj-eeq-atm = { s8=6.55792598, a1=0.76666802, a2=8.36027334, doi="10.1063/1.5090222" }
 d4.bj-eeq-mbd = { s8=7.11022468, a1=0.76423345, a2=8.44559334, doi="10.1063/1.5090222" }
 
-[parameter.wb97x]
+[parameter.wb97x-2008]
 reference.doi = ["10.1063/1.2834918"]
 d4.bj-eeq-atm = { s8=-0.07519516, a1=0.45094893, a2=6.78425255, doi="10.1063/1.5090222" }
 d4.bj-eeq-mbd = { s8=0.38815338, a1=0.47448629, a2=6.91367384, doi="10.1063/1.5090222" }
 
+[parameter.wb97x]
+reference.doi = ["10.1063/1.4952647"]
+d4.bj-eeq-atm = { s8=0.5093, a1=0.0662, a2=5.4487, doi="10.1002/jcc.26411" }
+
 [parameter.wb97x-rev]
 reference.doi = ["10.1063/1.4952647"]
 d4.bj-eeq-atm = { s8=0.4485, a1=0.3306, a2=4.279, doi="10.1063/5.0133026" }
diff --git a/config/cmake/Finddftd4-blas.cmake b/config/cmake/Finddftd4-blas.cmake
new file mode 100644
index 0000000..58ae006
--- /dev/null
+++ b/config/cmake/Finddftd4-blas.cmake
@@ -0,0 +1,53 @@
+# This file is part of dftd4.
+# SPDX-Identifier: LGPL-3.0-or-later
+#
+# dftd4 is free software: you can redistribute it and/or modify it under
+# the terms of the GNU Lesser General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# dftd4 is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public License
+# along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
+
+if(NOT BLAS_FOUND)
+  if("${BLA_VENDOR}" MATCHES "^Intel" OR DEFINED ENV{MKLROOT})
+    # C must be enabled to use MKL
+    # https://cmake.org/cmake/help/v3.14/module/FindBLAS.html#result-variables
+    enable_language("C")
+  endif()
+
+  if(BLA_VENDOR STREQUAL "NVPL")
+    find_package("nvpl_blas" REQUIRED)
+    if(BLA_SIZEOF_INTEGER EQUAL 8)
+      set(_nvpl_int "_ilp64")
+    else()
+      set(_nvpl_int "_lp64")
+    endif()
+
+    if((BLA_THREAD STREQUAL "OMP") OR (BLA_THREAD STREQUAL "ANY"))
+      set(_nvpl_thread "_omp")
+    else()
+      set(_nvpl_thread "_seq")
+    endif()
+
+    if(NOT TARGET "DFTD4::BLAS")
+      add_library("DFTD4::BLAS" INTERFACE IMPORTED)
+      target_link_libraries("DFTD4::BLAS" INTERFACE "nvpl::blas${_nvpl_int}${_nvpl_thread}")
+    endif()
+  else()
+    find_package("BLAS" REQUIRED)
+    if(NOT TARGET "DFTD4::BLAS")
+      add_library("DFTD4::BLAS" INTERFACE IMPORTED)
+      if(TARGET "BLAS::BLAS")
+        target_link_libraries("DFTD4::BLAS" INTERFACE "BLAS::BLAS")
+      else()
+        target_link_libraries("DFTD4::BLAS" INTERFACE "${BLAS_LIBRARIES}")
+      endif()
+    endif()
+  endif()
+ endif()
diff --git a/config/meson.build b/config/meson.build
index 1ba25ee..d4ea3cd 100644
--- a/config/meson.build
+++ b/config/meson.build
@@ -88,19 +88,19 @@ if lapack_vendor == 'mkl'
   lib_deps += mkl_dep
 
 elif lapack_vendor == 'mkl-rt'
-  mkl_dep = fc.find_library('mkl_rt')
+  mkl_dep = cc.find_library('mkl_rt')
   lib_deps += mkl_dep
 
 elif lapack_vendor == 'openblas'
   openblas_dep = dependency( ilp64 ? 'openblas64' : 'openblas', required: false)
   if not openblas_dep.found()
-    openblas_dep = fc.find_library( ilp64 ? 'openblas64' : 'openblas')
+    openblas_dep = cc.find_library( ilp64 ? 'openblas64' : 'openblas')
   endif
   lib_deps += openblas_dep
   if not fc.links('external dsytrs; call dsytrs(); end', dependencies: openblas_dep)
     lapack_dep = dependency(ilp64 ? 'lapack64' : 'lapack', required: false)
     if not lapack_dep.found()
-      lapack_dep = fc.find_library(ilp64 ? 'lapack64' : 'lapack')
+      lapack_dep = cc.find_library(ilp64 ? 'lapack64' : 'lapack')
     endif
     lib_deps += lapack_dep
   endif
@@ -111,17 +111,17 @@ elif lapack_vendor == 'custom'
   if libs[0].startswith('-L')
     foreach lib: libs
       if lib != libs[0]
-        custom_deps += fc.find_library(lib, dirs: libs[0].substring(2))
+        custom_deps += cc.find_library(lib, dirs: libs[0].substring(2))
       endif
     endforeach
   else
     foreach lib: libs
-      custom_deps += fc.find_library(lib)
+      custom_deps += cc.find_library(lib)
     endforeach
   endif
-  if (not fc.links('external dsytrs; call dsytrs(); end', dependencies: [custom_deps,omp_dep]))
+  if (not fc.links('external dsytrs; call dsytrs(); end', dependencies: (get_option('openmp') ? [custom_deps, omp_dep] : [custom_deps])))
     error('Custom LAPACK libraries do not link')
-  elif (not fc.links('external dsytrs; call dgemm(); end', dependencies: [custom_deps,omp_dep]))
+  elif (not fc.links('external dsytrs; call dgemm(); end', dependencies: (get_option('openmp') ? [custom_deps, omp_dep] : [custom_deps])))
     error('Custom BLAS libraries do not link')
   endif
   lib_deps += custom_deps
@@ -129,12 +129,12 @@ elif lapack_vendor == 'custom'
 else
   lapack_dep = dependency(ilp64 ? 'lapack64' : 'lapack', required: false)
   if not lapack_dep.found()
-    lapack_dep = fc.find_library(ilp64 ? 'lapack64' : 'lapack')
+    lapack_dep = cc.find_library(ilp64 ? 'lapack64' : 'lapack')
   endif
   lib_deps += lapack_dep
-  blas_dep = fc.find_library(ilp64 ? 'blas64' : 'blas', required: false)
+  blas_dep = cc.find_library(ilp64 ? 'blas64' : 'blas', required: false)
   if not blas_dep.found()
-    blas_dep = fc.find_library(ilp64 ? 'blas64' : 'blas')
+    blas_dep = cc.find_library(ilp64 ? 'blas64' : 'blas')
   endif
   lib_deps += blas_dep
 endif
@@ -151,6 +151,7 @@ lib_deps += mctc_dep
 # Create the electrostatic library as subproject
 multicharge_dep = dependency(
   'multicharge',
+  version: '>=0.3.0',
   fallback: ['multicharge', 'multicharge_dep'],
   default_options: ['default_library=static'],
 )
diff --git a/config/template.cmake b/config/template.cmake
index 8b5141d..c3b5754 100644
--- a/config/template.cmake
+++ b/config/template.cmake
@@ -19,8 +19,8 @@ if(NOT TARGET "@PROJECT_NAME@::@PROJECT_NAME@")
     find_dependency("OpenMP")
   endif()
 
-  if(NOT TARGET "BLAS::BLAS")
-    find_dependency("BLAS")
+  if(NOT TARGET "DFTD4::BLAS")
+    find_dependency("dftd4-blas")
   endif()
 
   if(NOT TARGET "mctc-lib::mctc-lib")
diff --git a/doc/_static/references.bib b/doc/_static/references.bib
index 4d4dea2..381d7ca 100644
--- a/doc/_static/references.bib
+++ b/doc/_static/references.bib
@@ -33,3 +33,15 @@
   doi={10.1063/1.4993215},
   publisher={AIP Publishing LLC}
 }
+
+@article{tkachenko2024,
+  title={Smooth Dispersion Is Physically Appropriate: Assessing and Amending the D4 Dispersion Model},
+  author={Tkachenko, Nikolay V. and Dittmer, Linus Bjarne and Tomann, Rebecca and Head-Gordon, Martin},
+  journal={J{.} Phys{.} Chem{.} Lett{.}},
+  volume={15},
+  number={42},
+  pages={10629-10637},
+  year={2024},
+  doi={10.1021/acs.jpclett.4c02653},
+  publisher={ACS Publications}
+}
diff --git a/doc/index.rst b/doc/index.rst
index 98701b7..60019d7 100644
--- a/doc/index.rst
+++ b/doc/index.rst
@@ -47,6 +47,23 @@ References
   DOI: `10.1039/D0CP00502A <https://dx.doi.org/10.1039/D0CP00502A>`__
   chemrxiv: `10.26434/chemrxiv.10299428 <https://dx.doi.org/10.26434/chemrxiv.10299428>`__
 
+- Marvin Friede, Sebastian Ehlert, Stefan Grimme and Jan-Michael Mewes,
+  *J. Chem. Theory Comput.*, **2023**, 19 (22), 8097-8107.
+  DOI: `10.1021/acs.jctc.3c00717 <10.1021/acs.jctc.3c00717>`__
+
+- Lukas Wittmann, Igor Gordiy, Marvin Friede, Benjamin Helmich-Paris, Stefan Grimme, Andreas Hansen and Markus Bursch, 
+  *Phys. Chem. Chem. Phys.*, **2024**, 26, 21379-21394.
+  DOI: `10.1039/D4CP01514B <10.1039/D4CP01514B>`__
+
+- Nikolay V. Tkachenko, Linus B. Dittmer, Rebecca Tomann and Martin Head-Gordon,
+  *J. Phys. Chem. Lett.*, **2024**, 15, 42, 10629–10637.
+  DOI: `10.1021/acs.jpclett.4c02653 <https://dx.doi.org/10.1021/acs.jpclett.4c02653>`__
+  chemrxiv: `10.26434/chemrxiv-2024-31x2z <https://dx.doi.org/10.26434/chemrxiv-2024-31x2z>`__
+
+
+Citations can also be viewed via `dftd4 --citation` or in the `BibTeX file <https://github.com/dftd4/dftd4/CITATION.bib>`__.
+
+
 .. toctree::
 
    Recipes <recipe/index>
diff --git a/doc/recipe/vasp.rst b/doc/recipe/vasp.rst
index 3ca492e..7f66c4b 100644
--- a/doc/recipe/vasp.rst
+++ b/doc/recipe/vasp.rst
@@ -49,3 +49,14 @@ To enable support for D4 in Vasp add the following lines to the Makefile:
    CPP_OPTIONS += -DDFTD4
    LLIBS       += $(shell pkg-config --libs dftd4)
    INCS        += $(shell pkg-config --cflags dftd4)
+
+Depending on how you built DFT-D4, DFT-D4's dependencies not might be properly recognized during the VASP build. Try to explicitly add them to the link line.
+
+.. code-block:: make
+
+   CPP_OPTIONS += -DDFTD4
+   LLIBS       += $(shell pkg-config --libs dftd4) -lmulticharge -lmctc-lib -lmstore
+   INCS        += $(shell pkg-config --cflags dftd4)
+```
+
+If you still run into issues, check out `VASP-related issues <https://github.com/dftd4/dftd4/issues?q=label%3Avasp%20>`_ on the ``dftd4`` issue tracker.
diff --git a/doc/reference/c.rst b/doc/reference/c.rst
index 1bce046..9618495 100644
--- a/doc/reference/c.rst
+++ b/doc/reference/c.rst
@@ -3,7 +3,7 @@ C API
 
 The C API bindings are provided by using the ``iso_c_binding`` intrinsic module.
 Generally, objects are exported as opaque pointers and can only be manipulated within the library.
-The API user is required delete all objects created in the library by using the provided deconstructor functions to avoid mamory leaks.
+The API user is required to delete all objects created in the library by using the provided deconstructor functions to avoid mamory leaks.
 
 Overall four classes of objects are provided by the library
 
@@ -130,6 +130,24 @@ Recreating a structure object requires to recreate the dispersion model as well.
 
    Create new D4 dispersion model with custom parameters
 
+.. c:function:: dftd4_model dftd4_new_d4s_model(dftd4_error error, dftd4_structure mol);
+
+   :param error: Error handle
+   :param mol: Molecular structure data handle
+   :returns: New dispersion model handle
+
+   Create new D4S dispersion model
+
+.. c:function:: dftd4_model dftd4_custom_d4s_model(dftd4_error error, dftd4_structure mol, double ga, double gc);
+
+   :param error: Error handle
+   :param mol: Molecular structure data handle
+   :param ga: Charge scaling height
+   :param gc: Charge scaling steepness
+   :returns: New dispersion model handle
+
+   Create new D4S dispersion model with custom parameters   
+
 .. c:function:: void dftd4_delete_model(dftd4_model* disp);
 
    :param disp: Dispersion model handle
diff --git a/doc/reference/fortran.rst b/doc/reference/fortran.rst
index f60426d..a4bb098 100644
--- a/doc/reference/fortran.rst
+++ b/doc/reference/fortran.rst
@@ -77,7 +77,7 @@ The ``read_structure`` routine can also use an already opened unit, but in this
    end subroutine example
 
 
-The structure type as well as the error type are using only allocatable members and can therefore be used without requiring explicit deconstruction.
+The structure type as well as the error type contain only allocatable members and can therefore be used without requiring explicit deconstruction.
 
 Certain members of the structure type should be considered immutable, like the number of atoms (``nat``), the identifiers for unique atoms (``id``) and the boundary conditions (``periodic``).
 To change those specific structure parameters the structure type and all dependent objects should be reconstructed to ensure a consistent setup.
diff --git a/fpm.toml b/fpm.toml
index 4ef4464..531702e 100644
--- a/fpm.toml
+++ b/fpm.toml
@@ -13,11 +13,13 @@ auto-tests = false
 
 [dependencies]
 mctc-lib.git = "https://github.com/grimme-lab/mctc-lib.git"
-mctc-lib.tag = "v0.3.0"
+mctc-lib.tag = "v0.3.2"
 multicharge.git = "https://github.com/grimme-lab/multicharge.git"
+multicharge.tag = "v0.3.0"
 
 [dev-dependencies]
 mstore.git = "https://github.com/grimme-lab/mstore.git"
+mstore.tag = "v0.3.0"
 
 [[test]]
 name = "tester"
diff --git a/include/dftd4.h b/include/dftd4.h
index b4eb98e..22ed0b2 100644
--- a/include/dftd4.h
+++ b/include/dftd4.h
@@ -31,6 +31,7 @@
 #define DFTD4_API_SUFFIX__V_3_3
 #define DFTD4_API_SUFFIX__V_3_4
 #define DFTD4_API_SUFFIX__V_3_5
+#define DFTD4_API_SUFFIX__V_4_0
 
 /// Error handle class
 typedef struct _dftd4_error* dftd4_error;
@@ -119,6 +120,11 @@ DFTD4_API_ENTRY dftd4_model DFTD4_API_CALL
 dftd4_new_d4_model(dftd4_error /* error */,
                    dftd4_structure /* mol */) DFTD4_API_SUFFIX__V_3_0;
 
+/// Create new D4 dispersion model
+DFTD4_API_ENTRY dftd4_model DFTD4_API_CALL
+dftd4_new_d4s_model(dftd4_error /* error */,
+                    dftd4_structure /* mol */) DFTD4_API_SUFFIX__V_4_0;
+
 /// Create new D4 dispersion model
 DFTD4_API_ENTRY dftd4_model DFTD4_API_CALL
 dftd4_custom_d4_model(dftd4_error /* error */,
@@ -127,6 +133,14 @@ dftd4_custom_d4_model(dftd4_error /* error */,
                       double /* gc */,
                       double /* wf */) DFTD4_API_SUFFIX__V_3_1;
 
+/// Create new D4 dispersion model
+DFTD4_API_ENTRY dftd4_model DFTD4_API_CALL
+dftd4_custom_d4s_model(dftd4_error /* error */,
+                      dftd4_structure /* mol */,
+                      double /* ga */,
+                      double /* gc */) DFTD4_API_SUFFIX__V_4_0;
+
+
 /// Delete dispersion model
 DFTD4_API_ENTRY void DFTD4_API_CALL
 dftd4_delete_model(dftd4_model* /* disp */) DFTD4_API_SUFFIX__V_3_0;
diff --git a/man/dftd4.1.adoc b/man/dftd4.1.adoc
index 4bf6137..6183446 100644
--- a/man/dftd4.1.adoc
+++ b/man/dftd4.1.adoc
@@ -10,7 +10,7 @@ dftd4 - Generally Applicable Atomic-Charge Dependent London Dispersion Correctio
 
 == Description
 
-Takes an geometry input to calculate the D4 dispersion correction.
+Takes an geometry input to calculate the D4(S) dispersion correction.
 Periodic calculations are performed automatically for periodic input formats.
 Reads .CHRG file (if present) from the same directory as the input.
 Specify the functional to select the correct parameters.
@@ -47,9 +47,12 @@ Specify the functional to select the correct parameters.
      (default: 3.0 and 2.0)
 
 *--wfactor* _real_::
-     Adjust weighting factor for the Gaussian interpolation
+     Adjust weighting factor for the Gaussian interpolation (only D4)
      (default: 6.0)
 
+*-m, --model* _string_::
+     use either standard D4 (default) or the smoothed D4S model
+
 *-g, --grad* [_file_]::
      prints analytical gradient to file,
      write results to file (default: dftd4.txt),
diff --git a/meson.build b/meson.build
index 9b007f9..55d4c2c 100644
--- a/meson.build
+++ b/meson.build
@@ -92,7 +92,9 @@ if install
   pkg = import('pkgconfig')
   pkg.generate(
     dftd4_lib,
+    name: 'dftd4',
     description: 'Generally Applicable Atomic-Charge Dependent London Dispersion Correction',
+    version: meson.project_version(),
     subdirs: ['', module_id],
   )
 
diff --git a/python/dftd4/ase.py b/python/dftd4/ase.py
index 522f282..7656946 100644
--- a/python/dftd4/ase.py
+++ b/python/dftd4/ase.py
@@ -38,8 +38,9 @@ Supported keywords are
  Keyword                  Default      Description
 ======================== ============ ============================================
  method                   None         Method to calculate dispersion for
- params_tweaks            None        Optional dict with the damping parameters
+ params_tweaks            None         Optional dict with the damping parameters
  cache_api                True         Reuse generate API objects (recommended)
+ model                    d4           Used dispersion Model (D4S or D4 (default))
 ======================== ============ ============================================
 
 The params_tweaks dict contains the damping parameters, at least s8, a1 and a2
@@ -125,6 +126,7 @@ class DFTD4(Calculator):
         "method": None,
         "params_tweaks": {},
         "cache_api": True,
+        "model" : "d4"
     }
 
     _disp = None
@@ -215,6 +217,7 @@ class DFTD4(Calculator):
                 _charge,
                 _cell / Bohr,
                 _periodic,
+                model=self.parameters.get("model"),
             )
 
         except RuntimeError:
diff --git a/python/dftd4/interface.py b/python/dftd4/interface.py
index 4589048..00ba10b 100644
--- a/python/dftd4/interface.py
+++ b/python/dftd4/interface.py
@@ -276,21 +276,35 @@ class DispersionModel(Structure):
         charge: Optional[float] = None,
         lattice: Optional[np.ndarray] = None,
         periodic: Optional[np.ndarray] = None,
+        model: str = "d4",
         **kwargs,
     ):
         """Create new dispersion model"""
 
         Structure.__init__(self, numbers, positions, charge, lattice, periodic)
-
-        if "ga" in kwargs or "gc" in kwargs or "wf" in kwargs:
-            self._disp = library.custom_d4_model(
-                self._mol,
-                kwargs.get("ga", 3.0),
-                kwargs.get("gc", 2.0),
-                kwargs.get("wf", 6.0),
-            )
-        else:
-            self._disp = library.new_d4_model(self._mol)
+        
+
+        if model.lower().replace(" ", "") == "d4": 
+            if "ga" in kwargs or "gc" in kwargs or "wf" in kwargs:
+                self._disp = library.custom_d4_model(
+                    self._mol,
+                    kwargs.get("ga", 3.0),
+                    kwargs.get("gc", 2.0),
+                    kwargs.get("wf", 6.0),
+                )
+            else:
+                self._disp = library.new_d4_model(self._mol)
+        elif model.lower().replace(" ", "") == "d4s": 
+            if "ga" in kwargs or "gc" in kwargs:
+                self._disp = library.custom_d4s_model(
+                    self._mol,
+                    kwargs.get("ga", 3.0),
+                    kwargs.get("gc", 2.0),
+                )
+            else: 
+                self._disp = library.new_d4s_model(self._mol)
+        else: 
+            raise ValueError(f"Unknown dispersion model '{model}'.")
 
     def get_dispersion(self, param: DampingParam, grad: bool) -> dict:
         """
diff --git a/python/dftd4/library.py b/python/dftd4/library.py
index 236347c..95f3f46 100644
--- a/python/dftd4/library.py
+++ b/python/dftd4/library.py
@@ -111,17 +111,29 @@ def _delete_model(error) -> None:
 
 
 def new_d4_model(mol):
-    """Create new dftd4 dispersion model object"""
+    """Create new dftd4 D4 dispersion model object"""
     return ffi.gc(error_check(lib.dftd4_new_d4_model)(mol), _delete_model)
 
 
+def new_d4s_model(mol):
+    """Create new dftd4 D4S dispersion model object"""
+    return ffi.gc(error_check(lib.dftd4_new_d4s_model)(mol), _delete_model)
+
+
 def custom_d4_model(mol, ga, gc, wf):
-    """Create new dftd4 dispersion model object"""
+    """Create new dftd4 D4 dispersion model object"""
     return ffi.gc(
         error_check(lib.dftd4_custom_d4_model)(mol, ga, gc, wf), _delete_model
     )
 
 
+def custom_d4s_model(mol, ga, gc):
+    """Create new dftd4 D4S dispersion model object"""
+    return ffi.gc(
+        error_check(lib.dftd4_custom_d4s_model)(mol, ga, gc), _delete_model
+    )
+
+
 def _delete_param(error) -> None:
     """Delete a dftd4 damping parameter object"""
     ptr = ffi.new("dftd4_param *")
diff --git a/python/dftd4/meson.build b/python/dftd4/meson.build
index dcd4f75..0233ec4 100644
--- a/python/dftd4/meson.build
+++ b/python/dftd4/meson.build
@@ -21,6 +21,7 @@ python = pymod.find_installation(
   get_option('python_version'),
   modules: [
     'cffi',
+    'setuptools',
   ],
 )
 python_dep = python.dependency(required: true)
diff --git a/python/dftd4/parameters.py b/python/dftd4/parameters.py
index 2167623..98ea149 100644
--- a/python/dftd4/parameters.py
+++ b/python/dftd4/parameters.py
@@ -53,7 +53,12 @@ def get_data_file_name(base_name: str = "parameters.toml") -> str:
         dirname(__file__), "..", "..", "..", "..", "share", "dftd4", base_name
     )
     if not exists(data_file):
-        data_file = join(dirname(__file__), base_name)
+        # for Windows install layout
+        data_file = join(
+            dirname(__file__), "..", "..", "..", "Library", "share", "s-dftd3", base_name
+        )
+        if not exists(data_file):
+            data_file = join(dirname(__file__), base_name)
 
     return data_file
 
diff --git a/python/dftd4/pyscf.py b/python/dftd4/pyscf.py
index dd90b1d..b7d1b20 100644
--- a/python/dftd4/pyscf.py
+++ b/python/dftd4/pyscf.py
@@ -70,11 +70,12 @@ class DFTD4Dispersion(lib.StreamObject):
     array(-0.0050011)
     """
 
-    def __init__(self, mol, xc: str = "hf", atm: bool = True):
+    def __init__(self, mol, xc: str = "hf", atm: bool = True, model: str = "d4"):
         self.mol = mol
         self.verbose = mol.verbose
         self.xc = xc
         self.atm = atm
+        self.model = model
         self.edisp = None
         self.grads = None
 
@@ -112,6 +113,7 @@ class DFTD4Dispersion(lib.StreamObject):
             mol.charge,
             lattice=lattice,
             periodic=periodic,
+            model=self.model,
         )
 
         param = DampingParam(
@@ -149,7 +151,7 @@ class _DFTD4Grad:
     pass
 
 
-def energy(mf):
+def energy(mf, model: str = "d4"):
     """
     Apply DFT-D4 corrections to SCF or MCSCF methods by returning an
     instance of a new class built from the original instances class.
@@ -158,6 +160,8 @@ def energy(mf):
     ----------
     mf
         The method to which DFT-D4 corrections will be applied.
+    model 
+        The DFT-D4 model to use (D4S or D4 (default)).
 
     Returns
     -------
@@ -196,6 +200,7 @@ def energy(mf):
         xc="hf"
         if isinstance(mf, casci.CASCI)
         else getattr(mf, "xc", "HF").upper().replace(" ", ""),
+        model=model,
     )
 
     if isinstance(mf, _DFTD4):
diff --git a/python/dftd4/qcschema.py b/python/dftd4/qcschema.py
index bfdb2d3..1bf7ee3 100644
--- a/python/dftd4/qcschema.py
+++ b/python/dftd4/qcschema.py
@@ -28,7 +28,7 @@ Supported keywords are
 ======================== =========== ============================================
  Keyword                  Default     Description
 ======================== =========== ============================================
- level_hint               None        Dispersion correction level (allowed: "d4")
+ level_hint               None        Dispersion correction level ("d4" or "d4s")
  params_tweaks            None        Optional dict with the damping parameters
  pair_resolved            False       Enable pairwise resolved dispersion energy
  property                 False       Evaluate dispersion related properties
@@ -104,6 +104,7 @@ _supported_drivers = [
 
 _available_levels = [
     "d4",
+    "d4s",
 ]
 
 _clean_dashlevel = str.maketrans("", "", "()")
@@ -157,14 +158,23 @@ def run_qcschema(
 
     # Obtain the parameters for the damping function
     _input_param = atomic_input.keywords.get("params_tweaks", {"method": _method})
-    _model_param = {
-        key: _input_param.pop(key, default)
-        for key, default in (
-            ("ga", 3.0),
-            ("gc", 2.0),
-            ("wf", 6.0),
-        )
-    }
+    if(_level.lower() == "d4s"):
+        _model_param = {
+            key: _input_param.pop(key, default)
+            for key, default in (
+                ("ga", 3.0),
+                ("gc", 2.0),
+            )
+        }
+    else: 
+        _model_param = {
+            key: _input_param.pop(key, default)
+            for key, default in (
+                ("ga", 3.0),
+                ("gc", 2.0),
+                ("wf", 6.0),
+            )
+        }
 
     try:
         param = DampingParam(**_input_param)
@@ -173,6 +183,7 @@ def run_qcschema(
             atomic_input.molecule.atomic_numbers[atomic_input.molecule.real],
             atomic_input.molecule.geometry[atomic_input.molecule.real],
             atomic_input.molecule.molecular_charge,
+            model = _level,
             **_model_param,
         )
 
diff --git a/python/dftd4/references.json b/python/dftd4/references.json
index 2271069..eca9dfa 100644
--- a/python/dftd4/references.json
+++ b/python/dftd4/references.json
@@ -3143,6 +3143,1242 @@
  "unique_id": "4306514137be72fa1cfa63b1b394032d",
  "user": "f3rmion"},
 "263": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8467185,
+ "data": {"dynamic_polarizibilities": [64.12171618259735, 34.6097144025397, 15.858471431708109, 6.532767448102847, 4.164479393908372, 3.102175800043507, 2.463477467119823, 2.0199932271728738, 1.6891812323771427, 1.4326068141919954, 1.2287402159290377, 1.0639632626301618, 0.8171794083131556, 0.6447294506690048, 0.5200957356307525, 0.4274625089733847, 0.35695622339049576, 0.24054231428179976, 0.17235511942899115, 0.10036254119289414, 0.06538502196425794, 0.029629533001888708, 0.016790809624626205]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Fr", "primary_reference": 87, "internal_reference": 1},
+ "mtime": 1736682709.8467185,
+ "numbers": [87],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "b92db20361dc49f1a35ca9abd49acdba",
+ "user": "f3rmion"},
+"264": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8471503,
+ "data": {"dynamic_polarizibilities": [10.637627687159258, 9.715475711288173, 8.030431796047377, 5.531096592514466, 4.131185252998823, 3.2485348755889207, 2.6317960350160736, 2.1747440029128207, 1.824127121466915, 1.5489377398624267, 1.3292242685851055, 1.151331486499047, 0.8848079468047884, 0.6986316393633634, 0.5640991856178035, 0.4640819148019756, 0.38790904586328656, 0.2619520413541323, 0.18799749754191622, 0.10969373245635466, 0.07154357856119964, 0.032458379138453126, 0.018401577435231506]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HFr", "primary_reference": 87, "internal_reference": 2},
+ "mtime": 1736682709.8471503,
+ "numbers": [87, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.11145105073995, -0.19303865735006, 0.80636303128035], [1.02643105073995, 1.77782865735006, -0.34389303128035]],
+ "unique_id": "db25121493af434b823b7dac951cb58a",
+ "user": "f3rmion"},
+"265": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8472502,
+ "data": {"dynamic_polarizibilities": [39.149613834852495, 30.928048952774482, 19.425047743682647, 8.670342279908573, 5.115682982407715, 3.5650159269657333, 2.7173919697391593, 2.1784263929858234, 1.8007835839135893, 1.5193096887076498, 1.300901724735888, 1.1267150422766226, 0.868006764250379, 0.6875978057683614, 0.5568603624763068, 0.45928517570084465, 0.3846964013247472, 0.26074285411084436, 0.1875633163381376, 0.10971744201014463, 0.07164582601191884, 0.03254728996516547, 0.01846381501393015]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Ra", "primary_reference": 88, "internal_reference": 1},
+ "mtime": 1736682709.8472502,
+ "numbers": [88],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "1cd4753534d541e99fc50947e3f9d514",
+ "user": "f3rmion"},
+"266": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8473656,
+ "data": {"dynamic_polarizibilities": [39.289643941383105, 25.18413688728846, 14.540660349578646, 7.395221731225041, 4.885257238358669, 3.612233503338436, 2.834668313866965, 2.3050294828357543, 1.9189327359902877, 1.6247668202711614, 1.3937631558484842, 1.2083425904341139, 0.9317750910155843, 0.7385022177554024, 0.5983580089971815, 0.4937366392047661, 0.41374060471744634, 0.2807196350259963, 0.20210023650560588, 0.11835068328391325, 0.07733019153306138, 0.035152377187837154, 0.019945662125802552]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HRa", "primary_reference": 88, "internal_reference": 2},
+ "mtime": 1736682709.8473656,
+ "numbers": [88, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.52403344125407, 1.73977697349566, 0.48406724816431], [1.43630613673155, 2.00143188599689, -0.78192899504058]],
+ "unique_id": "097a9e2d24aa47238c3a960f8cf3cec7",
+ "user": "f3rmion"},
+"267": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8474786,
+ "data": {"dynamic_polarizibilities": [10.604197216315416, 10.054054066797224, 8.840910291720645, 6.452209793560129, 4.819257249842983, 3.741872897920593, 2.998329436290601, 2.4606115748054616, 2.056769708795323, 1.7444971032162275, 1.4974968992208881, 1.298566333687577, 1.001364113236224, 0.7936373032468388, 0.6430831185277145, 0.5307353978939964, 0.44484457559564805, 0.3020137780236027, 0.21755145634109943, 0.12749516181127787, 0.08334204526592773, 0.03790268542747234, 0.02150901082882794]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Ra", "primary_reference": 88, "internal_reference": 3},
+ "mtime": 1736682709.8474786,
+ "numbers": [88, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.42509945826361, 1.67331834886866, 0.44578788070315], [1.55671419268233, 1.89070620036346, -0.81892261844801], [-1.60430473441872, 3.71803545076788, 0.49932473774487]],
+ "unique_id": "157352ea305b4595b781e0efc3ee9222",
+ "user": "f3rmion"},
+"268": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8475676,
+ "data": {"dynamic_polarizibilities": [30.289227626540512, 24.7784945770374, 17.292812007020995, 8.739957975377227, 5.267705677614705, 3.6371077889583256, 2.736427777738272, 2.1726042156832768, 1.7864793137426846, 1.5048690886024532, 1.290205752282393, 1.1213314917191903, 0.8737667039742271, 0.7027422832516975, 0.5790465774352604, 0.48643706033168266, 0.4151542868621726, 0.2946060243113525, 0.22097007762818907, 0.13830820018661077, 0.09483525146561009, 0.04627512160955142, 0.02721560405664856]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Ac", "primary_reference": 89, "internal_reference": 1},
+ "mtime": 1736682709.8475676,
+ "numbers": [89],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "0b2d0d233c9f4b4199d4f615b80bbccc",
+ "user": "f3rmion"},
+"269": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8476734,
+ "data": {"dynamic_polarizibilities": [27.179095789353365, 22.491724414314135, 15.828032810183139, 8.498046434364056, 5.434063761781948, 3.888666154669785, 2.982404025379308, 2.3916167732766827, 1.9767677469195557, 1.6697275434924819, 1.4337004173605574, 1.2470988197980248, 0.9725362595218584, 0.7823900836677272, 0.6446924044912079, 0.5415173174799799, 0.46205919349426977, 0.3276260235052053, 0.24551094764790796, 0.15342600442193302, 0.10508815163265524, 0.05120522695075091, 0.030093351147904773]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HAc", "primary_reference": 89, "internal_reference": 2},
+ "mtime": 1736682709.8476734,
+ "numbers": [89, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.01841693473839, -0.03189902949141, 0.71231721070141], [0.93339693473839, 1.61668902949141, -0.24984721070141]],
+ "unique_id": "6eed97dc7bad453fac3b640a1e78bfa5",
+ "user": "f3rmion"},
+"270": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8477805,
+ "data": {"dynamic_polarizibilities": [23.91819638146298, 17.147093089427912, 12.117235728045621, 7.419281000933401, 5.1799699556620755, 3.8824305420230263, 3.050714213542402, 2.4785463704004536, 2.063639552005964, 1.7505860129989115, 1.5071185325182757, 1.3132529204133447, 1.0263110093645962, 0.8267121307838308, 0.6818156383378353, 0.5730717698801909, 0.48921996920777905, 0.3471434318156767, 0.26023013501013653, 0.1626682848586812, 0.11142897542435726, 0.05429932372034048, 0.03191157755417221]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Ac", "primary_reference": 89, "internal_reference": 3},
+ "mtime": 1736682709.8477805,
+ "numbers": [89, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.4051015040752, 1.72967877220421, 0.41561088148381], [1.41505078362094, 1.93863815003416, -0.74892555041126], [-1.48263927954574, 3.61374307776162, 0.45950466892744]],
+ "unique_id": "fb43059224b74e87adba55a82036b24e",
+ "user": "f3rmion"},
+"271": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8479543,
+ "data": {"dynamic_polarizibilities": [9.984059018467933, 9.649366066086207, 8.816015260241189, 6.7979647346319805, 5.16488919760455, 4.014400882112159, 3.208256789241117, 2.628166991439098, 2.197391072323567, 1.8681483536193086, 1.6102743555170491, 1.4041197853133602, 1.0981020563934785, 0.8848301745114664, 0.7298660127874098, 0.6134965590920701, 0.5237262610548398, 0.37154945374821524, 0.27842869939104153, 0.173924395520464, 0.11908123391006635, 0.05798912302890277, 0.03406766510194656]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Ac", "primary_reference": 89, "internal_reference": 4},
+ "mtime": 1736682709.8479543,
+ "numbers": [89, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.05742033657934, -0.08706340991147, 0.15538442811781], [-0.73148378320158, -1.05353768674128, -1.68296527443283], [-0.73720256650036, 1.98493473853917, 0.04226435459268], [2.12259668628127, -0.02244364188641, 0.04871649172234]],
+ "unique_id": "5181d993e5e043e697c922ccc3fdedca",
+ "user": "f3rmion"},
+"272": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8480837,
+ "data": {"dynamic_polarizibilities": [24.45040918092751, 13.625484909910256, 10.20133929678756, 7.3568448547217695, 5.5802790981575106, 4.345986401100287, 3.4746262168357407, 2.8441980726434166, 2.375083805049522, 2.016574605885784, 1.7360905845505754, 1.5121968225706623, 1.1805712937105133, 0.9500255200454047, 0.7828153737888347, 0.6574170256408562, 0.5607798480872094, 0.3971691084653772, 0.29721703892247175, 0.18527534439740662, 0.12667273666418866, 0.06156482010985088, 0.036131878128784815]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Ac", "primary_reference": 89, "internal_reference": 5},
+ "mtime": 1736682709.8480837,
+ "numbers": [89, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.13889595269999, -0.93043335034702, 0.21342368521735], [2.02026738530875, 0.2656450374015, 0.19864708411542], [1.21401412423882, -2.79765840772084, 0.78776931734718], [-1.12876946245453, -0.94723025976064, -1.62104183314866], [-1.54991799979303, -0.23736301957302, 1.49326174646871]],
+ "unique_id": "98f4a6d7a2e4439c97bebb225c73c854",
+ "user": "f3rmion"},
+"273": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8481903,
+ "data": {"dynamic_polarizibilities": [25.37635468540499, 19.95607506545768, 14.071504590265619, 8.715997989425361, 6.254119435339248, 4.766638340747507, 3.772032932188532, 3.0697426123059555, 2.5538538406258087, 2.162724740988424, 1.8583814993049574, 1.6164047570188653, 1.2594396425456982, 1.0121845608471165, 0.8332500402414119, 0.6992421603734549, 0.5960626278208913, 0.4215499389970139, 0.3150673692320867, 0.1959994719460272, 0.1338033849665187, 0.06488415764044507, 0.03803605166754086]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5Ac", "primary_reference": 89, "internal_reference": 6},
+ "mtime": 1736682709.8481903,
+ "numbers": [89, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.06751106820402, 0.11437008714701, -0.00077665593729], [0.24747538119247, 0.41966205368994, 2.26551487821828], [0.23477852797751, 0.39913794706487, -2.27070496425219], [-1.03101099879244, -1.75140351914477, 0.01113336947603], [2.19664866702163, -0.7391796263051, -0.0027955217144], [-1.7153926456032, 1.55741305754806, -0.00236110579043]],
+ "unique_id": "831380af4f734459971d8f3e701e8acf",
+ "user": "f3rmion"},
+"274": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.848302,
+ "data": {"dynamic_polarizibilities": [31.633040679942003, 24.930869951857012, 16.922827383822916, 9.757128951755792, 6.817228747086321, 5.145233977512675, 4.052441379321035, 3.288109084558585, 2.7295119972671635, 2.3074582302521134, 1.9799300086562917, 1.7200895994365772, 1.3377345165485885, 1.0735863777746613, 0.8827822618028588, 0.7400759393882107, 0.63031404196471, 0.4449201497983536, 0.33198858140255766, 0.20598415778582346, 0.14034722181254722, 0.0678567429468611, 0.039717948139516034]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H6Ac", "primary_reference": 89, "internal_reference": 7},
+ "mtime": 1736682709.848302,
+ "numbers": [89, 1, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[2.10691199e-06, -2.41146656e-06, -5.19966313e-06], [4.40859471e-06, -3.27743942e-06, 2.29025998077916], [-2.16599278e-06, 1.40485477e-06, -2.29026602213504], [8.7745359e-07, -2.29026468544632, -2.86564818e-06], [1.38920911e-06, 2.29026123057953, 3.73055431e-06], [-2.29026117272289, -1.38644068e-06, 2.53984508e-06], [2.29026455654627, -8.7464132e-07, -2.1637322e-06]],
+ "unique_id": "af413bbe04f04fe39db3a58376aab7a3",
+ "user": "f3rmion"},
+"275": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8483818,
+ "data": {"dynamic_polarizibilities": [22.421160336693884, 19.563705659787658, 14.869538533893383, 8.467631522392875, 5.461673537170355, 3.899049457382675, 2.977349444880711, 2.37964048491853, 1.9638415945626928, 1.6590256436505393, 1.4265312410333184, 1.2437854096558782, 0.9762556957726581, 0.7915152981826374, 0.6577637778650344, 0.5574353191557133, 0.48002214418438705, 0.34844152988567695, 0.2672422355435167, 0.17420446462460787, 0.12348380167943926, 0.06360087804156356, 0.038482087648214446]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Th", "primary_reference": 90, "internal_reference": 1},
+ "mtime": 1736682709.8483818,
+ "numbers": [90],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "482987bf75ca4105bbd022c77a256e22",
+ "user": "f3rmion"},
+"276": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8484783,
+ "data": {"dynamic_polarizibilities": [21.044497696516405, 18.03897685619189, 13.613324872510232, 8.096028722148633, 5.471249233207274, 4.025373959975574, 3.1290787343595503, 2.5266026722384756, 2.0971292967342796, 1.7771570135618955, 1.5305569082867612, 1.3354228350540676, 1.0481608450291546, 0.8490480123010836, 0.7046657208029078, 0.5963100962885739, 0.5127072459309566, 0.37072999229534975, 0.28331434931888483, 0.18359344792543145, 0.12958456623901796, 0.06633636781008002, 0.040018763103226135]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HTh", "primary_reference": 90, "internal_reference": 2},
+ "mtime": 1736682709.8484783,
+ "numbers": [90, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.00896068861043, 0.01552034984692, 0.68464186789171], [0.90601931138957, 1.56926965015308, -0.22217186789171]],
+ "unique_id": "2f08b767b6fc46d08ca96342c0ae782c",
+ "user": "f3rmion"},
+"277": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8485768,
+ "data": {"dynamic_polarizibilities": [17.383689244850796, 14.7043362904734, 11.392265738115839, 7.46251537226939, 5.398582414535276, 4.124644379847018, 3.272290366639347, 2.6714265541759894, 2.2303503157858326, 1.8957536834663795, 1.6350197204382064, 1.427304765225716, 1.1199341098926945, 0.9062221194184565, 0.7511245914543314, 0.6347358737465372, 0.5449818760275376, 0.3927502403777737, 0.29924716946573693, 0.19299576785026185, 0.135762386848414, 0.06916521394664443, 0.04163101276094331]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Th", "primary_reference": 90, "internal_reference": 3},
+ "mtime": 1736682709.8485768,
+ "numbers": [90, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.3767807876829, 1.80947463535521, 0.37288144684183], [1.35770988685336, 1.92370968289971, -0.70955557853781], [-1.45361909917047, 3.54887568174507, 0.46286413169598]],
+ "unique_id": "e233aafaface4ab8926cb6a7aed5059c",
+ "user": "f3rmion"},
+"278": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8486786,
+ "data": {"dynamic_polarizibilities": [13.976381860460306, 12.422294701884123, 10.261506735070915, 7.341390671192052, 5.540804172944341, 4.323829823083571, 3.4675192780872006, 2.8460325993679145, 2.3819877307437354, 2.0264763082873154, 1.747883123866856, 1.5252607867089294, 1.1952134250229245, 0.9656293701334212, 0.7991068009367598, 0.6742552543730623, 0.5780670764943128, 0.4151987422755287, 0.31542449438604797, 0.20248551675469273, 0.1419639170116, 0.07198220530631388, 0.043225480253318016]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Th", "primary_reference": 90, "internal_reference": 4},
+ "mtime": 1736682709.8486786,
+ "numbers": [90, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.03793586311254, 0.0479727143204, -0.08203841487546], [-0.75682827473388, -1.08929087471337, -1.59603729337265], [-0.76264303496708, 1.92855458347904, 0.11751318830304], [2.07802544658842, -0.06534642308606, 0.12396251994508]],
+ "unique_id": "8a069c61bcf74a5f800bbebda42d287d",
+ "user": "f3rmion"},
+"279": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8487809,
+ "data": {"dynamic_polarizibilities": [9.474706674398256, 9.253650649637578, 8.674307702779943, 7.101756729189829, 5.643872566963514, 4.507673703170909, 3.656386619883786, 3.0181343229407758, 2.5328501396621297, 2.157179669095797, 1.8610280782467616, 1.6235798607345515, 1.2707817003399695, 1.0251877692537967, 0.8471319839854325, 0.7137435162102381, 0.6110781846054942, 0.43753017825144586, 0.3314891989258567, 0.21189080037374686, 0.14811061883164675, 0.07477252341796961, 0.04480809296879774]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Th", "primary_reference": 90, "internal_reference": 5},
+ "mtime": 1736682709.8487809,
+ "numbers": [90, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.13891800630848, -0.92924694489184, 0.21438244045761], [1.70374867900325, 0.40992746135318, 0.12159023849085], [0.85707550068628, -2.78993465089041, 0.73645859611036], [-0.78148105331365, -1.03998918640063, -1.62714199439462], [-1.22377113268436, -0.2977966791703, 1.62677071933579]],
+ "unique_id": "81be66256e5f49e5bb0ab1a33e3c9858",
+ "user": "f3rmion"},
+"280": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8488746,
+ "data": {"dynamic_polarizibilities": [24.691687973223914, 20.93616133601453, 15.182519462391953, 8.07073359194897, 5.0648941544954, 3.601293026111482, 2.766138812331314, 2.2312290511231727, 1.8594484292255058, 1.5854800896412002, 1.3748177405231954, 1.2076535315270933, 0.9593700479328722, 0.7846380457364377, 0.6559988979547943, 0.5581510513107476, 0.4818003607186339, 0.3503249575648668, 0.26828397406316307, 0.1739229136733521, 0.12265544914390258, 0.06267768729086705, 0.037782655811410666]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Pa", "primary_reference": 91, "internal_reference": 1},
+ "mtime": 1736682709.8488746,
+ "numbers": [91],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "660cc63118964d509799018bf29b7268",
+ "user": "f3rmion"},
+"281": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8491175,
+ "data": {"dynamic_polarizibilities": [23.27627206737675, 19.255374767526142, 13.941528816389065, 7.807361941061664, 5.1533500541444, 3.7774046279690694, 2.9498819268150447, 2.399747668379526, 2.0078391171612964, 1.7145119269074895, 1.4868513095691966, 1.305245018620786, 1.0346552904515496, 0.8441282798896672, 0.7040640908754876, 0.5977385969044189, 0.5149433532227722, 0.37282236041731365, 0.28451612732661336, 0.18347934569781726, 0.1289251442742347, 0.06554506145234015, 0.03941416948158219]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HPa", "primary_reference": 91, "internal_reference": 2},
+ "mtime": 1736682709.8491175,
+ "numbers": [91, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.00388623608277, 0.00673115049685, 0.68977150283063], [0.91109376391723, 1.57805884950315, -0.22730150283063]],
+ "unique_id": "4a6b4255611747408d7c950565b86fcf",
+ "user": "f3rmion"},
+"282": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8492205,
+ "data": {"dynamic_polarizibilities": [18.576064932654482, 14.498941907838102, 10.717431081522033, 6.862579196098064, 4.982574583736665, 3.8471433167480087, 3.088167899294977, 2.548683676052486, 2.1481285469364804, 1.8406749081651943, 1.5984121693865105, 1.403436653794787, 1.1111319380481726, 0.9047610181661503, 0.7531117484313523, 0.6381589405749625, 0.5488005960348328, 0.3958547100771464, 0.30119431657073725, 0.19338697548779615, 0.13549269067405323, 0.06860803943258041, 0.04117904939182222]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Pa", "primary_reference": 91, "internal_reference": 3},
+ "mtime": 1736682709.8492205,
+ "numbers": [91, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.40531559715645, 1.72924285106636, 0.41588010909059], [1.30569971879435, 2.0021606737139, -0.70342183060038], [-1.3730741216379, 3.55065647521974, 0.41373172150979]],
+ "unique_id": "e1bf7ee0c71e4f1096fce7a5066cb3ef",
+ "user": "f3rmion"},
+"283": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8493185,
+ "data": {"dynamic_polarizibilities": [12.739235125865616, 11.34543196014511, 9.52311417400179, 6.953174882976608, 5.318356693745616, 4.195506308736756, 3.3939129683462745, 2.804554216859494, 2.359697786486951, 2.0158840651316514, 1.744553413406479, 1.5264818287291122, 1.20100300168901, 0.9729111668411622, 0.8064938087894438, 0.6811265794308147, 0.5841796958307864, 0.4193449504945478, 0.31806514593940455, 0.20346057215430474, 0.14226028643397448, 0.07186513938447596, 0.04308915031902575]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Pa", "primary_reference": 91, "internal_reference": 4},
+ "mtime": 1736682709.8493185,
+ "numbers": [91, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.01978271536685, 0.02159290621078, -0.03715101472914], [-0.72851179092289, -1.04738123637237, -1.58304637712321], [-0.7317508265461, 1.89493372275985, 0.08823273664017], [2.03696990210214, -0.04725539259827, 0.09536465521219]],
+ "unique_id": "c237712b51c440c29e4f22451eb7c7d3",
+ "user": "f3rmion"},
+"284": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.849417,
+ "data": {"dynamic_polarizibilities": [10.110272382527443, 9.72367328951105, 8.895753453331043, 7.058923938421159, 5.561434448435829, 4.4430310866096985, 3.614891937057135, 2.9944040232912505, 2.521124283465883, 2.1532142462244264, 1.8619809059396957, 1.6275971482548375, 1.2777122992821968, 1.0328222455741634, 0.8544849093545435, 0.7204029371309927, 0.6169077711436003, 0.4414007629076566, 0.33392535557777486, 0.2127799086408703, 0.14837735131178378, 0.07467323966147417, 0.04469102704695982]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Pa", "primary_reference": 91, "internal_reference": 5},
+ "mtime": 1736682709.849417,
+ "numbers": [91, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.1406979309994, -0.92929263814743, 0.21497947532565], [1.6743591153898, 0.38735776436512, 0.12220273622373], [0.84167658331174, -2.75696162604035, 0.72671700981852], [-0.76390040763293, -1.03782463267373, -1.59116764069195], [-1.19834322206802, -0.31031886750361, 1.59932841932405]],
+ "unique_id": "789e2bf3fb5a4f1a9b626794da638f04",
+ "user": "f3rmion"},
+"285": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.849521,
+ "data": {"dynamic_polarizibilities": [9.584473017363093, 9.302570868341821, 8.653717437160477, 7.12484242534569, 5.76097405313212, 4.674992024266645, 3.8373957264461116, 3.1935939120691392, 2.6946856264439387, 2.303077890189418, 1.9913017033928002, 1.7395758889576995, 1.363093366174061, 1.0995616757986728, 0.9078951248077605, 0.764043334575635, 0.6532115435373623, 0.46581567592286627, 0.3515148807957003, 0.22324323109780136, 0.1553672241384859, 0.07800295012185146, 0.04663521045773641]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5Pa", "primary_reference": 91, "internal_reference": 6},
+ "mtime": 1736682709.849521,
+ "numbers": [91, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.08309081676773, -0.14813187061483, 0.24078940568534], [0.35688020530703, 0.49130595099501, 2.07726690011211], [0.45634664185243, 0.81317060812797, -1.32186646013496], [-1.11821039902993, -1.84841088029107, 0.12831834535666], [1.63153528365826, -0.52661448995287, -0.60304196835184], [-1.24346091502007, 1.21869068173579, -0.5214662226673]],
+ "unique_id": "f6eefec6eb1346b9ad0cfb1eb15aeb66",
+ "user": "f3rmion"},
+"286": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8495998,
+ "data": {"dynamic_polarizibilities": [23.65771581429094, 20.137724329972333, 14.59748029523628, 7.7631688146442945, 4.878827503740254, 3.4811641262933213, 2.6851040030185716, 2.1744668975029007, 1.818473874735122, 1.5552370719349962, 1.3521469615586594, 1.1904759598062684, 0.9492845964894685, 0.7785580270364252, 0.6521875871830585, 0.5555993105841034, 0.4799228604278916, 0.34896165822194414, 0.2669058562491217, 0.1724810764335003, 0.12133512336722428, 0.061807843036197956, 0.03721955390889916]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "U", "primary_reference": 92, "internal_reference": 1},
+ "mtime": 1736682709.8495998,
+ "numbers": [92],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "00fcf25238c042c4ae25022e82304606",
+ "user": "f3rmion"},
+"287": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8496964,
+ "data": {"dynamic_polarizibilities": [22.527949648810967, 18.967850490562427, 13.741924010419853, 7.640288124739387, 5.006814638792674, 3.657930704574357, 2.855965420558795, 2.3268971006656556, 1.9514978081207954, 1.6708848660868543, 1.4529659116620104, 1.2788222027689893, 1.018347562985394, 0.8337909144372453, 0.6972490760079864, 0.5929966861464272, 0.5114121115551802, 0.37051957000546387, 0.28251415187847373, 0.18166408298577355, 0.12733512232319563, 0.06452110509803632, 0.03875178382257523]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HU", "primary_reference": 92, "internal_reference": 2},
+ "mtime": 1736682709.8496964,
+ "numbers": [92, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.01118486236126, 0.01937272729622, 0.68239350724191], [0.90379513763874, 1.56541727270378, -0.21992350724191]],
+ "unique_id": "d6f2c16829034eef8fc160ff696cad88",
+ "user": "f3rmion"},
+"288": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8497815,
+ "data": {"dynamic_polarizibilities": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2U", "primary_reference": 92, "internal_reference": 3},
+ "mtime": 1736682709.8497815,
+ "numbers": [],
+ "pbc": [false, false, false],
+ "positions": [],
+ "unique_id": "fdbb498714604f1dbefe566e387858d3",
+ "user": "f3rmion"},
+"289": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8498938,
+ "data": {"dynamic_polarizibilities": [9.107841339370669, 8.617967875586555, 7.7942105479437975, 6.1012920971505125, 4.766107839481457, 3.80645772244444, 3.1137949632476984, 2.600689100443648, 2.2098756342410915, 1.9046729212327396, 1.6611698764214187, 1.4633447688335648, 1.163747883449426, 0.9500596025289778, 0.7918664959481512, 0.671287114607982, 0.5771646316031824, 0.4153647091520585, 0.31496363993425563, 0.20083622091917872, 0.13994860493945355, 0.07031809099968117, 0.04205778472916256]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3U", "primary_reference": 92, "internal_reference": 4},
+ "mtime": 1736682709.8498938,
+ "numbers": [92, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.07045390818231, -0.10503003763769, 0.18692340842797], [-0.64509514438797, -0.93157248370275, -1.59807225029572], [-0.65410352177654, 1.84935625057091, -0.01501765607753], [1.96614257434682, 0.00913627076953, -0.01043350205471]],
+ "unique_id": "069c7464fcc84e3b8efaa43677240b75",
+ "user": "f3rmion"},
+"290": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8500257,
+ "data": {"dynamic_polarizibilities": [8.55625042522418, 8.424921724934489, 7.856160648302734, 6.432268576975661, 5.1608570916131455, 4.1746211555420265, 3.430158948702674, 2.8649943150114336, 2.4292023434222143, 2.0871490564358193, 1.8140179604697215, 1.5924684806207905, 1.2584512505220793, 1.0219780884094811, 0.8481929865175332, 0.7165842171236976, 0.6144197498427665, 0.44004487280029336, 0.3326776403095783, 0.21143883700462576, 0.14710444464268538, 0.07379746801835757, 0.04411458852044146]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4U", "primary_reference": 92, "internal_reference": 5},
+ "mtime": 1736682709.8500257,
+ "numbers": [92, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.14361709880553, -0.92979847648361, 0.2181469437512], [1.63284604382476, 0.39093990006926, 0.11396317167106], [0.80354373617357, -2.7436825947674, 0.71526570691443], [-0.72486212190179, -1.04464165089538, -1.57104303325543], [-1.16065475690207, -0.31985717792287, 1.59572721091873]],
+ "unique_id": "a7d032a17e8140858903896b67dc5c26",
+ "user": "f3rmion"},
+"291": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.850131,
+ "data": {"dynamic_polarizibilities": [11.775404718126007, 9.79790938427452, 8.645465030594458, 6.789304820110197, 5.367786667856343, 4.322838467365728, 3.5508346501051142, 2.969504546270459, 2.5221630582913055, 2.1708645271739386, 1.8898663048909106, 1.6614158630419895, 1.3158342980822264, 1.0700269810119438, 0.8887955973828371, 0.7511082911361009, 0.6439900089601803, 0.4607329403291439, 0.347721352189307, 0.22017580757622546, 0.15269100825444434, 0.0762010240338146, 0.0454275050615604]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5U", "primary_reference": 92, "internal_reference": 6},
+ "mtime": 1736682709.850131,
+ "numbers": [92, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.13188766891673, -0.24550207453993, -0.20332713196165], [-1.11103019444209, 1.20439469834924, 1.25178700228934], [-0.1810018147001, 0.13682952289272, -2.17729549886705], [-0.52781544612595, -2.15771685534028, 0.02910444032827], [2.13900159187436, -0.56039535790436, -0.08795001524854], [-0.45103180552293, 1.6223900665426, 1.18769120345963]],
+ "unique_id": "eee061623a224bf199949fbbcd401398",
+ "user": "f3rmion"},
+"292": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8502352,
+ "data": {"dynamic_polarizibilities": [10.4396025302113, 10.147680131019548, 9.405823011402868, 7.535034006230202, 5.9424899514067056, 4.760376054852733, 3.890605892539226, 3.2393326050241926, 2.740935556652588, 2.3514498254622693, 2.041257733228243, 1.7900564926707447, 1.4118372450719918, 1.1443490229079043, 0.9479183334523222, 0.799278695201737, 0.6840043265220709, 0.48764772942208245, 0.36717948661530353, 0.23188832714846494, 0.16061740845584985, 0.08008198161980844, 0.047733259167633865]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H6U", "primary_reference": 92, "internal_reference": 7},
+ "mtime": 1736682709.8502352,
+ "numbers": [92, 1, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[1.5020715e-06, -1.39609119e-06, -1.59913107e-06], [3.88354923e-06, -4.38539119e-06, 1.94534169784662], [-9.5201792e-07, 5.607807e-07, -1.94534492455207], [1.36297016e-06, -1.94534464854541, -3.31173306e-06], [1.19075427e-06, 1.94534186696419, 1.32194846e-06], [-1.94534174852045, -9.1280786e-07, 7.7983659e-07], [1.9453447611932, -1.08490923e-06, -3.96421547e-06]],
+ "unique_id": "2f7d63df0670424396b630586819f602",
+ "user": "f3rmion"},
+"293": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8503134,
+ "data": {"dynamic_polarizibilities": [22.543101535529864, 16.686088971077293, 11.182763675286429, 6.036281982505558, 4.053754295862154, 3.06460208467487, 2.4638790476871404, 2.052798358535505, 1.7504570923001785, 1.5175433269502978, 1.332281319176898, 1.18142335579984, 0.9511546875446515, 0.7846988014680245, 0.6598072450323065, 0.5634442091943559, 0.487421006813966, 0.35487126450409134, 0.27130397847715904, 0.17493353340364912, 0.12281993417332042, 0.06242132774051313, 0.03756482428596543]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Np", "primary_reference": 93, "internal_reference": 1},
+ "mtime": 1736682709.8503134,
+ "numbers": [93],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "caf8edd8c0fd4954bdc179817c40b8f6",
+ "user": "f3rmion"},
+"294": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8504078,
+ "data": {"dynamic_polarizibilities": [19.891928867678946, 15.469206495737458, 10.922618005561668, 6.349144363235179, 4.404196319348859, 3.3542631851739046, 2.693209706720513, 2.2357279389548177, 1.8990715391498618, 1.640587020037511, 1.4358920692390167, 1.2699474204159853, 1.0180852760465924, 0.8371769350878737, 0.7021006434522566, 0.598270580017581, 0.5165985764467336, 0.37472653395606964, 0.28565418590853137, 0.18337858009420996, 0.1283457420534926, 0.06492268566535375, 0.03897702458357983]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HNp", "primary_reference": 93, "internal_reference": 2},
+ "mtime": 1736682709.8504078,
+ "numbers": [93, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.01715894518152, 0.02972013020419, 0.67635445893161], [0.89782105481848, 1.55506986979581, -0.21388445893161]],
+ "unique_id": "9e8fb35de37f4e8ab7ca59d9353fcec6",
+ "user": "f3rmion"},
+"295": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.850506,
+ "data": {"dynamic_polarizibilities": [17.000594720253982, 13.301541276478053, 9.883506800844719, 6.3600063025652025, 4.617915719058656, 3.5763520573715573, 2.886835259593321, 2.398731121260782, 2.0360905323491436, 1.7566838138642664, 1.5352706639496274, 1.3558856618219135, 1.084123792587186, 0.8894787289014103, 0.7445274081122755, 0.6333607196267197, 0.5460858521258826, 0.394872245441975, 0.30022963410090836, 0.19194217455372056, 0.1339263782768041, 0.06742404359019437, 0.040380333798523]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Np", "primary_reference": 93, "internal_reference": 3},
+ "mtime": 1736682709.850506,
+ "numbers": [93, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.39425612936709, 1.76017392225045, 0.3992678216366], [1.28844446858667, 1.99344109818227, -0.69021536438668], [-1.36687833921957, 3.52844497956729, 0.41713754275008]],
+ "unique_id": "5b67d718ed68433db8188215ab3d5b2d",
+ "user": "f3rmion"},
+"296": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8506072,
+ "data": {"dynamic_polarizibilities": [8.89394708170167, 8.551281791858072, 7.776875900429114, 6.050171335485138, 4.701297774196605, 3.745423403600639, 3.0618577038236827, 2.558472758073515, 2.1764170083021246, 1.8785909302166734, 1.641099739138219, 1.4480832254283909, 1.1552776453579632, 0.9457177904911916, 0.7899697316449547, 0.6707892139783928, 0.577425436694872, 0.41616194289824576, 0.315609725275032, 0.20102145180816278, 0.13989822213764988, 0.07016694259427018, 0.04194368250154839]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Np", "primary_reference": 93, "internal_reference": 4},
+ "mtime": 1736682709.8506072,
+ "numbers": [93, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.08202055996417, -0.0879275970361, 0.21413373116285], [-0.58916217238246, -0.90761040717747, -1.57398959986564], [-0.66362665359869, 1.83894779825846, -0.0242996451484], [1.93129938594531, -0.02151979404488, -0.05244448614882]],
+ "unique_id": "ba001c91f47b47d5a2bd5b94954f3fac",
+ "user": "f3rmion"},
+"297": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8507073,
+ "data": {"dynamic_polarizibilities": [8.540822914942478, 8.261105008564106, 7.651489407058031, 6.2391231425671, 5.010305870588245, 4.061247996706893, 3.3454254489986974, 2.8018172452438654, 2.382178889021167, 2.0522248837032104, 1.7881715831444431, 1.5734504547870198, 1.2484502643640525, 1.017102811411421, 0.8462073113876242, 0.7161900457919396, 0.6148554128936571, 0.4410184463527935, 0.3334511645019757, 0.21167593254252537, 0.14707184400622417, 0.0736448377658347, 0.04399604075149166]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Np", "primary_reference": 93, "internal_reference": 5},
+ "mtime": 1736682709.8507073,
+ "numbers": [93, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.1419180328492, -0.92954521368973, 0.21441037183514], [1.63650443821823, 0.35537672473375, 0.12549291631599], [0.82397858024588, -2.71185106980837, 0.71443840319408], [-0.74322353249151, -1.0349707646464, -1.5450336744245], [-1.1646875188218, -0.32604967658925, 1.56275198307929]],
+ "unique_id": "2976d0d005b248e1a6092063c691dce0",
+ "user": "f3rmion"},
+"298": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8508286,
+ "data": {"dynamic_polarizibilities": [11.82988927273533, 11.13956042273979, 9.79163227990863, 7.301992802028701, 5.6013153997576515, 4.438867096225337, 3.6123061138469175, 3.0038241253814237, 2.542496964360419, 2.1838143890845916, 1.8988714897897592, 1.66830941580642, 1.3209125881346129, 1.0745229051493648, 0.8928810498702693, 0.7548588461762498, 0.64738492069348, 0.4632431893366558, 0.3495025324177776, 0.22107232507890828, 0.15318890888403347, 0.0763995915468055, 0.04555049837184581]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5Np", "primary_reference": 93, "internal_reference": 6},
+ "mtime": 1736682709.8508286,
+ "numbers": [93, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.07649206640432, 0.17734084692708, -0.001835835724], [0.18193215501129, 0.38235213869163, 1.97621410326004], [0.15999705792341, 0.35505852065259, -1.98348904014224], [-0.77175093180611, -1.59216812158451, 0.01599840354715], [1.84895620986226, -0.73159757101355, -0.00814514261899], [-1.49562655739517, 1.40902418632676, 0.00125751167804]],
+ "unique_id": "65494fc5064d409388244096b68eefcd",
+ "user": "f3rmion"},
+"299": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8509574,
+ "data": {"dynamic_polarizibilities": [13.455703758914586, 12.685350719336599, 11.040607118150284, 8.030839304003141, 6.0737089950101195, 4.779183658396618, 3.8733853472521567, 3.2119243608430006, 2.7127374879607684, 2.3258242433566596, 2.0191885841911272, 1.7715719317972483, 1.3993808382495925, 1.1361366262139074, 0.942508109646876, 0.795657060860321, 0.681494077514559, 0.4863392584222991, 0.3661451573312166, 0.23087178002972047, 0.15963494382067842, 0.07937365870033343, 0.04725462255049908]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H6Np", "primary_reference": 93, "internal_reference": 7},
+ "mtime": 1736682709.8509574,
+ "numbers": [93, 1, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[1.45641207e-06, -1.41264933e-06, -1.41427312e-06], [2.8397448e-06, -3.07721749e-06, 1.97583475323775], [-5.8398289e-07, 5.9382063e-07, -1.97583759897846], [1.17367345e-06, -1.97583754665842, -4.66488568e-06], [2.20457823e-06, 1.97583474335289, 1.47838158e-06], [-1.97583461409607, -2.16764659e-06, 1.92030044e-06], [1.97583752367041, -1.13300166e-06, -4.47378251e-06]],
+ "unique_id": "ad7d3f42a00245568f777ec24ac65673",
+ "user": "f3rmion"},
+"300": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8510356,
+ "data": {"dynamic_polarizibilities": [25.597527776087507, 21.57640227178167, 15.079296956273145, 7.429215303971393, 4.443961686595954, 3.093850782969008, 2.368362146550069, 1.9224165585502997, 1.619589246462279, 1.3984828388997979, 1.2283667904568458, 1.092428063802119, 0.8870722091917294, 0.7384133069286899, 0.6257736624139328, 0.5377978812291802, 0.4675538825850926, 0.34299722359665774, 0.2630204531217923, 0.16957961978845412, 0.11875226385123067, 0.05999850771260175, 0.03599554819449255]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Pu", "primary_reference": 94, "internal_reference": 1},
+ "mtime": 1736682709.8510356,
+ "numbers": [94],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "db43d949b9654bd9b8ee7b91a677d451",
+ "user": "f3rmion"},
+"301": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8511257,
+ "data": {"dynamic_polarizibilities": [20.843548855216728, 16.197817384021114, 10.807817827957802, 5.925519838281542, 4.007234669479144, 3.022347214279829, 2.4258726329618368, 2.0235022411337877, 1.731323482391682, 1.5079172481115746, 1.3306498055067266, 1.1861119200618042, 0.9641060313024162, 0.8016689145931872, 0.678183631066636, 0.581722793319302, 0.5047927005064461, 0.3687739541076782, 0.28182657481856493, 0.18078682949554511, 0.12616446310481644, 0.06343046562369824, 0.0379634411590591]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HPu", "primary_reference": 94, "internal_reference": 2},
+ "mtime": 1736682709.8511257,
+ "numbers": [94, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.01038102315303, -0.0179804385699, 0.70419391215648], [0.92536102315303, 1.6027704385699, -0.24172391215648]],
+ "unique_id": "392ea5daeac944d9ac2eb8e7721e3daa",
+ "user": "f3rmion"},
+"302": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8512213,
+ "data": {"dynamic_polarizibilities": [14.483601826535997, 11.360930599088183, 8.814346700393221, 5.854134817361314, 4.285503329382103, 3.336014237991196, 2.707162779125904, 2.262041098120336, 1.9308112224390568, 1.6747806421439668, 1.4710029547077212, 1.3050686788144734, 1.0516980140851941, 0.8682557145651737, 0.730272038896063, 0.6234990270972088, 0.5390278143320343, 0.39120911938142644, 0.29774605834141016, 0.19011357521767003, 0.13234821110265999, 0.06635266812831062, 0.03966311979637675]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Pu", "primary_reference": 94, "internal_reference": 3},
+ "mtime": 1736682709.8512213,
+ "numbers": [94, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.40580603493961, 1.73609528384035, 0.41397266820176], [1.29018452128293, 2.00886606346721, -0.69622369845414], [-1.35706848634332, 3.53709865269245, 0.40844103025238]],
+ "unique_id": "1f87fd4d4f174a9daeef291acc0c57aa",
+ "user": "f3rmion"},
+"303": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8513243,
+ "data": {"dynamic_polarizibilities": [8.200693065507293, 7.9119358917464995, 7.277908340919438, 5.766181263883239, 4.524433394006185, 3.6237430098563483, 2.9727912831645917, 2.4909686947392795, 2.1241937523855174, 1.8376430489743034, 1.6086769243304508, 1.4222131385493224, 1.138486835733337, 0.9345594817387926, 0.7823604467254898, 0.6654353003631978, 0.5735103966253051, 0.41396139993711534, 0.3139752479106367, 0.19969075310170137, 0.13872459922504693, 0.06938304547208968, 0.04143096340084053]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Pu", "primary_reference": 94, "internal_reference": 4},
+ "mtime": 1736682709.8513243,
+ "numbers": [94, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.04901877984786, -0.07695799530915, 0.13632104836261], [-0.65340263337615, -0.93696047405284, -1.57490628029269], [-0.67063669761039, 1.84093244196772, -0.00145742113569], [1.96954811083439, -0.00512397260573, 0.00344265306576]],
+ "unique_id": "f5ec4a6996c54d6c8a3d1b66de295264",
+ "user": "f3rmion"},
+"304": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.851426,
+ "data": {"dynamic_polarizibilities": [9.546130223343393, 8.576322044354493, 7.660918400230874, 6.123365691728963, 4.896313299660349, 3.9652702411180294, 3.2676018023773827, 2.7394892738714005, 2.332442172558282, 2.0125276814232604, 1.756411153995682, 1.5479493478388078, 1.2317854117439355, 1.0059682122128117, 0.8385594984432507, 0.7107501850442559, 0.6108203432080285, 0.43865786390358075, 0.3316492384139389, 0.21020001281910045, 0.14578263701889518, 0.07279425752361995, 0.04344182993165138]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Pu", "primary_reference": 94, "internal_reference": 5},
+ "mtime": 1736682709.851426,
+ "numbers": [94, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.14844722629384, -0.80927895743006, 0.2906801711251], [1.69280695857613, 0.39987925339563, 0.12195640902447], [0.70818199828731, -2.68838332653786, 0.49845327436562], [-0.64276914188576, -1.24517424987025, -1.45903412322502], [-1.21217704127154, -0.30408271955745, 1.62000426870984]],
+ "unique_id": "c602ba7db47f40ed9f9881374c88dc3a",
+ "user": "f3rmion"},
+"305": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8515272,
+ "data": {"dynamic_polarizibilities": [12.56846854654055, 11.736937448948911, 10.097758183667679, 7.297296828531176, 5.521626107622489, 4.351535918534249, 3.5344498665891413, 2.9385739515043463, 2.489025993175615, 2.1403384766693674, 1.8635724097378465, 1.6396030735552278, 1.301716740647418, 1.0614174492919652, 0.8836876703882129, 0.7481949797141597, 0.6423629408313445, 0.46026023110045666, 0.347267906973074, 0.21933708211090566, 0.15171298916060857, 0.07544231831253594, 0.044926640737747534]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5Pu", "primary_reference": 94, "internal_reference": 6},
+ "mtime": 1736682709.8515272,
+ "numbers": [94, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.1413422555233, 0.2214164556496, -0.00178784178883], [0.18836101263031, 0.31492683222577, 1.98887966141104], [0.1738613247342, 0.29017767127196, -1.99373355512227], [-0.87661460212455, -1.42492358805527, 0.01164754034949], [1.90892067818463, -0.69942259490161, -0.00255679262357], [-1.5358706689479, 1.29783522380955, -0.00244901222587]],
+ "unique_id": "39dffd3db8a343ff815b173a6e0c4a47",
+ "user": "f3rmion"},
+"306": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8516362,
+ "data": {"dynamic_polarizibilities": [15.529883689427297, 14.301994053740476, 11.929499035595395, 8.210777035103584, 6.075161205179754, 4.736761339277935, 3.8233003967179813, 3.1648549691814862, 2.671591039205407, 2.29090747985961, 1.989945813285437, 1.747208883430954, 1.382490744868471, 1.1242877767073756, 0.9340097164602877, 0.7893725472588701, 0.6766736288596381, 0.48336667311588305, 0.3638601490847093, 0.2290609628590124, 0.15808641358877176, 0.07836155712292457, 0.04659223689149211]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H6Pu", "primary_reference": 94, "internal_reference": 7},
+ "mtime": 1736682709.8516362,
+ "numbers": [94, 1, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[1.28605615e-06, -1.28439642e-06, -1.4258536e-06], [0.00068098872856, -0.00067660759262, 2.01232520627556], [-0.00067847299394, 0.00067398680013, -2.01232793666091], [-1.72473069e-05, -1.98959894672062, -0.0003081355141], [2.063046225e-05, 1.98959609799567, 0.00030501752613], [-1.98959654049224, -2.059752594e-05, 0.00030085630734], [1.98959935554612, 1.735143979e-05, -0.0003035820804]],
+ "unique_id": "5268a9aef5ba4b229f0b1dfca2a5f240",
+ "user": "f3rmion"},
+"307": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8517146,
+ "data": {"dynamic_polarizibilities": [24.539690469417824, 20.819640733913776, 14.672927059090151, 7.31425953242078, 4.389118524985557, 3.0535030498069458, 2.333657287190017, 1.8914948548668584, 1.5919913258507674, 1.3739923516818824, 1.2067688688013054, 1.073473757394159, 0.8726108632269667, 0.7274209650528204, 0.617376034830952, 0.5312999816436197, 0.46243113711934974, 0.33984681663681704, 0.2607502633464038, 0.16798663414319126, 0.11747046609946106, 0.05920571950775001, 0.035490238329344066]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Am", "primary_reference": 95, "internal_reference": 1},
+ "mtime": 1736682709.8517146,
+ "numbers": [95],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "d0ed44714add460681ee2987e0771256",
+ "user": "f3rmion"},
+"308": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.851813,
+ "data": {"dynamic_polarizibilities": [19.713828626997223, 15.547562125471938, 10.585955678368265, 5.883820660553454, 3.9694594229032925, 2.9813415410000954, 2.3856375201802775, 1.986472363655208, 1.6983864666360942, 1.4791442227403482, 1.3057518103330465, 1.1646725560472344, 0.948281385994731, 0.7899578768680595, 0.6694318420239177, 0.575078190869666, 0.4996432817926896, 0.3657213490572211, 0.27968234204768555, 0.17931239161923204, 0.12497602172109477, 0.0626910239148739, 0.037492213777483685]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HAm", "primary_reference": 95, "internal_reference": 2},
+ "mtime": 1736682709.851813,
+ "numbers": [95, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.01090749725961, -0.01889231740808, 0.70472611143448], [0.92588749725961, 1.60368231740808, -0.24225611143448]],
+ "unique_id": "296a05708881419f9f299aa3c7ad9537",
+ "user": "f3rmion"},
+"309": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8519058,
+ "data": {"dynamic_polarizibilities": [8.893624039031282, 8.30507882160892, 7.195123470167575, 5.207604922451384, 3.9152934654230207, 3.088016750889566, 2.528613538769286, 2.1284792542330524, 1.8285533987900777, 1.595246943955551, 1.4084186237849021, 1.2553690085293847, 1.0196738161505197, 0.8471379113738801, 0.7160611250932066, 0.6137395820184172, 0.5321713077454007, 0.3879861019131039, 0.2958389211084304, 0.18890142428015838, 0.13130647258301367, 0.06561619011371003, 0.03916521916678762]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Am", "primary_reference": 95, "internal_reference": 3},
+ "mtime": 1736682709.8519058,
+ "numbers": [95, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.41091806292943, 1.71326753375106, 0.42439400185397], [1.30924739365772, 2.0096830936387, -0.70797922174804], [-1.37101933072829, 3.55910937261024, 0.40977521989406]],
+ "unique_id": "1f0313cdbc9f419aaaf52bdf51903e17",
+ "user": "f3rmion"},
+"310": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8520098,
+ "data": {"dynamic_polarizibilities": [8.093023536205756, 7.581405447902024, 6.981395179375105, 5.560657960549208, 4.376067897471296, 3.51007348159884, 2.8832625262065967, 2.4197748320964823, 2.067391588893224, 1.7922392534665328, 1.572312396205102, 1.3930207504454362, 1.1195177108542584, 0.9220852927510507, 0.7740517299692212, 0.6598161361149776, 0.5696353664277588, 0.412223193274889, 0.31295573709766855, 0.19898094833511445, 0.13807406834293495, 0.06891033624340238, 0.04111829366023546]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Am", "primary_reference": 95, "internal_reference": 4},
+ "mtime": 1736682709.8520098,
+ "numbers": [95, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.03888250211286, -0.06190473335576, 0.10974230515916], [-0.66458287478586, -0.95677390069634, -1.57885581222714], [-0.66952935939295, 1.84615020898126, 0.01304045100846], [1.96948473629168, -0.00558157492916, 0.01947305605951]],
+ "unique_id": "41f50445afe543219ced26f8890ffab5",
+ "user": "f3rmion"},
+"311": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8520875,
+ "data": {"dynamic_polarizibilities": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Am", "primary_reference": 95, "internal_reference": 5},
+ "mtime": 1736682709.8520875,
+ "numbers": [],
+ "pbc": [false, false, false],
+ "positions": [],
+ "unique_id": "4fadacf3b16f4207872f55358a705f48",
+ "user": "f3rmion"},
+"312": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8521836,
+ "data": {"dynamic_polarizibilities": [14.59379197777483, 13.129681093984427, 10.7209964056732, 7.336534658206446, 5.4449820113022245, 4.2569422081478745, 3.4460591682130643, 2.86236403638786, 2.4254710523945193, 2.088168567248787, 1.8210804438049055, 1.6051175275677332, 1.279059298306889, 1.0464774667100676, 0.8737563310444441, 0.7415103673925033, 0.6377840332556588, 0.45823602794563895, 0.3460794655893523, 0.21847464709179595, 0.15089500955485496, 0.07481846067843766, 0.04449986876952828]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5Am", "primary_reference": 95, "internal_reference": 6},
+ "mtime": 1736682709.8521836,
+ "numbers": [95, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.14514406337739, 0.2295465376554, -0.00376112468697], [0.19647234650909, 0.32345700625265, 2.01957852537141], [0.16778411473122, 0.27408710955267, -2.02929401964458], [-0.87927004248669, -1.42108104842115, 0.02331539636457], [1.92670997707524, -0.73415903334121, -0.00450272247841], [-1.55684045920626, 1.32815942830165, -0.00533605492601]],
+ "unique_id": "9fae4d96b8d145abb5c8e0f1741a9eff",
+ "user": "f3rmion"},
+"313": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8522935,
+ "data": {"dynamic_polarizibilities": [16.794536470112565, 15.19131718869514, 12.30134930430732, 8.184216407470384, 5.981259517394624, 4.640876940057119, 3.739168526941426, 3.094499832004008, 2.6139145859171093, 2.2440425830995334, 1.9520001542917205, 1.7165124205085174, 1.362339105994118, 1.1109437434649647, 0.9250697328343617, 0.7832954922530813, 0.6724607375205848, 0.4814536084944558, 0.3627354271267982, 0.22828595681950314, 0.15737809066929676, 0.07784291063376923, 0.0462440028202021]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H6Am", "primary_reference": 95, "internal_reference": 7},
+ "mtime": 1736682709.8522935,
+ "numbers": [95, 1, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[1.42405032e-06, -1.41543943e-06, -1.44480576e-06], [4.24194596e-06, -4.08179498e-06, 2.00426840660023], [-1.3623132e-06, 1.36496883e-06, -2.00427130510229], [1.42001711e-06, -2.00427126327187, -3.6887703e-06], [1.44400437e-06, 2.00426840098512, 7.3457811e-07], [-2.00426838462759, -1.51476937e-06, 7.815806e-07], [2.00427121692304, -1.4906783e-06, -3.48408057e-06]],
+ "unique_id": "f202a4d1627e40b290bb0f7d5d27dc79",
+ "user": "f3rmion"},
+"314": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.852369,
+ "data": {"dynamic_polarizibilities": [19.915709550130277, 17.21525805657404, 12.801161516670764, 6.986812812416111, 4.4120590001244535, 3.15426124417871, 2.4423448454574106, 1.9889574212618182, 1.6740886195427223, 1.4413408210693712, 1.261369007485356, 1.1175305538772375, 0.9012949777714807, 0.7463308160474241, 0.6301036196748241, 0.5400902987112468, 0.4686726771545563, 0.3428475570383586, 0.2624321598183789, 0.1687053299924494, 0.11786167373699537, 0.059356867913161, 0.03558063100316828]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Cm", "primary_reference": 96, "internal_reference": 1},
+ "mtime": 1736682709.852369,
+ "numbers": [96],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "ceb44d3efb7e48efa0b320e16caaad8b",
+ "user": "f3rmion"},
+"315": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8524623,
+ "data": {"dynamic_polarizibilities": [18.76196709838021, 16.1997378578781, 12.087776607461597, 6.96483405605282, 4.623712704960301, 3.3913627094667422, 2.652454465602687, 2.1652809272564038, 1.8208581667381245, 1.5643296858134454, 1.3655843511691186, 1.2068888984173671, 0.9691354204001112, 0.7996787939219425, 0.6732105521591923, 0.5756694478673032, 0.4985452330827921, 0.3632703739341841, 0.27725063093710295, 0.1774837922831815, 0.12363346823773837, 0.061993073925182, 0.03707729658615941]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HCm", "primary_reference": 96, "internal_reference": 2},
+ "mtime": 1736682709.8524623,
+ "numbers": [96, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.0204411126162, 0.03540500433126, 0.67303659938786], [0.8945388873838, 1.54938499566874, -0.21056659938786]],
+ "unique_id": "24b343e80e784c319100213bdc390123",
+ "user": "f3rmion"},
+"316": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8525634,
+ "data": {"dynamic_polarizibilities": [14.706437549678034, 11.708837182166475, 8.939911015417728, 5.939524775335848, 4.350488252626156, 3.3750994374139425, 2.7260667027320604, 2.267651371285885, 1.9283157919026637, 1.6676233205936228, 1.4613739121747746, 1.2943282509476222, 1.0409027578752037, 0.8586237083380029, 0.7220789062145205, 0.6166514115932463, 0.5333108481744305, 0.3873666898203413, 0.29485052908481146, 0.1879945338476925, 0.1305951859693149, 0.06522350062906385, 0.03892960547599991]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Cm", "primary_reference": 96, "internal_reference": 3},
+ "mtime": 1736682709.8525634,
+ "numbers": [96, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.35547099004645, 1.94912306321432, 0.3881203600178], [0.40327383566026, 0.66522660119674, -0.94560016529387], [-2.35385134561382, 1.89977683558894, 0.30479330527607]],
+ "unique_id": "ee3bd2afa7814cd784abfbd0f6feb938",
+ "user": "f3rmion"},
+"317": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.852654,
+ "data": {"dynamic_polarizibilities": [8.1020657672824, 7.8512172063375285, 7.225886616210046, 5.700077546069724, 4.444299547737462, 3.540457274780672, 2.8935450633158797, 2.4191717203219496, 2.060915917014342, 1.7827317223967594, 1.5614267473212873, 1.381721666217409, 1.108836556871882, 0.9127378011693595, 0.7661179205322564, 0.6531493059586637, 0.5640265751093217, 0.40842077358582435, 0.3101446731264466, 0.19707677479635843, 0.13658481199550318, 0.06797825441003463, 0.04050036341458466]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Cm", "primary_reference": 96, "internal_reference": 4},
+ "mtime": 1736682709.852654,
+ "numbers": [96, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.05737782597403, -0.08702083996336, 0.15493509562472], [-0.63773286418913, -0.91956330177996, -1.56970573482765], [-0.64310854989886, 1.8189489643846, -0.01383010040796], [1.93470924006203, 0.00952517735872, -0.00799926038912]],
+ "unique_id": "2fd802c5a0aa426f8d681a45098bd79b",
+ "user": "f3rmion"},
+"318": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8528156,
+ "data": {"dynamic_polarizibilities": [12.526754550341343, 11.232393698757258, 9.29674424549794, 6.591418956790757, 4.968010990321182, 3.905588848687368, 3.169244200326852, 2.6365083088318277, 2.2371475484879912, 1.9286788444450726, 1.6843518926395504, 1.4867194251762401, 1.1880827767205946, 0.9747086473878633, 0.8159153927267285, 0.694036431469447, 0.59819056027354, 0.4315494433079289, 0.3268154531350111, 0.20688808452406562, 0.14302936508503628, 0.07093750309244383, 0.0421896691221192]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Cm", "primary_reference": 96, "internal_reference": 5},
+ "mtime": 1736682709.8528156,
+ "numbers": [96, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.17001452141662, -0.58282611766609, 0.44745558936335], [1.9929005045161, 0.00899308950065, -0.31165435437408], [0.79656734398972, -2.42155488678882, 0.85218230042877], [-0.64220432890584, -0.81300257291517, -1.34828250955926], [-1.62278804101659, -0.83864951213056, 1.4323589741412]],
+ "unique_id": "f496b0c67205416db748b4419287b115",
+ "user": "f3rmion"},
+"319": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8529272,
+ "data": {"dynamic_polarizibilities": [16.399290799198397, 14.331728797887306, 11.25833639614481, 7.4541488634757584, 5.47637346052013, 4.260420103319439, 3.437747487762572, 2.8487814257604382, 2.409797555492245, 2.0720697802254056, 1.8054351019977566, 1.5903746306517146, 1.2665925185547064, 1.0362571671794836, 0.8654624327592941, 0.7347694448805957, 0.6322582253754865, 0.4546455123935721, 0.34346993282534505, 0.21669198501621345, 0.14946799078612183, 0.0738923062335174, 0.04387452928831813]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5Cm", "primary_reference": 96, "internal_reference": 6},
+ "mtime": 1736682709.8529272,
+ "numbers": [96, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.12398174054037, 0.20881006268219, -0.00249380370003], [0.20050578604059, 0.33695036940802, 2.04392222605242], [0.17883033744025, 0.30134344393542, -2.05152424827718], [-0.88276088173472, -1.48609496475237, 0.01772944570463], [1.95029927926483, -0.72641155939081, -0.00401543042206], [-1.57085626155133, 1.36541264811755, -0.00361818935778]],
+ "unique_id": "ea58cdd5fa224bbeb63eeb8397227047",
+ "user": "f3rmion"},
+"320": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8530242,
+ "data": {"dynamic_polarizibilities": [19.85056458739814, 17.194091352428057, 13.13438447671751, 8.303540664306796, 5.978925608193425, 4.610770252285207, 3.7027269427662595, 3.0583886997347896, 2.580475223990597, 2.2140099876832156, 1.925446935894079, 1.69323112053389, 1.3446384422428022, 1.097516726784289, 0.9148138689730927, 0.7753602009690045, 0.6662132700969308, 0.47766600727650993, 0.360066620478316, 0.22645439378922883, 0.15587697954496998, 0.07682932720924851, 0.04555049837184581]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H6Cm", "primary_reference": 96, "internal_reference": 7},
+ "mtime": 1736682709.8530242,
+ "numbers": [96, 1, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[1.42712633e-06, -1.45650987e-06, -1.40717609e-06], [3.8162275e-06, -3.87905999e-06, 2.04319925370907], [-1.24921238e-06, 1.19576964e-06, -2.04320290144801], [1.49615045e-06, -2.04320263220785, -3.76144096e-06], [1.48050578e-06, 2.04319948746941, 1.22556325e-06], [-2.04319953363796, -1.3499562e-06, 1.29351332e-06], [2.04320256284029, -1.36550513e-06, -3.70272058e-06]],
+ "unique_id": "4416efc156ca48f7bc6b825eeb7d9887",
+ "user": "f3rmion"},
+"321": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8530989,
+ "data": {"dynamic_polarizibilities": [22.24017790337957, 19.18833452233792, 13.8313594110098, 7.049794278364912, 4.256017535550066, 2.9596369263525, 2.2568783427825725, 1.8254015099831253, 1.5342200343473098, 1.3233250352327413, 1.1623475379287065, 1.0345826799430677, 0.8429146471050437, 0.7048050144314238, 0.6001273344487572, 0.5180656050874872, 0.4521663821754096, 0.33398907500358543, 0.256903388243983, 0.16556233226816802, 0.11552183714734884, 0.057903175896414166, 0.034614466686227474]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Bk", "primary_reference": 97, "internal_reference": 1},
+ "mtime": 1736682709.8530989,
+ "numbers": [97],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "db1e4778b44b4c3bb05c9fe799b56508",
+ "user": "f3rmion"},
+"322": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8531892,
+ "data": {"dynamic_polarizibilities": [18.6605168814072, 15.422002255988764, 11.245211676274955, 6.4070549483671515, 4.260351938352293, 3.1383447243500884, 2.467834097628728, 2.026249585679199, 1.7137887855168958, 1.4804912217650403, 1.2990923894122919, 1.1536164947455543, 0.9341312279234613, 0.7761174248431714, 0.6570361909331051, 0.5643614725566048, 0.4904884303355418, 0.35945165392688894, 0.2750723156826505, 0.17623163147364934, 0.1225902478709802, 0.06123140450967959, 0.03654827716722096]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HBk", "primary_reference": 97, "internal_reference": 2},
+ "mtime": 1736682709.8531892,
+ "numbers": [97, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.01063184969488, 0.01841488237772, 0.68295253367473], [0.90434815030512, 1.56637511762228, -0.22048253367473]],
+ "unique_id": "024775cc33664166a8f01c0a41a8bac4",
+ "user": "f3rmion"},
+"323": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8532803,
+ "data": {"dynamic_polarizibilities": [13.964940518909538, 11.487929342116983, 8.73444550412106, 5.788441571197787, 4.240364784507358, 3.2899110106466214, 2.6578646894081333, 2.2121769428058293, 1.8828438314277474, 1.6301725985352717, 1.4304092349250885, 1.2686285764864191, 1.0229975992224494, 0.8459494699901584, 0.7129566553938339, 0.6099667992715899, 0.5283096141718612, 0.38466824622962165, 0.2931093587283614, 0.18686833004266945, 0.12966014044172344, 0.06458037898251122, 0.038498387966445044]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Bk", "primary_reference": 97, "internal_reference": 3},
+ "mtime": 1736682709.8532803,
+ "numbers": [97, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.38183538308602, 1.79537457059059, 0.38046212198206], [1.28343728013389, 1.97516854931407, -0.68132177760991], [-1.37429189704787, 3.51151688009534, 0.42704965562785]],
+ "unique_id": "c27209af2b134d559b1181ff79ed579d",
+ "user": "f3rmion"},
+"324": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8533723,
+ "data": {"dynamic_polarizibilities": [7.84889959745456, 7.588257508947323, 6.995758723430484, 5.540263298748508, 4.329823894651095, 3.4532550177883166, 2.8244465324892696, 2.363286820191906, 2.015240943485099, 1.7451743073463535, 1.5304087235755741, 1.356010136979311, 1.0909832628680434, 0.9001643284251221, 0.7571275541045265, 0.6466084328068589, 0.5591720439708278, 0.4058527325409495, 0.30851167760916315, 0.19602021780559342, 0.13569718557549162, 0.06735884231727197, 0.04008396437614852]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Bk", "primary_reference": 97, "internal_reference": 4},
+ "mtime": 1736682709.8533723,
+ "numbers": [97, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.0536149912405, -0.08174888561855, 0.14479691584566], [-0.63401273305002, -0.91407608234433, -1.56006157422524], [-0.63781689376433, 1.80718614755753, -0.01363481316123], [1.92193461805484, 0.01052882040534, -0.00770052845919]],
+ "unique_id": "2713300c39004347adac1e4aa041e595",
+ "user": "f3rmion"},
+"325": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8534696,
+ "data": {"dynamic_polarizibilities": [9.488415242030188, 8.540117555717226, 7.476086128119918, 5.912947847384418, 4.703770977026319, 3.7935923258191635, 3.117855224334229, 2.6112161423263895, 2.2238983534607404, 1.9213155461461786, 1.6799997076719813, 1.4839617077010454, 1.1866794675056513, 0.9737528560007057, 0.8151463140756667, 0.693375527657552, 0.5976141217470216, 0.4311271168810452, 0.32648055568772794, 0.20661690650259298, 0.14278337846446545, 0.0707670906745785, 0.042088903518511876]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Bk", "primary_reference": 97, "internal_reference": 5},
+ "mtime": 1736682709.8534696,
+ "numbers": [97, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.13979441279514, -0.92942512032459, 0.21444664492002], [1.61371985397854, 0.33387134799547, 0.1268198630338], [0.81522962678526, -2.68373207665922, 0.70655024296552], [-0.72885236131932, -1.03352208383034, -1.52061573163114], [-1.14540153223961, -0.33423206718133, 1.5448589807118]],
+ "unique_id": "b503e5947717419094e13f538a389658",
+ "user": "f3rmion"},
+"326": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8535395,
+ "data": {"dynamic_polarizibilities": [21.93269907320738, 18.918487199571732, 13.615869204001315, 6.9163569096350255, 4.166257610442619, 2.891912067798596, 2.201239429273099, 1.7771244129254342, 1.4909308346681813, 1.2837686084284192, 1.1258259340094994, 1.0006780180234272, 0.8134985000872647, 0.6792046237267162, 0.5778062714026232, 0.4985511604712396, 0.43503771140927644, 0.32134447359797824, 0.24724470876879867, 0.1594274852250163, 0.11131635504385495, 0.05594565586163072, 0.03355939154257433]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Cf", "primary_reference": 98, "internal_reference": 1},
+ "mtime": 1736682709.8535395,
+ "numbers": [98],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "070a10a09e6f49c0b642b8903ff75ba7",
+ "user": "f3rmion"},
+"327": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.853627,
+ "data": {"dynamic_polarizibilities": [19.38237202870783, 15.391821475861258, 10.520803306400571, 5.825594441986651, 3.8894841342755386, 2.888320070399417, 2.288834375750101, 1.891511155185089, 1.608207178795987, 1.3950938545549456, 1.2282882525599166, 1.0937661717441398, 0.8895039203023121, 0.7414673938262589, 0.6293434321064335, 0.5417203305343065, 0.4716215529071824, 0.3466484948803114, 0.26570111454716944, 0.17043316372489262, 0.11859815175159595, 0.05932278542958794, 0.03549616571779156]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HCf", "primary_reference": 98, "internal_reference": 2},
+ "mtime": 1736682709.853627,
+ "numbers": [98, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.00215928742797, 0.00373999117246, 0.69151723128292], [0.91282071257203, 1.58105000882754, -0.22904723128292]],
+ "unique_id": "bbec970207e34ee3bb88e038581efea9",
+ "user": "f3rmion"},
+"328": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8537238,
+ "data": {"dynamic_polarizibilities": [7.912208551615085, 7.480379039203012, 6.624693833687852, 4.903202406883444, 3.7024305733438854, 2.916473683677881, 2.3822470539883134, 2.0007025414705186, 1.715898935804202, 1.495444540970945, 1.319753783693129, 1.1764369402683894, 0.9567842247226548, 0.7966439710368278, 0.6751384352517383, 0.580200936335409, 0.50432888236043, 0.3694096665186715, 0.28236300347306276, 0.1803911763166752, 0.1251849621638688, 0.06236205385603823, 0.03723140868579414]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Cf", "primary_reference": 98, "internal_reference": 3},
+ "mtime": 1736682709.8537238,
+ "numbers": [98, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.395248, 1.756714, 0.400978], [1.313279, 1.980995, -0.701187], [-1.390721, 3.544351, 0.426398]],
+ "unique_id": "a990fc46687f4946958fb70eca93b579",
+ "user": "f3rmion"},
+"329": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8538196,
+ "data": {"dynamic_polarizibilities": [7.468953997970475, 7.24467051020014, 6.694245809730695, 5.3373984291331755, 4.193050888072383, 3.3540927727560397, 2.7473326906345408, 2.300094931953219, 1.9615388041508433, 1.6983849847889825, 1.4889347866084892, 1.3187965104588593, 1.0602882817927184, 0.874313505558508, 0.7350495139847395, 0.6275518789481799, 0.5425723926236331, 0.39368973144670083, 0.29922494175905884, 0.19010616598211064, 0.13163544264184934, 0.06546948724963465, 0.03906889910451592]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Cf", "primary_reference": 98, "internal_reference": 4},
+ "mtime": 1736682709.8538196,
+ "numbers": [98, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.03577081382216, -0.06748025602791, 0.08676883755105], [-0.67644473650284, -0.94571706668719, -1.56572096117838], [-0.62778977497576, 1.8094244574231, 0.01021639524832], [1.93649532530076, 0.025662865292, 0.03213572837901]],
+ "unique_id": "111dad8453784186af73ec385a696e16",
+ "user": "f3rmion"},
+"330": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.853913,
+ "data": {"dynamic_polarizibilities": [12.090015678447637, 10.174483781579097, 8.385477918510668, 6.1216348943022965, 4.70694509353995, 3.7364641559622584, 3.045232861075586, 2.5379610303509774, 2.1550265452422463, 1.858317779879147, 1.6230330591502704, 1.4326779428533651, 1.1451477385012034, 0.9398452303868413, 0.7871171759546002, 0.6698838053930387, 0.5776506774558766, 0.4170866154960542, 0.3159475864165389, 0.1998982116973635, 0.13807851388427056, 0.06845244548583382, 0.04078191436584042]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Cf", "primary_reference": 98, "internal_reference": 5},
+ "mtime": 1736682709.853913,
+ "numbers": [98, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.43385737364336, -0.99693923134536, 0.27037536898267], [1.39934981324158, 0.74441263496819, 0.04302738955624], [0.43386448179514, -2.95935058473127, 0.67469887383454], [-0.58543873495872, -0.99797386212435, -1.37278438668538], [-0.98714293372136, -0.43718895676718, 1.45674275431192]],
+ "unique_id": "0e5da73d459544e1a2b6c4753a77962a",
+ "user": "f3rmion"},
+"331": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8540268,
+ "data": {"dynamic_polarizibilities": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5Cf", "primary_reference": 98, "internal_reference": 6},
+ "mtime": 1736682709.8540268,
+ "numbers": [],
+ "pbc": [false, false, false],
+ "positions": [],
+ "unique_id": "6890a7b10ce44cadb5a9c5c96f554686",
+ "user": "f3rmion"},
+"332": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8541276,
+ "data": {"dynamic_polarizibilities": [19.219777836204745, 16.477679029569334, 12.502640452289842, 7.993794608053443, 5.808074563582984, 4.493033053705609, 3.6093068552924876, 2.9789024206539536, 2.5106594791618404, 2.1517768545259104, 1.8695486991400279, 1.6427860811515296, 1.3031422775690393, 1.0629911709247737, 0.885777074815953, 0.7506741099323222, 0.6450021105375892, 0.4624874473096009, 0.34858230536130486, 0.2190555311596499, 0.1506475410871723, 0.07421534890390559, 0.04407013310708528]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H6Cf", "primary_reference": 98, "internal_reference": 7},
+ "mtime": 1736682709.8541276,
+ "numbers": [98, 1, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[1.08848815e-06, -1.47091772e-06, -1.66584995e-06], [5.11308198e-06, -0.00012404549476, 2.00674940101924], [-6.6688935e-07, 0.00012167500458, -2.00675270984065], [5.93448441e-06, -1.9832372799312, 0.00014473785491], [-3.56357749e-06, 1.98323433366434, -0.00014814642937], [-2.0067499919007, -1.025345844e-05, 2.1418024e-06], [2.00675208631301, 7.04113319e-06, -3.75855658e-06]],
+ "unique_id": "20391a1315814c4f8ec700101c439052",
+ "user": "f3rmion"},
+"333": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8542018,
+ "data": {"dynamic_polarizibilities": [20.926670105262986, 18.155691580264296, 13.190030799462543, 6.778669603388289, 4.106671056227118, 2.8584341778471747, 2.1777654891739284, 1.757709252065682, 1.4731827518092857, 1.2667214392534394, 1.1091299626000328, 0.9842502609412098, 0.797710900957376, 0.6642883506986086, 0.5639050636461481, 0.48570799155264144, 0.42322442623342965, 0.3117924871148487, 0.23945167480746168, 0.15402170696090575, 0.10739094204450496, 0.05393923487215549, 0.0324005871010901]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Es", "primary_reference": 99, "internal_reference": 1},
+ "mtime": 1736682709.8542018,
+ "numbers": [99],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "d99d90bf99944922960640b54f355b6c",
+ "user": "f3rmion"},
+"334": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8542948,
+ "data": {"dynamic_polarizibilities": [18.83710267434059, 14.991426386233334, 10.238744081585443, 5.6952600611090265, 3.822180120301406, 2.846631265601111, 2.25848318320473, 1.8665790775278357, 1.5860772740272846, 1.374580644985296, 1.2088582732290458, 1.0751882545025955, 0.872409332019752, 0.7257864876884251, 0.6150243434644105, 0.5286785941027174, 0.459746030152637, 0.3371839373767823, 0.25802366466055854, 0.16511777813460632, 0.11473349448383272, 0.05733711029967891, 0.03434625235897857]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HEs", "primary_reference": 99, "internal_reference": 2},
+ "mtime": 1736682709.8542948,
+ "numbers": [99, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.00167961256545, -0.00290917090822, 0.69539787760406], [0.91665961256545, 1.58769917090822, -0.23292787760406]],
+ "unique_id": "c899a9153dc1483194507149d54d7b2d",
+ "user": "f3rmion"},
+"335": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8543828,
+ "data": {"dynamic_polarizibilities": [7.638911488772457, 7.289972058257191, 6.501238187103538, 4.849703280603514, 3.673955399242145, 2.8968095725033343, 2.3655229274837217, 1.9847282296045343, 1.6999246239382177, 1.4793027803813186, 1.3035097756527834, 1.1602284965587288, 0.9410603450185768, 0.7817840081989714, 0.6613231746277519, 0.5674703877973132, 0.4926474815775399, 0.359996973664058, 0.2746944446691231, 0.17507134518505324, 0.12131734120188181, 0.06038082426746483, 0.0360844590212049]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Es", "primary_reference": 99, "internal_reference": 3},
+ "mtime": 1736682709.8543828,
+ "numbers": [99, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.39436346067825, 1.7589466977458, 0.39972709497173], [1.31561597680361, 1.97825372463746, -0.70171394760469], [-1.39394251612536, 3.54485957761673, 0.42817685263296]],
+ "unique_id": "7319e3024c16423592bfcabc2cac1847",
+ "user": "f3rmion"},
+"336": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.854474,
+ "data": {"dynamic_polarizibilities": [7.2187041032587995, 6.99296099608327, 6.472136191673475, 5.203898822824591, 4.117292936325019, 3.306495843522698, 2.7132561344499235, 2.2729074829916964, 1.9381597022668322, 1.6773175643994924, 1.4694203419922416, 1.3004438339783193, 1.043721231081985, 0.8592327475009827, 0.7213083457163468, 0.6150332345470818, 0.5311606880151036, 0.38456451693179056, 0.2918112606583612, 0.184980456822144, 0.12791897008527336, 0.06357420479354986, 0.037978259630177834]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Es", "primary_reference": 99, "internal_reference": 4},
+ "mtime": 1736682709.854474,
+ "numbers": [99, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.02858889660473, -0.00801169988347, -0.03036169325532], [-0.74513748396081, -0.99744090234973, -1.5605708466853], [-0.68332294599482, 1.82843631996807, 0.05163155018836], [1.9963615333509, -0.00109371773487, 0.10270098975226]],
+ "unique_id": "d595b429783446949302c84eae98df6e",
+ "user": "f3rmion"},
+"337": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.854567,
+ "data": {"dynamic_polarizibilities": [12.649144748852219, 10.436419522614997, 8.425838988296737, 6.069408674691465, 4.652263453264746, 3.690343146452342, 3.006688535848673, 2.5049558496282436, 2.126010496944673, 1.8322580165697588, 1.5992612677816136, 1.410755496680325, 1.1261282308203213, 0.9230988761755713, 0.7722468401869607, 0.6565990460351027, 0.5657173626639681, 0.4077583879268174, 0.30844944003046454, 0.19473842005382377, 0.13432795884412152, 0.06652456239328781, 0.03966460164348863]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Es", "primary_reference": 99, "internal_reference": 5},
+ "mtime": 1736682709.854567,
+ "numbers": [99, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.41038377576546, -0.99237971914183, 0.26656165876525], [1.33971583048826, 0.77837475618479, 0.06907356393368], [0.38657434292426, -2.96869028277133, 0.62729132681052], [-0.5265043557346, -1.0997853157321, -1.42849892562306], [-0.91567959344338, -0.36455943853951, 1.53763237611361]],
+ "unique_id": "2e9ec88db67c44a79de3d877fa8c0513",
+ "user": "f3rmion"},
+"338": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8546543,
+ "data": {"dynamic_polarizibilities": [17.405423496440626, 13.934824940054956, 10.474159204860165, 6.983001501644375, 5.202265827307309, 4.075199587265171, 3.2962488707441, 2.7319540813075296, 2.308974159847559, 1.9828788844089176, 1.725400539485528, 1.5179197161167135, 1.2062339219939195, 0.9852342074234931, 0.8218398174799944, 0.6970920002141279, 0.5993997475168279, 0.4303802659366615, 0.3246771477525792, 0.20424743297070902, 0.1405620896437687, 0.06938156362497781, 0.04129463346654826]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5Es", "primary_reference": 99, "internal_reference": 6},
+ "mtime": 1736682709.8546543,
+ "numbers": [99, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.06665125728526, 0.12436391059359, -0.07781034803367], [-0.01506243262748, 0.42731448954775, 1.90900850445285], [0.07332677434531, 0.3537804803802, -2.07074839136942], [-1.02596123689842, -1.5317513301971, -0.03314068397571], [1.79135178128247, -0.62367108150744, -0.11290608693472], [-1.64798662881663, 1.364984531183, -0.02841999413933]],
+ "unique_id": "a69ffef06f8e4aa5b500af0e7de2dab0",
+ "user": "f3rmion"},
+"339": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8547502,
+ "data": {"dynamic_polarizibilities": [22.34085015061885, 17.42621529326731, 12.610508549104372, 7.962444650554671, 5.7769098369731955, 4.464941678005844, 3.583174481474618, 2.954164464968356, 2.4871040374715165, 2.129325388933932, 1.8481641634685972, 1.6224418021526334, 1.2847925647827234, 1.0464893214869626, 0.8709497126145577, 0.7373360040783586, 0.6329724756834091, 0.4530421538185262, 0.34097894783028754, 0.21381868346629285, 0.14684067585677207, 0.07225782886912215, 0.04293355637227914]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H6Es", "primary_reference": 99, "internal_reference": 7},
+ "mtime": 1736682709.8547502,
+ "numbers": [99, 1, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[1.55179498e-06, -1.48654615e-06, -1.33455577e-06], [0.07460086898171, -0.07459979407349, 2.01475130612197], [-0.07459705587868, 0.07459761837358, -2.01475408268904], [0.07458409810061, -2.01472986255075, 0.07453051085447], [-0.07458261303071, 2.01472705227989, -0.0745338950117], [-2.0147137661909, 0.07460080507901, -0.07455289430001], [2.01471691622298, -0.07460433256208, 0.07455038958009]],
+ "unique_id": "002eeb1dd3284523b1b53be63e49fbb9",
+ "user": "f3rmion"},
+"340": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8548284,
+ "data": {"dynamic_polarizibilities": [19.932805620259945, 17.391714928808696, 12.757550756168358, 6.639330037611815, 4.049187243063363, 2.828777971597272, 2.158528149967601, 1.742323233503111, 1.4590222208082329, 1.2527742942364963, 1.0950790882852588, 0.9700704659277027, 0.783566670274554, 0.6506123837031381, 0.5509818749835089, 0.47366650192156634, 0.4120927907290442, 0.30275321973242697, 0.23208689466145585, 0.14895378983830213, 0.10374559814929885, 0.052109153688993076, 0.03135143934588444]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Fm", "primary_reference": 100, "internal_reference": 1},
+ "mtime": 1736682709.8548284,
+ "numbers": [100],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "ab32d6bf7b774c3a9fd2487600de171a",
+ "user": "f3rmion"},
+"341": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8549097,
+ "data": {"dynamic_polarizibilities": [18.288924454092744, 14.533897199360059, 9.976700165710374, 5.587297126079338, 3.770438464696157, 2.8168357657226926, 2.2374839277823866, 1.8490503080414968, 1.5698303022927156, 1.358761927066058, 1.193198112950778, 1.0596599786172847, 0.8573641382929115, 0.7115355640135483, 0.6017469933420337, 0.5164311277230921, 0.44850770165619663, 0.32815504292414377, 0.25070482177502074, 0.16010024381380636, 0.11112371491931154, 0.05552184758763522, 0.03330451383933227]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HFm", "primary_reference": 100, "internal_reference": 2},
+ "mtime": 1736682709.8549097,
+ "numbers": [100, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.00019086081347, 0.00033058024063, 0.69350706366019], [0.91478913918653, 1.58445941975937, -0.23103706366019]],
+ "unique_id": "87f0e2e9d7d44dd98eaca908105e9975",
+ "user": "f3rmion"},
+"342": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8550303,
+ "data": {"dynamic_polarizibilities": [7.2979458775661765, 6.981943462806498, 6.2751468458567174, 4.74479887801273, 3.6226093968157667, 2.867116320075635, 2.3445355268382726, 1.9671312951510496, 1.683547249657804, 1.4633225411268866, 1.2876806848037625, 1.1445431448795595, 0.9259040127583458, 0.7674767743338434, 0.6480339697284802, 0.5552451491243658, 0.4814536084944558, 0.35104068971990116, 0.2674526578334026, 0.17012049398428755, 0.1177623899804999, 0.05859519849765858, 0.03506346636112481]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Fm", "primary_reference": 100, "internal_reference": 3},
+ "mtime": 1736682709.8550303,
+ "numbers": [100, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.38734341597962, 1.77909988035972, 0.38901533318909], [1.31569290882041, 1.96615133340682, -0.69786929666355], [-1.40103949284079, 3.53680878623347, 0.43504396347445]],
+ "unique_id": "363b18b4344246359d473c2a2578076a",
+ "user": "f3rmion"},
+"343": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8551662,
+ "data": {"dynamic_polarizibilities": [7.2357053351733125, 6.921730087262675, 6.332550639276431, 5.076350314517286, 4.02840285547224, 3.2442745651422875, 2.6672670093329636, 2.2367844959455825, 1.9082397272310165, 1.6514948966280039, 1.4464665302293382, 1.2796238820565122, 1.0259687026817537, 0.8437089171570072, 0.7075671774479539, 0.6027753952376732, 0.5201653824450104, 0.37600092247227995, 0.2849636451543988, 0.18032449319664093, 0.12457444115377736, 0.061895272015798426, 0.037018022701684514]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Fm", "primary_reference": 100, "internal_reference": 4},
+ "mtime": 1736682709.8551662,
+ "numbers": [100, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.02265602225035, 0.02562586875149, -0.04679848455726], [-0.69866049801693, -1.00668744219298, -1.54326461646681], [-0.69994371421055, 1.83973827759567, 0.07384066943169], [1.97243818997713, -0.03678670415418, 0.07962243159239]],
+ "unique_id": "e9db32f402d3472a9a1a67b4e75a5e11",
+ "user": "f3rmion"},
+"344": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8552706,
+ "data": {"dynamic_polarizibilities": [13.325928034398137, 10.48150027545238, 8.298246024576075, 5.959519338416344, 4.579783347328843, 3.639927744012219, 2.9687621408674105, 2.4743260698258407, 2.0998707138912436, 1.8090745185045152, 1.5781745833796692, 1.3912736527005385, 1.1090795797982291, 0.9079573623864591, 0.7587116486671182, 0.6444493815648608, 0.5547739217427904, 0.39918738423174743, 0.30157663312560035, 0.19005874687453075, 0.13096416590017115, 0.0648337748386414, 0.03869843732654782]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Fm", "primary_reference": 100, "internal_reference": 5},
+ "mtime": 1736682709.8552706,
+ "numbers": [100, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.04447325774497, -1.04455567255772, 0.43106302677631], [1.52975621429826, 0.17415496984091, 0.32121661931893], [1.09167705771145, -2.74086920405981, 0.20403634631373], [-0.74543364240386, -1.2033136079738, -1.32099417999502], [-1.22598288735082, 0.16754351475043, 1.43673818758605]],
+ "unique_id": "3a477978c8884b828ec89c73cd581729",
+ "user": "f3rmion"},
+"345": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8553605,
+ "data": {"dynamic_polarizibilities": [17.310545271408774, 13.820378923910825, 10.38047534860048, 6.913514726874455, 5.150423406098452, 4.035758744535575, 3.264706273120784, 2.705353443802308, 2.2855594936328627, 1.9616469789900097, 1.7057794018772254, 1.4995818581072926, 1.1899469403873302, 0.9706394952186618, 0.8087210249985879, 0.6852742694969456, 0.588726002770011, 0.4219944931305756, 0.3179451163233429, 0.19966111615946391, 0.13726942536118825, 0.06772930409524008, 0.04035217870339742]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5Fm", "primary_reference": 100, "internal_reference": 6},
+ "mtime": 1736682709.8553605,
+ "numbers": [100, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.09804520741652, 0.09902363777287, -0.00019191089242], [0.16752618571379, 0.36090210793757, 1.97087409523462], [0.2229068115683, 0.32522040668662, -2.00190013587761], [-0.96450237983343, -1.47476520762512, 0.0344079836286], [1.9630046457373, -0.63971825891406, -0.02384644440542], [-1.48697047060248, 1.32933731414214, 0.02066641231223]],
+ "unique_id": "84cb2aa7d3054816b4b5c1d65a41a46c",
+ "user": "f3rmion"},
+"346": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.855455,
+ "data": {"dynamic_polarizibilities": [20.095654690466276, 16.699344093492993, 12.428342119947672, 7.908875877460484, 5.737348964627539, 4.433083446947699, 3.556625708618312, 2.9310758051182715, 2.46627667631415, 2.1100569309382546, 1.830063400997076, 1.6052909036798224, 1.269233170108063, 1.0323332360272455, 0.8580783886008341, 0.7256442303656854, 0.622347631891284, 0.44462378037597905, 0.3342069065290306, 0.20922347557237653, 0.14356134819819846, 0.07063224258739811, 0.04201481116291826]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H6Fm", "primary_reference": 100, "internal_reference": 7},
+ "mtime": 1736682709.855455,
+ "numbers": [100, 1, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-1.592328551e-05, 1.612757204e-05, 1.691261542e-05], [-0.03510618597007, 0.03510573309369, 1.99525353455907], [0.03513269144095, -0.03513323250868, -1.99522398565373], [0.03513514902652, -1.99522433117266, -0.03513781245252], [-0.03510770253256, 1.9952526745113, 0.03511115511356], [-1.9952524710559, 0.03510793835778, 0.03510953583769], [1.99522444237657, -0.03513490985348, -0.03513934001949]],
+ "unique_id": "a8aad24ebbaf404098244ef6764ddcc4",
+ "user": "f3rmion"},
+"347": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8555212,
+ "data": {"dynamic_polarizibilities": [19.29471632649924, 16.909584116184114, 12.495416447619466, 6.545849194406457, 3.989425830888661, 2.780216359894102, 2.1174217110842606, 1.707874733693413, 1.4306522578514358, 1.2297626904362295, 1.0766256462011117, 0.9553957339788304, 0.7744414557596436, 0.6450228563971554, 0.5475899269444331, 0.47161562551873487, 0.4108421117666239, 0.30226865572684475, 0.23164678606922973, 0.1482128662823659, 0.10280758892748361, 0.05119040847963218, 0.0306342253437382]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Md", "primary_reference": 101, "internal_reference": 1},
+ "mtime": 1736682709.8555212,
+ "numbers": [101],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "4b8008a8bb8b4a74af213f892bddaed6",
+ "user": "f3rmion"},
+"348": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8556128,
+ "data": {"dynamic_polarizibilities": [18.13164416533283, 14.336661866922729, 9.903073110109883, 5.535810348177332, 3.720400933269562, 2.770213891888963, 2.196098901642014, 1.8136741719397673, 1.5403845183326992, 1.334698211816362, 1.1737725791612428, 1.0441109568724074, 0.8475498648709806, 0.7054081262059558, 0.5979371644174097, 0.5140527631085368, 0.4469962176020868, 0.3275178486660386, 0.2501683931205229, 0.15931190115029026, 0.11015903244948261, 0.05459272944849122, 0.032579890601626665]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HMd", "primary_reference": 101, "internal_reference": 2},
+ "mtime": 1736682709.8556128,
+ "numbers": [101, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.00119340971877, -0.00206704385693, 0.69490638751796], [0.91617340971878, 1.58685704385693, -0.23243638751796]],
+ "unique_id": "446b3614873e4d23b7b3603e2fbee66b",
+ "user": "f3rmion"},
+"349": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8557034,
+ "data": {"dynamic_polarizibilities": [7.494834457779327, 7.147293890937668, 6.38786947380974, 4.771217248323191, 3.609392802424976, 2.8394828351334387, 2.3138598097754017, 1.9382560223291039, 1.6582713834705962, 1.442029879976392, 1.2701370968463053, 1.130278884580676, 0.9166661778629333, 0.7615553132748013, 0.6442285863451919, 0.5527615733648678, 0.4797806031051518, 0.35020937349014075, 0.26674137121970387, 0.16921656724604536, 0.11672065146085361, 0.05763347972205339, 0.03432254280518861]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Md", "primary_reference": 101, "internal_reference": 3},
+ "mtime": 1736682709.8557034,
+ "numbers": [101, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.3940076869047, 1.76342405185735, 0.39807309059936], [1.29853042003658, 1.98624177352256, -0.69398144645644], [-1.37721273313187, 3.53239417462009, 0.42209835585708]],
+ "unique_id": "20880717df144413ab9748821feb7018",
+ "user": "f3rmion"},
+"350": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8557873,
+ "data": {"dynamic_polarizibilities": [10.554457536158306, 8.803444751191176, 7.2579063686033845, 5.274548847577332, 4.030093643026888, 3.1916541741996984, 2.6034512634601783, 2.175753140796006, 1.854288637581966, 1.605442052085233, 1.407864412965062, 1.2475996841218375, 1.004271497269718, 0.8291349508117422, 0.6977736498855892, 0.5961485749533798, 0.5156101844231147, 0.3739470823752248, 0.28365665600172735, 0.17913456996580737, 0.12328375231933648, 0.06071868540897173, 0.0361111322692186]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Md", "primary_reference": 101, "internal_reference": 4},
+ "mtime": 1736682709.8557873,
+ "numbers": [101, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.25859588950457, -0.02173332020542, -0.44138881488193], [-1.11344255894001, -0.95766165650907, -1.56310497205954], [-0.61444085076868, 1.63956281323125, 0.16028886505441], [2.06577752020412, 0.16172216348324, 0.40760492188708]],
+ "unique_id": "e078dff94db9424bbfb7f59266030430",
+ "user": "f3rmion"},
+"351": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.855891,
+ "data": {"dynamic_polarizibilities": [14.868636089002253, 12.497369522112912, 9.540576260368095, 6.244517066054316, 4.571407947452541, 3.5521164478568843, 2.8682025140086376, 2.381589113870642, 2.020248104876116, 1.742707031905086, 1.5235907450138493, 1.3466493087736129, 1.0794011458416486, 0.8881584031247319, 0.7453868794371614, 0.6353612132277474, 0.5484553256577664, 0.39628000019825377, 0.29979693474424157, 0.18866284689514695, 0.12955048375544487, 0.06359495065311607, 0.03775153702206135]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Md", "primary_reference": 101, "internal_reference": 5},
+ "mtime": 1736682709.855891,
+ "numbers": [101, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.13816789708391, -0.93063898946788, 0.2163820131512], [1.61485041422614, -0.07338445234324, 1.24780025489972], [1.36522452811928, -2.41098567583588, -0.31379880008884], [-1.33056158119216, -1.77336650365273, -0.83788556524787], [-1.09319125823778, 0.54133562130079, 0.75956209728509]],
+ "unique_id": "8d7cd7a04e5a4ab59ad25c10235ba7bd",
+ "user": "f3rmion"},
+"352": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8559701,
+ "data": {"dynamic_polarizibilities": [18.494234371442666, 16.30098506179678, 12.168689905311167, 6.450837603134533, 3.9445362363287106, 2.7498384941007177, 2.0932794579376353, 1.6875704645665375, 1.413265745687837, 1.2147752887467522, 1.0636476291953332, 0.9440981315979151, 0.7657000396467084, 0.6380300198762296, 0.5417959047370119, 0.466655883235298, 0.4064721446337122, 0.2987685328486021, 0.22859862656010818, 0.14567001663839288, 0.10062927367303118, 0.049727825380214113, 0.029639905931671817]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "No", "primary_reference": 102, "internal_reference": 1},
+ "mtime": 1736682709.8559701,
+ "numbers": [102],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "90500c6cf6c64d618e89f05939068b24",
+ "user": "f3rmion"},
+"353": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8560548,
+ "data": {"dynamic_polarizibilities": [17.302704818339855, 14.185886886983937, 9.946514940041535, 5.578010390229234, 3.7310331862972466, 2.7653978887753774, 2.184682751492149, 1.7999744953905068, 1.526461082869546, 1.3214756900371245, 1.161608096219882, 1.0330786051245173, 0.8385698713730338, 0.6980137091177125, 0.5917074791590983, 0.5086721762453281, 0.44223800652586454, 0.32372135636542154, 0.2468994383917324, 0.15664309450180805, 0.10790217929810095, 0.053097545712611965, 0.03157075271844156]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HNo", "primary_reference": 102, "internal_reference": 2},
+ "mtime": 1736682709.8560548,
+ "numbers": [102, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.0049589824203, -0.00858919949056, 0.69871290914557], [0.9199389824203, 1.59337919949056, -0.23624290914557]],
+ "unique_id": "186407f95bae4e6a942ba33ef2901985",
+ "user": "f3rmion"},
+"354": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8561401,
+ "data": {"dynamic_polarizibilities": [7.43204563195507, 7.1049797466581515, 6.349308848264596, 4.742805793647262, 3.5848786056532713, 2.816157079745455, 2.2918262250689714, 1.9180288092520457, 1.6401202381972713, 1.425966657283695, 1.2560136120230494, 1.1178758242543039, 0.9070104620819726, 0.7538497082930647, 0.6378907262477136, 0.5473883957372184, 0.4750964843845231, 0.3465477292767041, 0.2636087464252056, 0.16665148989539424, 0.11453937251217744, 0.056175342163970944, 0.03333266893445785]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2No", "primary_reference": 102, "internal_reference": 3},
+ "mtime": 1736682709.8561401,
+ "numbers": [102, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.3850228417713, 1.7862621517918, 0.38531354151006], [1.32858745989188, 1.95452403387407, -0.70190502352381], [-1.41625461812058, 3.54127381433412, 0.44278148201376]],
+ "unique_id": "98755305e2f1457e85e0185acb78a3e9",
+ "user": "f3rmion"},
+"355": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8562272,
+ "data": {"dynamic_polarizibilities": [13.539102114370765, 10.22940992662776, 7.949017633873995, 5.413906195519148, 4.027082529695563, 3.1510634181112898, 2.5562544329470422, 2.1314651761634753, 1.8154612795566853, 1.5722812774157524, 1.3798160108315412, 1.2239256946625643, 0.9872732290494295, 0.8166548344355528, 0.6883387293242976, 0.5887734218775909, 0.5096442679507164, 0.3698957123713656, 0.280432156686293, 0.17657690185071562, 0.12108469120531783, 0.05920423766063814, 0.035069393749572304]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3No", "primary_reference": 102, "internal_reference": 4},
+ "mtime": 1736682709.8562272,
+ "numbers": [102, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.30242060063021, 0.42126291841738, -0.17535942149455], [-0.65261480301713, -0.92185235199507, -1.31791706311891], [-1.16865152405783, 1.81427469036835, 0.04703885864906], [2.11533572644474, -0.49179525679066, 0.0096376259644]],
+ "unique_id": "73214c91b8da46a191a0894559e42c2e",
+ "user": "f3rmion"},
+"356": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8563557,
+ "data": {"dynamic_polarizibilities": [18.411974074568402, 13.870761725714488, 9.908941224672896, 6.240320475033493, 4.518972787398935, 3.496139673205904, 2.8177885934156266, 2.338409570877792, 1.9839502598708014, 1.7123884399961766, 1.4982837600372922, 1.3254722316978444, 1.0643515065734725, 0.877170506790198, 0.7370989085404591, 0.6288840595017531, 0.5432036594932907, 0.39266873878662073, 0.29687473223962924, 0.18628892782192732, 0.12748478888149475, 0.06215755895459984, 0.036760181304218716]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4No", "primary_reference": 102, "internal_reference": 5},
+ "mtime": 1736682709.8563557,
+ "numbers": [102, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.13870088933996, -0.93114938036577, 0.21328546686677], [1.89519295495775, -0.53542935258013, -0.71205538557219], [1.12713030491679, -1.96132610378805, 1.64847933850995], [-0.84741148054612, 0.11945806343705, -1.20862686046977], [-1.61912266866818, -1.33859322670295, 1.13097744066465]],
+ "unique_id": "5c93afd15c834f818a40ea4863c39c3b",
+ "user": "f3rmion"},
+"357": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.856444,
+ "data": {"dynamic_polarizibilities": [19.182156701728527, 14.492793724170943, 10.452936190523928, 6.663045518790222, 4.854273297096528, 3.765600233875894, 3.0369685997326736, 2.5192630834933714, 2.135430599034846, 1.8410868616622946, 1.6090355313315237, 1.4218545315482494, 1.1394070627898099, 0.9373497998504482, 0.7864384899773627, 0.6700527359637922, 0.5780492943289702, 0.41678431868523225, 0.3144761122344496, 0.19676410505575337, 0.1343872327285964, 0.06532574807978304, 0.0385650710864793]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5No", "primary_reference": 102, "internal_reference": 6},
+ "mtime": 1736682709.856444,
+ "numbers": [102, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.2175399566718, 0.39122613329371, 0.00653362811066], [0.19583597604286, 0.35037253235824, 2.03474132559421], [0.23035329842012, 0.41586883907418, -2.02196180192381], [-1.0699039788912, -1.92399114596149, -0.03242380327687], [1.98362596926998, -0.6071030067429, 0.0056548222152], [-1.55744122151354, 1.37362664797825, 0.00746582928062]],
+ "unique_id": "b9d2d905397240d4abb7c32981bda114",
+ "user": "f3rmion"},
+"358": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8565304,
+ "data": {"dynamic_polarizibilities": [19.97836204602024, 15.142805959793773, 11.025038832392953, 7.100488268062066, 5.1949958853764615, 4.0359261932592165, 3.2549157092526433, 2.6980197824456513, 2.284559246832349, 1.967461747056997, 1.7176163966068623, 1.5162615291985282, 1.2128740789022199, 0.9962650773242713, 0.8347615242955218, 0.7103945417374066, 0.6122132794931886, 0.440455344450282, 0.3317648224886649, 0.20706442433037844, 0.14117853804230762, 0.06844355440316258, 0.04034180577361431]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H6No", "primary_reference": 102, "internal_reference": 7},
+ "mtime": 1736682709.8565304,
+ "numbers": [102, 1, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[1.210061028e-05, -1.683242507e-05, -1.38915536e-06], [-1.888282072e-05, 3.049849691e-05, 2.66354302096243], [-2.833943749e-05, 3.883868563e-05, -2.6635460268253], [1.063650591e-05, -2.03312765163305, -4.9127511e-06], [1.064369638e-05, 2.03309454420506, 1.59942007e-06], [-2.03309916884772, -1.470246582e-05, 1.39082324e-06], [2.03312301029335, -1.469486364e-05, -3.68247398e-06]],
+ "unique_id": "cbca677a9db84b8495b90e1b8e8c2f72",
+ "user": "f3rmion"},
+"359": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.856595,
+ "data": {"dynamic_polarizibilities": [30.622862540084363, 12.402134171927097, 9.608773828150689, 5.738220290729319, 3.7278398057711613, 2.6815520154914134, 2.0793026759784548, 1.6964630290848837, 1.4325579132373036, 1.23884048584356, 1.0896792374095956, 0.9705980034995294, 0.791009988317489, 0.6610816335485167, 0.562420252840052, 0.48500855971583773, 0.422813954583441, 0.31118196610475723, 0.23826026972951628, 0.15184339170645333, 0.10476659080937893, 0.05148825974911853, 0.030512713880564663]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "Lr", "primary_reference": 103, "internal_reference": 1},
+ "mtime": 1736682709.856595,
+ "numbers": [103],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0]],
+ "unique_id": "91b143b0a0574095816bbbf81975d6a5",
+ "user": "f3rmion"},
+"360": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8566802,
+ "data": {"dynamic_polarizibilities": [13.679839061973736, 12.294497243262022, 9.752862713920711, 6.067944609744936, 4.147734521544214, 3.0671627164841855, 2.3997269225199602, 1.9554484125210476, 1.6415887486851368, 1.409036554030553, 1.2299938585856816, 1.087828410366867, 0.8759894746420357, 0.7254012074393383, 0.6128104638792731, 0.5255815336389041, 0.45620293370815, 0.33321703265829994, 0.2538996841482176, 0.16089006832443434, 0.11064656014928863, 0.054139284232258264, 0.03200789761644392]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HLr", "primary_reference": 103, "internal_reference": 2},
+ "mtime": 1736682709.8566802,
+ "numbers": [103, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.01640252867238, 0.02840997990634, 0.67711910113342], [0.89857747132762, 1.55638002009366, -0.21464910113342]],
+ "unique_id": "a69bcb6f20c44e9da7018a1b0aa3ab4c",
+ "user": "f3rmion"},
+"361": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.856756,
+ "data": {"dynamic_polarizibilities": [12.522827655494881, 10.503985823527932, 8.091978833991885, 5.438725652795899, 3.9991467479425444, 3.0934995852034937, 2.485979315513605, 2.058441232337515, 1.7448690468413077, 1.506509493355296, 1.319728592292227, 1.1695908066115388, 0.9433468351121959, 0.7811305136226356, 0.659381954911199, 0.5649290200004521, 0.48980381696985675, 0.35680507498508485, 0.2712787870762572, 0.17137561848804347, 0.11762754189331952, 0.057394902337041934, 0.03387798867162689]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Lr", "primary_reference": 103, "internal_reference": 3},
+ "mtime": 1736682709.856756,
+ "numbers": [103, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.3763882416147, 1.81058495813706, 0.3722878050067], [1.2798569698666, 1.96804489837723, -0.67687291883978], [-1.3761587282519, 3.50343014348572, 0.43077511383307]],
+ "unique_id": "84c2c5ad898a446c84291c697487e1d1",
+ "user": "f3rmion"},
+"362": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.856843,
+ "data": {"dynamic_polarizibilities": [7.040719446651805, 6.842349019326782, 6.344446907890543, 5.095618772512963, 4.017287520286086, 3.2125274726175332, 2.6261131513420426, 2.1938879857511004, 1.8680327695445824, 1.616149879315623, 1.4167391953180657, 1.255459401203209, 1.0113502809231323, 0.835989975551264, 0.704441961889015, 0.6025382996997737, 0.5216309292386523, 0.3788371778444037, 0.2873909107236458, 0.18102837057478033, 0.12403356695794392, 0.06037045133768172, 0.03558359469739203]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H3Lr", "primary_reference": 103, "internal_reference": 4},
+ "mtime": 1736682709.856843,
+ "numbers": [103, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[-0.01809829557648, -0.03148965149278, 0.0576122593225], [-0.6579660620677, -0.94809830713217, -1.54507053784419], [-0.66304310406528, 1.81267806059601, 0.02243490227193], [1.93559746170947, -0.01120010197106, 0.02842337624977]],
+ "unique_id": "4aefb321372c4447b3ad0f3f3c3b15be",
+ "user": "f3rmion"},
+"363": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8569336,
+ "data": {"dynamic_polarizibilities": [35.92323553728029, 7.674072757042966, 6.860316415558235, 5.451150940828949, 4.3349066302448165, 3.485190304896279, 2.8540064186769, 2.383576270847663, 2.0269416082804437, 1.7506438050362743, 1.5318312968029717, 1.3549921080134546, 1.0878921297926776, 0.8966834695593339, 0.7537474608423456, 0.6433750424087533, 0.5559949637629733, 0.4023941013818393, 0.30450031747732464, 0.19117605959688252, 0.13071817927960033, 0.06344380224770509, 0.037333656136513335]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H4Lr", "primary_reference": 103, "internal_reference": 5},
+ "mtime": 1736682709.8569336,
+ "numbers": [103, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.13870857800119, -0.92924126574846, 0.21420102593841], [1.61369366302647, 0.43845393237094, 0.20503782939215], [0.79912717073422, -2.78418020714583, 0.62549969794014], [-0.73356142699738, -1.14852528154909, -1.58524613268628], [-1.12347798476451, -0.22354717792755, 1.61256757941559]],
+ "unique_id": "76e6364193854cc296d8d4e559ec61cb",
+ "user": "f3rmion"},
+"364": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8570247,
+ "data": {"dynamic_polarizibilities": [21.28460879328865, 14.232611008268385, 10.167797687410328, 6.751362124810705, 5.033468622793922, 3.9403870644154675, 3.183735183233852, 2.6367646683821815, 2.228426878234622, 1.915013250379385, 1.668494646695404, 1.47039243369763, 1.17329542439122, 0.9624107982064344, 0.8058847696264643, 0.6857380876429615, 0.5910925126076711, 0.4258013583609758, 0.32121407105213345, 0.20091772251033171, 0.13709160370776355, 0.06635711366964622, 0.0389948067489223]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H5Lr", "primary_reference": 103, "internal_reference": 6},
+ "mtime": 1736682709.8570247,
+ "numbers": [103, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.06340134736566, 0.10678169922656, -0.00142057879326], [0.22654472323681, 0.37958667740878, 2.01035155870735], [0.20316408205305, 0.34096645275842, -2.019803200605], [-0.92223975865114, -1.54847676958422, 0.02032286097625], [1.94612205240274, -0.67034072353288, -0.00489550060087], [-1.51698244640712, 1.39148266372336, -0.00454513968445]],
+ "unique_id": "883b626882424e1aadb66835b5b9a0b6",
+ "user": "f3rmion"},
+"365": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 1736682709.8571498,
+ "data": {"dynamic_polarizibilities": [26.12658127750953, 18.13713589072943, 12.302010208119214, 7.64830788130884, 5.541974832162721, 4.279987894431714, 3.4330648508890556, 2.8307932836694185, 2.3853455962992385, 2.04540245960015, 1.7790300683113023, 1.5655477641394044, 1.2462808401922714, 1.020309528561513, 0.8529645342177624, 0.724766976875457, 0.6239583997018893, 0.4483565532507856, 0.33760774565077784, 0.21065493988244527, 0.14351392909061855, 0.06931636235205542, 0.04068411245645684]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H6Lr", "primary_reference": 103, "internal_reference": 7},
+ "mtime": 1736682709.8571498,
+ "numbers": [103, 1, 1, 1, 1, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[2.68474116e-06, -2.72368954e-06, -6.49803064e-06], [3.24763601e-06, -3.0102866e-06, 2.02760851385051], [-1.88436322e-06, 1.92172443e-06, -2.02761520833545], [1.08607664e-06, -2.02761376682622, -1.72217704e-06], [1.07572162e-06, 2.02760994941012, 3.33066639e-06], [-2.02760995303991, -1.18003874e-06, 3.21847009e-06], [2.0276137432277, -1.19029345e-06, -1.63444387e-06]],
+ "unique_id": "d1f3c244f9344b5e9cf80cf69de855c6",
+ "user": "f3rmion"},
+"366": {
  "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
  "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
  "ctime": 20.267101640346773,
@@ -3154,7 +4390,7 @@
  "positions": [[0.0, 0.0, 0.0]],
  "unique_id": "202d1d577524f8c15641fc6879ecd684",
  "user": "f3rmion"},
-"264": {
+"367": {
  "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
  "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
  "ctime": 20.26710164125446,
@@ -3166,7 +4402,7 @@
  "positions": [[0.0, 0.0, 0.0], [1.7473431492818035, 0.0, 0.0]],
  "unique_id": "942f76449490e9820aabe7e524e0cbcd",
  "user": "f3rmion"},
-"265": {
+"368": {
  "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
  "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
  "ctime": 20.267101642167475,
@@ -3178,31 +4414,31 @@
  "positions": [[0.0, 0.0, 0.0]],
  "unique_id": "b78b138a0cc1fcaf313fcb975d564eee",
  "user": "f3rmion"},
-"266": {
- "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
- "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
- "ctime": 20.267101643079837,
- "data": {"dynamic_polarizibilities": [9.27584941164646, 8.88802219892477, 8.033067762014495, 6.171548865122588, 4.7197551590664375, 3.6992740611719728, 2.9828285863056796, 2.4672878898512147, 2.0851882137634314, 1.7938434625946587, 1.5659633232752996, 1.3836960326020395, 1.1117966180026553, 0.9197381631017203, 0.7774964370997338, 0.6683152740855811, 0.5821738889088259, 0.43098093536921256, 0.33433078414955936, 0.2211122300990829, 0.15911669263068867, 0.08620820656483143, 0.05505351082284503]},
- "key_value_pairs": {"secondary_reference": 1, "name": "H2Lv", "primary_reference": 115, "internal_reference": 1},
- "mtime": 20.267101643079837,
- "numbers": [116, 1, 1],
- "pbc": [false, false, false],
- "positions": [[0.0, 0.0, 0.0], [0.0, 0.0, 1.9615678693791188], [0.0, 0.0, -1.9615678693791188]],
- "unique_id": "d034ee7725f612b138c0dd3f564576bf",
- "user": "f3rmion"},
-"267": {
+"369": {
  "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
  "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
  "ctime": 20.267101643991435,
  "data": {"dynamic_polarizibilities": [7.496366331486595, 7.190290959653552, 6.492038007177618, 4.9907957636196, 3.8628935199886274, 3.080267399404649, 2.527954687538363, 2.125071535432038, 1.8214329527398627, 1.585882994263659, 1.3985550086998357, 1.2463837722467244, 1.0148022292147958, 0.8474153586125873, 0.7212082134959831, 0.6230110859344962, 0.5447456155318241, 0.40583564882675743, 0.31615314885619605, 0.21036282370255124, 0.15207764709187108, 0.0830085918183439, 0.05321288969772802]},
- "key_value_pairs": {"secondary_reference": 1, "name": "HMc", "primary_reference": 116, "internal_reference": 1},
+ "key_value_pairs": {"secondary_reference": 1, "name": "HMc", "primary_reference": 115, "internal_reference": 1},
  "mtime": 20.267101643991435,
  "numbers": [115, 1],
  "pbc": [false, false, false],
  "positions": [[0.0, 0.0, 0.0], [0.0, 0.0, 2.070424862130327]],
  "unique_id": "6a8258b51907791bb6736b391fc57d6e",
  "user": "f3rmion"},
-"268": {
+"370": {
+ "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
+ "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
+ "ctime": 20.267101643079837,
+ "data": {"dynamic_polarizibilities": [9.27584941164646, 8.88802219892477, 8.033067762014495, 6.171548865122588, 4.7197551590664375, 3.6992740611719728, 2.9828285863056796, 2.4672878898512147, 2.0851882137634314, 1.7938434625946587, 1.5659633232752996, 1.3836960326020395, 1.1117966180026553, 0.9197381631017203, 0.7774964370997338, 0.6683152740855811, 0.5821738889088259, 0.43098093536921256, 0.33433078414955936, 0.2211122300990829, 0.15911669263068867, 0.08620820656483143, 0.05505351082284503]},
+ "key_value_pairs": {"secondary_reference": 1, "name": "H2Lv", "primary_reference": 116, "internal_reference": 1},
+ "mtime": 20.267101643079837,
+ "numbers": [116, 1, 1],
+ "pbc": [false, false, false],
+ "positions": [[0.0, 0.0, 0.0], [0.0, 0.0, 1.9615678693791188], [0.0, 0.0, -1.9615678693791188]],
+ "unique_id": "d034ee7725f612b138c0dd3f564576bf",
+ "user": "f3rmion"},
+"371": {
  "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
  "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
  "ctime": 20.26710164491577,
@@ -3214,7 +4450,7 @@
  "positions": [[0.0, 0.0, 0.0], [0.0, 0.0, 1.9615678693960525]],
  "unique_id": "901a36d6cb2da6a1225e908d91ad59a7",
  "user": "f3rmion"},
-"269": {
+"372": {
  "cell": [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
  "constraints": [{"name": "FixAtoms", "kwargs": {"indices": []}}],
  "ctime": 20.26710164582927,
@@ -3226,5 +4462,5 @@
  "positions": [[0.0, 0.0, 0.0]],
  "unique_id": "e063b79c919fa769145fa45a6257dce9",
  "user": "f3rmion"},
-"ids": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269],
-"nextid": 270}
+  "ids": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372],
+  "nextid": 373}
diff --git a/python/dftd4/test_ase.py b/python/dftd4/test_ase.py
index 3656fc5..b49b99e 100644
--- a/python/dftd4/test_ase.py
+++ b/python/dftd4/test_ase.py
@@ -57,6 +57,42 @@ def test_ase_scand4() -> None:
     assert approx(energies, abs=thr) == [-0.021665446836610563, 3.684105315180033]
 
 
+def test_ase_pbed4s() -> None:
+    thr = 1.0e-6
+
+    forces = np.array(
+        [
+            [-1.05900228e-18, -1.47186433e-03, -2.08505399e-03],
+            [-8.94454333e-19,  1.47186433e-03, -2.08505399e-03],
+            [-2.48990627e-03, -1.06729670e-18,  2.15375860e-03],
+            [ 2.48990627e-03, -1.91047493e-19,  2.15375860e-03],
+            [-4.33024525e-22, -2.06112648e-03, -6.95481292e-05],
+            [ 2.47579260e-21, -2.26182709e-03, -5.56758674e-04],
+            [ 3.90654502e-20,  2.06112648e-03, -6.95481292e-05],
+            [ 4.57489295e-20,  2.26182709e-03, -5.56758674e-04],
+            [-1.57814347e-03,  6.44754156e-19,  5.57602199e-04],
+            [ 1.57814347e-03,  5.62735538e-19,  5.57602199e-04],
+       ]
+    )
+
+    atoms = molecule("bicyclobutane")
+    atoms.calc = DFTD4(method="PBE", model="d4s")
+
+    assert approx(atoms.get_potential_energy(), abs=thr) == -0.16377494406788423
+    assert approx(atoms.get_forces(), abs=thr) == forces
+
+    atoms.calc = DFTD4(method="PBE", model="d4s").add_calculator(EMT())
+    assert approx(atoms.get_potential_energy(), abs=thr) == 3.364290912363593
+
+    if hasattr(atoms.calc, "calcs"):
+        calcs = atoms.calc.calcs
+    else:
+        calcs = atoms.calc.mixer.calcs
+
+    energies = [calc.get_potential_energy() for calc in calcs]
+    assert approx(energies, abs=thr) == [-0.16377494406788423, 3.5280658564314775]
+
+
 def test_ase_tpssd4() -> None:
     thr = 1.0e-6
 
diff --git a/python/dftd4/test_interface.py b/python/dftd4/test_interface.py
index 483d106..09bd3dd 100644
--- a/python/dftd4/test_interface.py
+++ b/python/dftd4/test_interface.py
@@ -16,6 +16,7 @@
 
 import numpy as np
 from dftd4.interface import DampingParam, DispersionModel, Structure
+import pytest
 from pytest import approx, raises
 
 
@@ -157,6 +158,62 @@ def test_blypd4() -> None:
     assert approx(res.get("energy"), abs=thr) == -0.06991716314879085
 
 
+def test_tpssd4s() -> None:
+    """Use TPSS-D4S for a mindless molecule"""
+    thr = 1.0e-7
+
+    numbers = np.array(
+        [
+            1,
+            1,
+            6,
+            5,
+            1,
+            15,
+            8,
+            17,
+            13,
+            15,
+            5,
+            1,
+            9,
+            15,
+            1,
+            15,
+        ]
+    )
+    positions = np.array(
+        [
+            [+2.79274810283778, +3.82998228828316, -2.79287054959216],
+            [-1.43447454186833, +0.43418729987882, +5.53854345129809],
+            [-3.26268343665218, -2.50644032426151, -1.56631149351046],
+            [+2.14548759959147, -0.88798018953965, -2.24592534506187],
+            [-4.30233097423181, -3.93631518670031, -0.48930754109119],
+            [+0.06107643564880, -3.82467931731366, -2.22333344469482],
+            [+0.41168550401858, +0.58105573172764, +5.56854609916143],
+            [+4.41363836635653, +3.92515871809283, +2.57961724984000],
+            [+1.33707758998700, +1.40194471661647, +1.97530004949523],
+            [+3.08342709834868, +1.72520024666801, -4.42666116106828],
+            [-3.02346932078505, +0.04438199934191, -0.27636197425010],
+            [+1.11508390868455, -0.97617412809198, +6.25462847718180],
+            [+0.61938955433011, +2.17903547389232, -6.21279842416963],
+            [-2.67491681346835, +3.00175899761859, +1.05038813614845],
+            [-4.13181080289514, -2.34226739863660, -3.44356159392859],
+            [+2.85007173009739, -2.64884892757600, +0.71010806424206],
+        ]
+    )
+
+    model = DispersionModel(numbers, positions, model = "d4s")
+
+    res = model.get_dispersion(DampingParam(method="tpss"), grad=False)
+
+    assert approx(res.get("energy"), abs=thr) == -0.046233140236052253
+
+    res = model.get_dispersion(DampingParam(method="tpss"), grad=True)
+
+    assert approx(res.get("energy"), abs=thr) == -0.046233140236052253
+
+
 def test_pbed4() -> None:
     """Use PBE-D4 for a mindless molecule"""
     thr = 1.0e-7
@@ -569,3 +626,26 @@ def test_properties() -> None:
     assert approx(res.get("coordination numbers"), abs=thr) == cn
     assert approx(res.get("partial charges"), abs=thr) == charges
     assert approx(res.get("polarizibilities"), abs=thr) == alpha
+
+
+def test_error_model() -> None:
+    """Test the error for unknown dispersion model"""
+    numbers = np.array(
+        [
+            1, 
+            1, 
+            8, 
+        ]
+    )
+    positions = np.array(
+        [
+            [-0.02298820517725,  0.00000000000000, -1.76188954246096], 
+            [ 1.65369502723146,  0.00000000000000,  0.60848805100320], 
+            [-0.10273226709885,  0.00000000000000,  0.07266269355725], 
+        ]
+    )
+
+    with pytest.raises(ValueError) as exc:
+        DispersionModel(numbers, positions, model="D42")
+    
+    assert "Unknown dispersion model" in str(exc)
\ No newline at end of file
diff --git a/python/dftd4/test_pyscf.py b/python/dftd4/test_pyscf.py
index dc99451..ebbae65 100644
--- a/python/dftd4/test_pyscf.py
+++ b/python/dftd4/test_pyscf.py
@@ -58,6 +58,31 @@ def test_energy_r2scan_d4(ecp: Union[None, str]) -> None:
     d4 = disp.DFTD4Dispersion(mol, xc="r2SCAN")
     assert d4.kernel()[0] == approx(-0.005001101058518388, abs=1.0e-7)
 
+@pytest.mark.skipif(pyscf is None, reason="requires pyscf")
+def test_energy_tpss_d4s() -> None:
+    mol = gto.M(
+        atom="""
+             Na  -1.855282634   3.586705153  -2.417637293 
+             H    4.401780235   0.023388444  -4.954577493 
+             O   -2.987060334   4.762520654   1.270433015 
+             H    0.799808860   1.411034556  -5.046553216 
+             F   -4.206474694   1.842757675   4.550380848 
+             H   -3.543561218  -3.188356651   1.462400217 
+             H    2.700321601   1.068184525  -1.732346503 
+             O    3.731140888  -2.070015433   2.231609376 
+             N   -1.753068192   0.359514171   1.053234061 
+             H    5.417557885  -1.578818300   1.753940027 
+             H   -2.234628682  -2.138565050   4.109222857 
+             Cl   1.015658662  -3.219521545  -3.360509630 
+             B    2.421192557   0.266264350  -3.918624743 
+             B   -3.025260988   2.536678890   2.316649847 
+             N   -2.004389486  -2.292351369   2.197828073 
+             Al   1.122265541  -1.369420070   0.484550554 
+             """
+    )
+
+    d4 = disp.DFTD4Dispersion(mol, xc="TPSS", model="d4s")
+    assert d4.kernel()[0] == approx(-0.016049411775539424, abs=1.0e-7)
 
 @pytest.mark.skipif(pyscf is None, reason="requires pyscf")
 def test_gradient_b97m_d4() -> None:
@@ -84,27 +109,74 @@ def test_gradient_b97m_d4() -> None:
     )
     ref = np.array(
         [
-            [+6.02987248e-07, +1.18181692e-05, -2.11659178e-05],
-            [+3.77083487e-07, +4.21255367e-05, -3.65576556e-05],
-            [+3.71749233e-05, +4.38986750e-05, -1.64037320e-05],
-            [+3.79004788e-05, +4.09262181e-05, +2.57427629e-05],
-            [+1.49281462e-06, +3.63132380e-05, +4.66732244e-05],
-            [-3.45592945e-05, +3.46256250e-05, +2.53829747e-05],
-            [-3.48859913e-05, +3.74107269e-05, -1.56473785e-05],
-            [+2.00543104e-05, +1.15042699e-05, -9.90469697e-06],
-            [+1.99879228e-05, +9.25641402e-06, +1.21976769e-05],
-            [+1.10396127e-06, +7.69249859e-06, +2.38607706e-05],
-            [-1.86258815e-05, +7.79467748e-06, +1.29284817e-05],
-            [-1.87883833e-05, +9.46661745e-06, -9.65731010e-06],
-            [-2.38952311e-05, -1.10356928e-04, -2.28127181e-05],
-            [+4.05848507e-07, -5.94239995e-05, -6.36138164e-06],
-            [+2.78030538e-06, -3.80326610e-05, -1.91595254e-05],
-            [+1.91553258e-05, -4.44033682e-05, +4.86234846e-06],
-            [-1.02811799e-05, -4.06157099e-05, +6.02207637e-06],
+            [+2.98598566e-06, +5.58662750e-05, -2.26040542e-04],
+            [+1.75816159e-05, +3.76346114e-04, -5.59737686e-04],
+            [+5.30037419e-04, +3.39528029e-04, -2.58687563e-04],
+            [+5.28657666e-04, +2.71291979e-04, +3.25797992e-04],
+            [+2.86698935e-05, +2.42198161e-04, +6.35784343e-04],
+            [-4.99037369e-04, +2.74343468e-04, +3.55926359e-04],
+            [-5.08919994e-04, +3.36480299e-04, -2.53165937e-04],
+            [+1.90422032e-04, +3.91738111e-05, -1.05867702e-04],
+            [+1.88137796e-04, +1.62741316e-05, +1.07526135e-04],
+            [+6.73432246e-06, +2.93353505e-06, +2.23028509e-04],
+            [-1.97182105e-04, +1.82664904e-05, +1.26683921e-04],
+            [-2.07136902e-04, +4.89015922e-05, -1.12337721e-04],
+            [-2.01762905e-04, -1.23133705e-03, -2.26387771e-04],
+            [+7.59912392e-06, -1.01235495e-04, -7.86554908e-06],
+            [+3.02563455e-05, -2.19783887e-04, -2.31677736e-04],
+            [+2.31670341e-04, -2.08064229e-04, +9.53780006e-05],
+            [-1.48713265e-04, -2.61183219e-04, +1.11642946e-04],
         ]
     )
 
-    d4 = disp.DFTD4Dispersion(mol, xc="r2SCAN")
+    d4 = disp.DFTD4Dispersion(mol, xc="b97m")
+    assert d4.kernel()[1] == approx(ref, abs=1.0e-7)
+
+@pytest.mark.skipif(pyscf is None, reason="requires pyscf")
+def test_gradient_blyp_d4s() -> None:
+    mol = gto.M(
+        atom="""
+             H   -1.795376258  -3.778664229  -1.078835583
+             S   -2.682788333   0.388926662   1.662148652
+             B    0.114846497   1.488579332   3.656603965
+             O   -1.079988795  -0.162591216  -4.557030658
+             Mg   0.603028329   4.088161496  -0.025893731
+             H   -1.225340893  -1.799813824  -3.707731733
+             H   -1.334609820  -4.248190824   2.727919027
+             H   -0.162780825   2.412679941   5.690306951
+             Si   2.878024440  -0.331205250   1.883113735
+             H    0.684893279   0.327902040  -4.205476937
+             B   -1.209197735  -2.872537625   0.940642042
+             Li  -3.255726045   2.212410929  -2.867155493
+             F   -1.831474682   5.205272937  -2.269762706
+             H    4.908858657  -1.925765619   2.990699194
+             H    1.268062422  -2.604093417   0.551628052
+             S    4.119569763   1.598928667  -1.391174777
+             """,
+        spin=1
+    )
+    ref = np.array(
+        [  
+            [-1.04361222e-04, -1.65054791e-04, -1.36662175e-04],
+            [-1.41500522e-03, +1.89282651e-04, +2.16639105e-04],
+            [-1.18067839e-04, +4.50543787e-04, +1.50087553e-03],
+            [+3.37690080e-04, -4.10348598e-04, -3.02311767e-04],
+            [+4.39892308e-04, +1.54862493e-03, +1.33655085e-04],
+            [+1.31259180e-06, -7.51721105e-05, -1.39848135e-04],
+            [-4.61111364e-05, -1.65382677e-04, +1.81820530e-04],
+            [-1.94292825e-05, +7.21791149e-05, +1.79879351e-04],
+            [+1.14226323e-03, -6.08455689e-04, +6.24007890e-04],
+            [+6.95738570e-05, -1.86718359e-05, -1.25837081e-04],
+            [-1.66091884e-04, -1.03519307e-03, -1.71797180e-04],
+            [-1.29925668e-03, +6.18658801e-05, -6.30138324e-04],
+            [-1.58991399e-04, +5.73306273e-04, -2.35799582e-04],
+            [+2.90056077e-04, -2.14985916e-04, +1.62430848e-04],
+            [+6.43808246e-05, -3.35585457e-04, -2.45131168e-04],
+            [+9.82145702e-04, +1.33047503e-04, -1.01178292e-03],
+        ]
+    )
+
+    d4 = disp.DFTD4Dispersion(mol, xc="BLYP", model="d4s")
     assert d4.kernel()[1] == approx(ref, abs=1.0e-7)
 
 
@@ -126,6 +198,23 @@ def test_energy_hf() -> None:
     assert mf.kernel() == approx(-110.91742452859162, abs=1.0e-8)
     assert "dispersion" in mf.scf_summary
 
+@pytest.mark.skipif(pyscf is None, reason="requires pyscf")
+def test_energy_hf_d4s() -> None:
+    mol = gto.M(
+        atom="""
+             N  -1.57871857  -0.04661102   0.00000000
+             N   1.57871857   0.04661102   0.00000000
+             H  -2.15862174   0.13639605   0.80956529
+             H  -0.84947130   0.65819321   0.00000000
+             H  -2.15862174   0.13639605  -0.80956529
+             H   2.15862174  -0.13639605  -0.80956529
+             H   0.84947130  -0.65819321   0.00000000
+             H   2.15862174  -0.13639605   0.80956529
+             """
+    )
+    mf = disp.energy(scf.RHF(mol), model="d4s")
+    assert mf.kernel() == approx(-110.91765211773482, abs=1.0e-8)
+    assert "dispersion" in mf.scf_summary
 
 @pytest.mark.skipif(pyscf is None, reason="requires pyscf")
 def test_gradient_hf() -> None:
@@ -152,6 +241,31 @@ def test_gradient_hf() -> None:
     grad = disp.energy(scf.RHF(mol)).run().nuc_grad_method()
     assert grad.kernel() == approx(ref, abs=1.0e-7)
 
+@pytest.mark.skipif(pyscf is None, reason="requires pyscf")
+def test_gradient_hf_d4s() -> None:
+    mol = gto.M(
+        atom="""
+             O  -1.65542061  -0.12330038   0.00000000
+             O   1.24621244   0.10268870   0.00000000
+             H  -0.70409026   0.03193167   0.00000000
+             H  -2.03867273   0.75372294   0.00000000
+             H   1.57598558  -0.38252146  -0.75856129
+             H   1.57598558  -0.38252146   0.75856129
+             """
+    )
+    ref = np.array(
+        [
+            [+1.72591013e-02, +5.08609363e-02, -3.88151022e-16],
+            [+3.80150780e-02, -4.60423874e-02, +1.26616497e-15],
+            [-3.05314461e-02, -1.26530890e-02, +2.80179917e-16],
+            [+6.92409507e-03, -3.83029588e-02, +1.05415315e-16],
+            [-1.58334141e-02, +2.30687495e-02, +2.19006284e-02],
+            [-1.58334141e-02, +2.30687495e-02, -2.19006284e-02],
+        ]
+    )
+    grad = disp.energy(scf.RHF(mol), model="d4s").run().nuc_grad_method()
+    assert grad.kernel() == approx(ref, abs=1.0e-7)
+
 
 @pytest.mark.skipif(pyscf is None, reason="requires pyscf")
 def test_pbc():
diff --git a/python/dftd4/test_qcschema.py b/python/dftd4/test_qcschema.py
index 35afc91..34e524f 100644
--- a/python/dftd4/test_qcschema.py
+++ b/python/dftd4/test_qcschema.py
@@ -66,6 +66,26 @@ def test_energy_r2scan_d4() -> None:
     assert approx(atomic_result.return_result, abs=thr) == -0.005001101011286166
 
 
+def test_energy_r2scan_d4s() -> None:
+    thr = 1e-9
+
+    atomic_input = qcel.models.AtomicInput(
+        molecule=get_example_molecule(),
+        driver="energy",
+        model={
+            "method": "r2scan",
+        },
+        keywords={
+            "level_hint": "d4s",
+        },
+    )
+
+    atomic_result = run_qcschema(atomic_input)
+
+    assert atomic_result.success
+    assert approx(atomic_result.return_result, abs=thr) == -0.00509785822000568
+
+
 def test_energy_r2scan_3c() -> None:
     thr = 1e-9
 
@@ -115,6 +135,29 @@ def test_energy_lh20t_d4() -> None:
     assert approx(atomic_result.return_result, abs=thr) == -0.010064263146257654
 
 
+def test_energy_lh20t_d4s() -> None:
+    thr = 1e-9
+
+    atomic_input = qcel.models.AtomicInput(
+        molecule=get_example_molecule(),
+        driver="energy",
+        model={"method": ""},
+        keywords={
+            "params_tweaks": {
+                "s8": 0.113,
+                "a1": 0.479,
+                "a2": 4.635,
+            },
+            "level_hint": "d4s",
+        },
+    )
+
+    atomic_result = run_qcschema(atomic_input)
+
+    assert atomic_result.success
+    assert approx(atomic_result.return_result, abs=thr) == -0.010252088837042048
+
+
 def test_energy_m06l_d4() -> None:
     thr = 1e-6
 
@@ -179,29 +222,7 @@ def test_gradient_b97m_d4() -> None:
     thr = 1e-9
 
     atomic_input = qcel.models.AtomicInput(
-        molecule={
-            "symbols": "C C C C C C I H H H H H S H C H H H".split(" "),
-            "geometry": [
-                [-1.42754169820131, -1.50508961850828, -1.93430551124333],
-                [+1.19860572924150, -1.66299114873979, -2.03189643761298],
-                [+2.65876001301880, +0.37736955363609, -1.23426391650599],
-                [+1.50963368042358, +2.57230374419743, -0.34128058818180],
-                [-1.12092277855371, +2.71045691257517, -0.25246348639234],
-                [-2.60071517756218, +0.67879949508239, -1.04550707592673],
-                [-2.86169588073340, +5.99660765711210, +1.08394899986031],
-                [+2.09930989272956, -3.36144811062374, -2.72237695164263],
-                [+2.64405246349916, +4.15317840474646, +0.27856972788526],
-                [+4.69864865613751, +0.26922271535391, -1.30274048619151],
-                [-4.63786461351839, +0.79856258572808, -0.96906659938432],
-                [-2.57447518692275, -3.08132039046931, -2.54875517521577],
-                [-5.88211879210329, 11.88491819358157, +2.31866455902233],
-                [-8.18022701418703, 10.95619984550779, +1.83940856333092],
-                [-5.08172874482867, 12.66714386256482, -0.92419491629867],
-                [-3.18311711399702, 13.44626574330220, -0.86977613647871],
-                [-5.07177399637298, 10.99164969235585, -2.10739192258756],
-                [-6.35955320518616, 14.08073002965080, -1.68204314084441],
-            ],
-        },
+        molecule=get_example_molecule(),
         driver="gradient",
         model={
             "method": "b97m-D4",
@@ -237,6 +258,48 @@ def test_gradient_b97m_d4() -> None:
     assert approx(atomic_result.return_result, abs=thr) == gradient
 
 
+def test_gradient_tpss_d4s() -> None:
+    thr = 1e-9
+
+    atomic_input = qcel.models.AtomicInput(
+        molecule=get_example_molecule(),
+        driver="gradient",
+        model={
+            "method": "TPSS",
+        },
+        keywords={
+            "level_hint": "d4s",
+        },
+    )
+    gradient = np.array(
+        [
+            
+            [-1.36067766e-04, -4.72731818e-04, -1.88160742e-04],
+            [+2.00334329e-04, -3.77344166e-04, -1.54443106e-04],
+            [+4.85748705e-04, -1.86465318e-04, -8.16713264e-05],
+            [+3.40248245e-04, +1.04514066e-04, +4.31391229e-05],
+            [-7.10734227e-05, +1.27160703e-04, +7.31294101e-05],
+            [-2.97997359e-04, -1.89214279e-04, -6.66535024e-05],
+            [-1.16456272e-04, +4.84627746e-05, +5.51782210e-04],
+            [+6.64898493e-05, -1.25194763e-04, -5.12043373e-05],
+            [+1.50558513e-04, +7.37719529e-05, +3.08377180e-05],
+            [+1.62329419e-04, -2.32012807e-05, -1.15835288e-05],
+            [-1.54748174e-04, -6.78861151e-05, -2.21532014e-05],
+            [-7.86055402e-05, -1.34246120e-04, -5.28699703e-05],
+            [-3.39623373e-04, +5.01841681e-04, +1.79953770e-04],
+            [-7.38516701e-05, +7.66383868e-05, +6.65527953e-05],
+            [-7.64722239e-05, +3.68207143e-04, -2.27167892e-04],
+            [-2.65824875e-05, +9.70334513e-05, -2.37042257e-05],
+            [-3.95478770e-05, +1.43973339e-04, -4.59543086e-05],
+            [+5.31710551e-06, +3.46803626e-05, -1.98288866e-05],
+        ]
+    )
+
+    atomic_result = run_qcschema(atomic_input)
+    assert atomic_result.success
+    assert approx(atomic_result.return_result, abs=thr) == gradient
+
+
 def test_gradient_tpss_d4() -> None:
     thr = 1.0e-9
 
diff --git a/python/pyproject.toml b/python/pyproject.toml
index 05056ec..9a6efef 100644
--- a/python/pyproject.toml
+++ b/python/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["meson-python", "cffi"]
+requires = ["meson-python", "cffi", "setuptools"]
 build-backend = "mesonpy"
 
 [project]
@@ -19,6 +19,7 @@ classifiers = [
   "Programming Language :: Python :: 3.10",
   "Programming Language :: Python :: 3.11",
   "Programming Language :: Python :: 3.12",
+  "Programming Language :: Python :: 3.13",
   "Topic :: Scientific/Engineering :: Chemistry",
   "Topic :: Scientific/Engineering :: Physics",
 ]
diff --git a/src/dftd4.f90 b/src/dftd4.f90
index 9394595..7347461 100644
--- a/src/dftd4.f90
+++ b/src/dftd4.f90
@@ -22,7 +22,9 @@ module dftd4
    use dftd4_numdiff, only : get_dispersion_hessian
    use dftd4_damping, only : damping_param
    use dftd4_damping_rational, only : rational_damping_param
-   use dftd4_model, only : d4_model, new_d4_model
+   use dftd4_model, only : dispersion_model
+   use dftd4_model_d4, only : d4_model, new_d4_model
+   use dftd4_model_d4s, only : d4s_model, new_d4s_model
    use dftd4_param, only : get_rational_damping
    use dftd4_version, only : get_dftd4_version
    implicit none
diff --git a/src/dftd4/CMakeLists.txt b/src/dftd4/CMakeLists.txt
index e9471bc..1f84530 100644
--- a/src/dftd4/CMakeLists.txt
+++ b/src/dftd4/CMakeLists.txt
@@ -16,6 +16,7 @@
 
 add_subdirectory("damping")
 add_subdirectory("data")
+add_subdirectory("model")
 
 set(dir "${CMAKE_CURRENT_SOURCE_DIR}")
 
diff --git a/src/dftd4/api.f90 b/src/dftd4/api.f90
index eaa7247..15db9e2 100644
--- a/src/dftd4/api.f90
+++ b/src/dftd4/api.f90
@@ -27,7 +27,9 @@ module dftd4_api
    use dftd4_damping, only : damping_param
    use dftd4_damping_rational, only : rational_damping_param
    use dftd4_disp, only : get_dispersion, get_pairwise_dispersion, get_properties
-   use dftd4_model, only : d4_model, new_d4_model
+   use dftd4_model, only : dispersion_model
+   use dftd4_model_d4, only : d4_model, new_d4_model
+   use dftd4_model_d4s, only : d4s_model, new_d4s_model
    use dftd4_numdiff, only: get_dispersion_hessian
    use dftd4_param, only : get_rational_damping
    use dftd4_utils, only : wrap_to_central_cell
@@ -45,6 +47,7 @@ module dftd4_api
 
    public :: vp_model
    public :: new_d4_model_api, custom_d4_model_api, delete_model_api
+   public :: new_d4s_model_api, custom_d4s_model_api
 
    public :: vp_param
    public :: new_rational_damping_api , load_rational_damping_api
@@ -70,7 +73,7 @@ module dftd4_api
    !> Void pointer to dispersion model
    type :: vp_model
       !> Actual payload
-      type(d4_model) :: ptr
+      class(dispersion_model), allocatable :: ptr
    end type vp_model
 
    !> Void pointer to damping parameters
@@ -310,6 +313,7 @@ function new_d4_model_api(verror, vmol) &
    type(vp_structure), pointer :: mol
    type(c_ptr) :: vdisp
    type(vp_model), pointer :: disp
+   type(d4_model), allocatable :: tmp
 
    if (debug) print'("[Info]",1x, a)', "new_d4_model"
 
@@ -324,18 +328,61 @@ function new_d4_model_api(verror, vmol) &
    end if
    call c_f_pointer(vmol, mol)
 
-   allocate(disp)
-   call new_d4_model(error%ptr, disp%ptr, mol%ptr)
+   allocate(tmp)
+   call new_d4_model(error%ptr, tmp, mol%ptr)
+
    if (allocated(error%ptr)) then
-      deallocate(disp)
+      deallocate(tmp)
    else
+      allocate(disp)
+      call move_alloc(tmp, disp%ptr)   
       vdisp = c_loc(disp)
    end if
 
 end function new_d4_model_api
 
 
-!> Create new D4 dispersion model
+!> Create new D4S dispersion model
+function new_d4s_model_api(verror, vmol) &
+      & result(vdisp) &
+      & bind(C, name=namespace//"new_d4s_model")
+   !DEC$ ATTRIBUTES DLLEXPORT :: new_d4s_model_api
+   type(c_ptr), value :: verror
+   type(vp_error), pointer :: error
+   type(c_ptr), value :: vmol
+   type(vp_structure), pointer :: mol
+   type(c_ptr) :: vdisp
+   type(vp_model), pointer :: disp
+   type(d4s_model), allocatable :: tmp
+
+   if (debug) print'("[Info]",1x, a)', "new_d4s_model"
+
+   vdisp = c_null_ptr
+
+   if (.not.c_associated(verror)) return
+   call c_f_pointer(verror, error)
+
+   if (.not.c_associated(vmol)) then
+      call fatal_error(error%ptr, "Molecular structure data is missing")
+      return
+   end if
+   call c_f_pointer(vmol, mol)
+
+   allocate(tmp)
+   call new_d4s_model(error%ptr, tmp, mol%ptr)
+
+   if (allocated(error%ptr)) then
+      deallocate(tmp)
+   else
+      allocate(disp)
+      call move_alloc(tmp, disp%ptr)   
+      vdisp = c_loc(disp)
+   end if
+
+end function new_d4s_model_api
+
+
+!> Create new custom D4 dispersion model
 function custom_d4_model_api(verror, vmol, ga, gc, wf) &
       & result(vdisp) &
       & bind(C, name=namespace//"custom_d4_model")
@@ -349,6 +396,7 @@ function custom_d4_model_api(verror, vmol, ga, gc, wf) &
    real(c_double), value, intent(in) :: ga
    real(c_double), value, intent(in) :: gc
    real(c_double), value, intent(in) :: wf
+   type(d4_model), allocatable :: tmp
 
    if (debug) print'("[Info]",1x, a)', "custom_d4_model"
 
@@ -363,17 +411,62 @@ function custom_d4_model_api(verror, vmol, ga, gc, wf) &
    end if
    call c_f_pointer(vmol, mol)
 
-   allocate(disp)
-   call new_d4_model(error%ptr, disp%ptr, mol%ptr, ga=ga, gc=gc, wf=wf)
+   allocate(tmp)
+   call new_d4_model(error%ptr, tmp, mol%ptr, ga=ga, gc=gc, wf=wf)
+
    if (allocated(error%ptr)) then
-      deallocate(disp)
+      deallocate(tmp)
    else
+      allocate(disp)
+      call move_alloc(tmp, disp%ptr)   
       vdisp = c_loc(disp)
    end if
 
 end function custom_d4_model_api
 
 
+!> Create new custom D4S dispersion model
+function custom_d4s_model_api(verror, vmol, ga, gc) &
+      & result(vdisp) &
+      & bind(C, name=namespace//"custom_d4s_model")
+   !DEC$ ATTRIBUTES DLLEXPORT :: custom_d4s_model_api
+   type(c_ptr), value :: verror
+   type(vp_error), pointer :: error
+   type(c_ptr), value :: vmol
+   type(vp_structure), pointer :: mol
+   type(c_ptr) :: vdisp
+   type(vp_model), pointer :: disp
+   real(c_double), value, intent(in) :: ga
+   real(c_double), value, intent(in) :: gc
+   type(d4s_model), allocatable :: tmp
+
+   if (debug) print'("[Info]",1x, a)', "custom_d4s_model"
+
+   vdisp = c_null_ptr
+
+   if (.not.c_associated(verror)) return
+   call c_f_pointer(verror, error)
+
+   if (.not.c_associated(vmol)) then
+      call fatal_error(error%ptr, "Molecular structure data is missing")
+      return
+   end if
+   call c_f_pointer(vmol, mol)
+
+   allocate(tmp)
+   call new_d4s_model(error%ptr, tmp, mol%ptr, ga=ga, gc=gc)
+
+   if (allocated(error%ptr)) then
+      deallocate(tmp)
+   else
+      allocate(disp)
+      call move_alloc(tmp, disp%ptr)   
+      vdisp = c_loc(disp)
+   end if
+
+end function custom_d4s_model_api
+
+
 !> Delete dispersion model
 subroutine delete_model_api(vdisp) &
       & bind(C, name=namespace//"delete_model")
diff --git a/src/dftd4/data.f90 b/src/dftd4/data.f90
index eed8dd8..54172da 100644
--- a/src/dftd4/data.f90
+++ b/src/dftd4/data.f90
@@ -20,6 +20,7 @@ module dftd4_data
    use dftd4_data_en, only : get_electronegativity
    use dftd4_data_hardness, only : get_hardness
    use dftd4_data_r4r2, only : get_r4r2_val
+   use dftd4_data_wfpair, only : get_wfpair_val
    use dftd4_data_zeff, only : get_effective_charge
    implicit none
    public
diff --git a/src/dftd4/data/CMakeLists.txt b/src/dftd4/data/CMakeLists.txt
index e6e263e..b31e46c 100644
--- a/src/dftd4/data/CMakeLists.txt
+++ b/src/dftd4/data/CMakeLists.txt
@@ -22,6 +22,7 @@ list(
   "${dir}/en.f90"
   "${dir}/hardness.f90"
   "${dir}/r4r2.f90"
+  "${dir}/wfpair.f90"
   "${dir}/zeff.f90"
 )
 
diff --git a/src/dftd4/data/meson.build b/src/dftd4/data/meson.build
index 4b952b0..5a25eca 100644
--- a/src/dftd4/data/meson.build
+++ b/src/dftd4/data/meson.build
@@ -19,5 +19,6 @@ srcs += files(
   'en.f90',
   'hardness.f90',
   'r4r2.f90',
+  'wfpair.f90',
   'zeff.f90',
 )
diff --git a/src/dftd4/data/wfpair.f90 b/src/dftd4/data/wfpair.f90
new file mode 100644
index 0000000..a412339
--- /dev/null
+++ b/src/dftd4/data/wfpair.f90
@@ -0,0 +1,3852 @@
+! This file is part of dftd4.
+! SPDX-Identifier: LGPL-3.0-or-later
+!
+! dftd4 is free software: you can redistribute it and/or modify it under
+! the terms of the Lesser GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
+!
+! dftd4 is distributed in the hope that it will be useful,
+! but WITHOUT ANY WARRANTY; without even the implied warranty of
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+! Lesser GNU General Public License for more details.
+!
+! You should have received a copy of the Lesser GNU General Public License
+! along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
+
+module dftd4_data_wfpair
+   use mctc_env, only : wp
+   use mctc_io_symbols, only : to_number
+   implicit none
+   private
+
+   public :: get_wfpair_val
+
+
+   !> Get pairwise CN weighting factors
+   interface get_wfpair_val
+      module procedure :: get_wfpair_val_num
+      module procedure :: get_wfpair_val_sym
+   end interface get_wfpair_val
+
+
+   integer, parameter :: max_elem = 118
+
+   !  Reduces weight factor exponents to improve smoothness of the potential
+   !  Head-Gordon ...
+   real(wp), protected :: weight_factors(max_elem, max_elem)
+   data weight_factors(:, 1) / &
+   & 3.673526786_wp, 6.000000000_wp, 1.133125000_wp, 0.758750000_wp, & 
+   & 2.256250000_wp, 2.978258929_wp, 3.566562500_wp, 4.395535714_wp, & 
+   & 4.983839286_wp, 5.786071429_wp, 0.651785714_wp, 0.357633929_wp, & 
+   & 1.614464286_wp, 1.881875000_wp, 2.202767857_wp, 2.496919643_wp, & 
+   & 2.817812500_wp, 3.005000000_wp, 0.330892857_wp, 0.945937500_wp, & 
+   & 0.732008929_wp, 0.812232143_wp, 0.785491071_wp, 0.919196429_wp, & 
+   & 0.544821429_wp, 0.571562500_wp, 1.079642857_wp, 1.079642857_wp, & 
+   & 1.667946429_wp, 1.293571429_wp, 1.694687500_wp, 1.828392857_wp, & 
+   & 2.069062500_wp, 2.229508929_wp, 2.416696429_wp, 2.523660714_wp, & 
+   & 0.250669643_wp, 0.865714286_wp, 0.598303571_wp, 0.812232143_wp, & 
+   & 0.785491071_wp, 1.106383929_wp, 0.384375000_wp, 0.544821429_wp, & 
+   & 1.106383929_wp, 1.133125000_wp, 1.614464286_wp, 2.684107143_wp, & 
+   & 1.587723214_wp, 1.587723214_wp, 1.774910714_wp, 1.881875000_wp, & 
+   & 2.042321429_wp, 2.069062500_wp, 0.250669643_wp, 1.159866071_wp, & 
+   & 0.544821429_wp, 1.881875000_wp, 0.464598214_wp, 0.491339286_wp, & 
+   & 0.491339286_wp, 0.491339286_wp, 0.651785714_wp, 0.625044643_wp, & 
+   & 0.544821429_wp, 0.571562500_wp, 0.518080357_wp, 0.518080357_wp, & 
+   & 0.544821429_wp, 0.571562500_wp, 0.598303571_wp, 0.972678571_wp, & 
+   & 1.026160714_wp, 0.518080357_wp, 0.464598214_wp, 0.598303571_wp, & 
+   & 2.202767857_wp, 2.042321429_wp, 1.908616071_wp, 2.256250000_wp, & 
+   & 1.614464286_wp, 1.507500000_wp, 1.667946429_wp, 1.774910714_wp, & 
+   & 1.881875000_wp, 1.935357143_wp, 0.785491071_wp, 0.812232143_wp, & 
+   & 0.785491071_wp, 1.106383929_wp, 1.079642857_wp, 0.892455357_wp, & 
+   & 1.293571429_wp, 0.758750000_wp, 1.828392857_wp, 0.945937500_wp, & 
+   & 1.079642857_wp, 2.924776786_wp, 0.732008929_wp, 1.052901786_wp, & 
+   & 1.079642857_wp, 1.106383929_wp, 1.079642857_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 2) / &
+   & 6.000000000_wp, 6.000000000_wp, 2.069062500_wp, 1.026160714_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.919196429_wp, 0.544821429_wp, & 
+   & 5.277991071_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.705267857_wp, 3.005000000_wp, & 
+   & 1.213348214_wp, 1.320312500_wp, 1.347053571_wp, 1.266830357_wp, & 
+   & 0.732008929_wp, 0.732008929_wp, 1.774910714_wp, 1.721428571_wp, & 
+   & 4.074642857_wp, 1.881875000_wp, 5.277991071_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.464598214_wp, 2.764330357_wp, 1.026160714_wp, 1.320312500_wp, & 
+   & 1.320312500_wp, 1.587723214_wp, 0.491339286_wp, 0.705267857_wp, & 
+   & 1.694687500_wp, 1.507500000_wp, 4.101383929_wp, 2.015580357_wp, & 
+   & 4.903616071_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.785491071_wp, 1.748169643_wp, & 
+   & 0.865714286_wp, 6.000000000_wp, 0.705267857_wp, 0.732008929_wp, & 
+   & 0.732008929_wp, 0.732008929_wp, 1.052901786_wp, 0.892455357_wp, & 
+   & 0.785491071_wp, 0.812232143_wp, 0.758750000_wp, 0.758750000_wp, & 
+   & 0.785491071_wp, 0.812232143_wp, 0.838973214_wp, 1.667946429_wp, & 
+   & 1.801651786_wp, 0.705267857_wp, 0.598303571_wp, 0.785491071_wp, & 
+   & 2.336473214_wp, 3.058482143_wp, 6.000000000_wp, 3.085223214_wp, & 
+   & 4.716428571_wp, 5.358214286_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 1.748169643_wp, 3.218928571_wp, & 
+   & 1.988839286_wp, 2.791071429_wp, 3.780491071_wp, 1.240089286_wp, & 
+   & 3.245669643_wp, 2.710848214_wp, 2.443437500_wp, 2.550401786_wp, & 
+   & 3.593303571_wp, 3.459598214_wp, 2.764330357_wp, 3.620044643_wp, & 
+   & 3.673526786_wp, 3.700267857_wp, 2.550401786_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 3) / &
+   & 1.133125000_wp, 2.069062500_wp, 0.250669643_wp, 0.384375000_wp, & 
+   & 0.544821429_wp, 0.812232143_wp, 0.838973214_wp, 1.026160714_wp, & 
+   & 1.373794643_wp, 1.641205357_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.357633929_wp, 0.464598214_wp, 0.464598214_wp, 0.518080357_wp, & 
+   & 0.571562500_wp, 0.678526786_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.411116071_wp, 0.330892857_wp, 0.384375000_wp, 0.437857143_wp, & 
+   & 0.464598214_wp, 0.437857143_wp, 0.491339286_wp, 0.571562500_wp, & 
+   & 0.090223214_wp, 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.411116071_wp, 0.330892857_wp, & 
+   & 0.330892857_wp, 0.384375000_wp, 0.411116071_wp, 0.411116071_wp, & 
+   & 0.437857143_wp, 0.437857143_wp, 0.090223214_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.384375000_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.250669643_wp, 0.330892857_wp, 0.357633929_wp, 0.330892857_wp, & 
+   & 0.330892857_wp, 0.437857143_wp, 0.437857143_wp, 0.411116071_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.411116071_wp, 0.384375000_wp, & 
+   & 0.384375000_wp, 0.437857143_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.143705357_wp, 0.250669643_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 4) / &
+   & 0.758750000_wp, 1.026160714_wp, 0.384375000_wp, 0.330892857_wp, & 
+   & 0.464598214_wp, 0.518080357_wp, 0.544821429_wp, 0.598303571_wp, & 
+   & 0.705267857_wp, 0.812232143_wp, 0.304151786_wp, 0.223928571_wp, & 
+   & 0.304151786_wp, 0.304151786_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.384375000_wp, 0.437857143_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.223928571_wp, 0.277410714_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.330892857_wp, 0.330892857_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.330892857_wp, & 
+   & 0.304151786_wp, 0.250669643_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.250669643_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 5) / &
+   & 2.256250000_wp, 6.000000000_wp, 0.544821429_wp, 0.464598214_wp, & 
+   & 1.480758929_wp, 1.935357143_wp, 2.630625000_wp, 3.539821429_wp, & 
+   & 4.021160714_wp, 4.876875000_wp, 0.357633929_wp, 0.197187500_wp, & 
+   & 0.972678571_wp, 1.320312500_wp, 1.881875000_wp, 2.176026786_wp, & 
+   & 2.443437500_wp, 2.523660714_wp, 0.143705357_wp, 0.437857143_wp, & 
+   & 0.330892857_wp, 0.384375000_wp, 0.304151786_wp, 0.544821429_wp, & 
+   & 0.357633929_wp, 0.357633929_wp, 0.491339286_wp, 0.518080357_wp, & 
+   & 0.972678571_wp, 0.598303571_wp, 1.052901786_wp, 1.320312500_wp, & 
+   & 1.721428571_wp, 1.988839286_wp, 2.202767857_wp, 2.176026786_wp, & 
+   & 0.116964286_wp, 0.411116071_wp, 0.330892857_wp, 0.384375000_wp, & 
+   & 0.357633929_wp, 0.518080357_wp, 0.250669643_wp, 0.357633929_wp, & 
+   & 0.464598214_wp, 0.544821429_wp, 0.945937500_wp, 0.625044643_wp, & 
+   & 0.999419643_wp, 1.106383929_wp, 1.400535714_wp, 1.667946429_wp, & 
+   & 1.748169643_wp, 1.774910714_wp, 0.116964286_wp, 0.384375000_wp, & 
+   & 0.277410714_wp, 1.560982143_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.330892857_wp, 0.304151786_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.304151786_wp, 0.491339286_wp, & 
+   & 0.464598214_wp, 0.330892857_wp, 0.304151786_wp, 0.384375000_wp, & 
+   & 0.651785714_wp, 1.159866071_wp, 1.454017857_wp, 0.919196429_wp, & 
+   & 1.855133929_wp, 0.945937500_wp, 1.213348214_wp, 1.454017857_wp, & 
+   & 1.721428571_wp, 1.641205357_wp, 0.357633929_wp, 0.384375000_wp, & 
+   & 0.357633929_wp, 0.437857143_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 0.919196429_wp, 0.330892857_wp, 0.732008929_wp, 0.411116071_wp, & 
+   & 0.357633929_wp, 0.705267857_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.464598214_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 6) / &
+   & 2.978258929_wp, 6.000000000_wp, 0.812232143_wp, 0.518080357_wp, & 
+   & 1.935357143_wp, 1.828392857_wp, 2.336473214_wp, 3.245669643_wp, & 
+   & 3.887455357_wp, 4.716428571_wp, 0.384375000_wp, 0.250669643_wp, & 
+   & 1.480758929_wp, 1.534241071_wp, 1.694687500_wp, 1.855133929_wp, & 
+   & 2.069062500_wp, 2.309732143_wp, 0.170446429_wp, 1.026160714_wp, & 
+   & 0.518080357_wp, 0.625044643_wp, 0.491339286_wp, 0.651785714_wp, & 
+   & 0.384375000_wp, 0.384375000_wp, 0.812232143_wp, 0.812232143_wp, & 
+   & 1.560982143_wp, 0.892455357_wp, 1.507500000_wp, 1.480758929_wp, & 
+   & 1.614464286_wp, 1.694687500_wp, 1.855133929_wp, 1.935357143_wp, & 
+   & 0.143705357_wp, 0.865714286_wp, 0.464598214_wp, 0.625044643_wp, & 
+   & 0.571562500_wp, 0.785491071_wp, 0.250669643_wp, 0.384375000_wp, & 
+   & 0.758750000_wp, 0.812232143_wp, 1.454017857_wp, 0.972678571_wp, & 
+   & 1.427276786_wp, 1.347053571_wp, 1.400535714_wp, 1.454017857_wp, & 
+   & 1.534241071_wp, 1.587723214_wp, 0.116964286_wp, 0.838973214_wp, & 
+   & 0.411116071_wp, 1.454017857_wp, 0.304151786_wp, 0.304151786_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.491339286_wp, 0.384375000_wp, & 
+   & 0.357633929_wp, 0.357633929_wp, 0.330892857_wp, 0.330892857_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.384375000_wp, 0.838973214_wp, & 
+   & 0.812232143_wp, 0.357633929_wp, 0.304151786_wp, 0.411116071_wp, & 
+   & 1.159866071_wp, 1.293571429_wp, 1.507500000_wp, 1.560982143_wp, & 
+   & 1.347053571_wp, 1.347053571_wp, 1.347053571_wp, 1.373794643_wp, & 
+   & 1.427276786_wp, 1.507500000_wp, 0.838973214_wp, 0.999419643_wp, & 
+   & 0.705267857_wp, 0.919196429_wp, 0.838973214_wp, 0.518080357_wp, & 
+   & 0.812232143_wp, 0.544821429_wp, 1.347053571_wp, 1.186607143_wp, & 
+   & 1.026160714_wp, 0.812232143_wp, 1.774910714_wp, 1.454017857_wp, & 
+   & 1.427276786_wp, 1.507500000_wp, 1.106383929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 7) / &
+   & 3.566562500_wp, 6.000000000_wp, 0.838973214_wp, 0.544821429_wp, & 
+   & 2.630625000_wp, 2.336473214_wp, 3.352633929_wp, 5.438437500_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.437857143_wp, 0.250669643_wp, & 
+   & 2.095803571_wp, 2.309732143_wp, 2.684107143_wp, 3.058482143_wp, & 
+   & 3.593303571_wp, 3.753750000_wp, 0.197187500_wp, 1.079642857_wp, & 
+   & 0.625044643_wp, 0.705267857_wp, 0.625044643_wp, 0.678526786_wp, & 
+   & 0.411116071_wp, 0.411116071_wp, 0.919196429_wp, 0.919196429_wp, & 
+   & 1.908616071_wp, 0.999419643_wp, 2.256250000_wp, 2.282991071_wp, & 
+   & 2.496919643_wp, 2.710848214_wp, 3.058482143_wp, 3.031741071_wp, & 
+   & 0.143705357_wp, 0.919196429_wp, 0.518080357_wp, 0.705267857_wp, & 
+   & 0.651785714_wp, 0.865714286_wp, 0.277410714_wp, 0.384375000_wp, & 
+   & 0.865714286_wp, 0.892455357_wp, 1.881875000_wp, 1.079642857_wp, & 
+   & 2.095803571_wp, 1.988839286_wp, 2.095803571_wp, 2.229508929_wp, & 
+   & 2.389955357_wp, 2.443437500_wp, 0.143705357_wp, 1.106383929_wp, & 
+   & 0.464598214_wp, 2.256250000_wp, 0.384375000_wp, 0.384375000_wp, & 
+   & 0.384375000_wp, 0.384375000_wp, 0.571562500_wp, 0.464598214_wp, & 
+   & 0.411116071_wp, 0.437857143_wp, 0.411116071_wp, 0.411116071_wp, & 
+   & 0.411116071_wp, 0.437857143_wp, 0.464598214_wp, 0.919196429_wp, & 
+   & 0.919196429_wp, 0.384375000_wp, 0.330892857_wp, 0.437857143_wp, & 
+   & 1.240089286_wp, 1.320312500_wp, 2.256250000_wp, 1.667946429_wp, & 
+   & 2.095803571_wp, 1.908616071_wp, 1.988839286_wp, 2.069062500_wp, & 
+   & 2.176026786_wp, 2.229508929_wp, 0.865714286_wp, 0.999419643_wp, & 
+   & 0.838973214_wp, 1.427276786_wp, 1.694687500_wp, 0.678526786_wp, & 
+   & 1.480758929_wp, 0.678526786_wp, 1.240089286_wp, 1.266830357_wp, & 
+   & 1.587723214_wp, 1.774910714_wp, 2.042321429_wp, 1.881875000_wp, & 
+   & 1.855133929_wp, 1.881875000_wp, 1.320312500_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 8) / &
+   & 4.395535714_wp, 6.000000000_wp, 1.026160714_wp, 0.598303571_wp, & 
+   & 3.539821429_wp, 3.245669643_wp, 5.438437500_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.518080357_wp, 0.304151786_wp, & 
+   & 3.325892857_wp, 3.780491071_wp, 5.919776786_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.223928571_wp, 1.373794643_wp, & 
+   & 0.678526786_wp, 0.785491071_wp, 0.705267857_wp, 0.758750000_wp, & 
+   & 0.437857143_wp, 0.437857143_wp, 0.999419643_wp, 0.999419643_wp, & 
+   & 2.256250000_wp, 1.079642857_wp, 3.218928571_wp, 3.940937500_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.197187500_wp, 1.052901786_wp, 0.571562500_wp, 0.758750000_wp, & 
+   & 0.732008929_wp, 0.919196429_wp, 0.304151786_wp, 0.437857143_wp, & 
+   & 0.945937500_wp, 0.945937500_wp, 2.309732143_wp, 1.159866071_wp, & 
+   & 3.058482143_wp, 3.459598214_wp, 5.545401786_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.170446429_wp, 1.159866071_wp, & 
+   & 0.491339286_wp, 6.000000000_wp, 0.411116071_wp, 0.411116071_wp, & 
+   & 0.411116071_wp, 0.437857143_wp, 0.625044643_wp, 0.518080357_wp, & 
+   & 0.464598214_wp, 0.464598214_wp, 0.437857143_wp, 0.437857143_wp, & 
+   & 0.464598214_wp, 0.464598214_wp, 0.491339286_wp, 0.972678571_wp, & 
+   & 0.999419643_wp, 0.411116071_wp, 0.357633929_wp, 0.491339286_wp, & 
+   & 1.347053571_wp, 1.480758929_wp, 4.903616071_wp, 1.801651786_wp, & 
+   & 2.951517857_wp, 2.924776786_wp, 4.903616071_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.945937500_wp, 2.496919643_wp, & 
+   & 1.052901786_wp, 1.587723214_wp, 2.042321429_wp, 0.732008929_wp, & 
+   & 1.828392857_wp, 0.812232143_wp, 1.400535714_wp, 1.507500000_wp, & 
+   & 2.149285714_wp, 2.042321429_wp, 0.732008929_wp, 2.550401786_wp, & 
+   & 2.523660714_wp, 2.470178571_wp, 1.507500000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 9) / &
+   & 4.983839286_wp, 6.000000000_wp, 1.373794643_wp, 0.705267857_wp, & 
+   & 4.021160714_wp, 3.887455357_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.625044643_wp, 0.357633929_wp, & 
+   & 3.620044643_wp, 4.181607143_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.384375000_wp, 1.774910714_wp, & 
+   & 0.785491071_wp, 0.892455357_wp, 0.838973214_wp, 0.919196429_wp, & 
+   & 0.518080357_wp, 0.518080357_wp, 1.159866071_wp, 1.159866071_wp, & 
+   & 2.630625000_wp, 1.240089286_wp, 3.780491071_wp, 4.368794643_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.250669643_wp, 1.293571429_wp, 0.651785714_wp, 0.892455357_wp, & 
+   & 0.838973214_wp, 1.052901786_wp, 0.357633929_wp, 0.491339286_wp, & 
+   & 1.133125000_wp, 1.052901786_wp, 2.630625000_wp, 1.347053571_wp, & 
+   & 3.566562500_wp, 3.753750000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.384375000_wp, 1.347053571_wp, & 
+   & 0.571562500_wp, 6.000000000_wp, 0.464598214_wp, 0.491339286_wp, & 
+   & 0.491339286_wp, 0.491339286_wp, 0.705267857_wp, 0.598303571_wp, & 
+   & 0.544821429_wp, 0.544821429_wp, 0.518080357_wp, 0.518080357_wp, & 
+   & 0.518080357_wp, 0.544821429_wp, 0.571562500_wp, 1.106383929_wp, & 
+   & 1.159866071_wp, 0.491339286_wp, 0.437857143_wp, 0.571562500_wp, & 
+   & 1.560982143_wp, 1.774910714_wp, 5.625625000_wp, 2.095803571_wp, & 
+   & 3.406116071_wp, 3.165446429_wp, 5.331473214_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 1.106383929_wp, 2.496919643_wp, & 
+   & 1.400535714_wp, 1.855133929_wp, 2.389955357_wp, 0.865714286_wp, & 
+   & 2.149285714_wp, 1.801651786_wp, 1.748169643_wp, 1.694687500_wp, & 
+   & 2.309732143_wp, 2.336473214_wp, 2.122544643_wp, 2.550401786_wp, & 
+   & 2.523660714_wp, 2.603883929_wp, 1.774910714_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 10) / &
+   & 5.786071429_wp, 6.000000000_wp, 1.641205357_wp, 0.812232143_wp, & 
+   & 4.876875000_wp, 4.716428571_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.732008929_wp, 0.437857143_wp, & 
+   & 4.235089286_wp, 5.277991071_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.678526786_wp, 2.550401786_wp, & 
+   & 0.919196429_wp, 1.026160714_wp, 0.999419643_wp, 1.079642857_wp, & 
+   & 0.598303571_wp, 0.571562500_wp, 1.347053571_wp, 1.320312500_wp, & 
+   & 3.058482143_wp, 1.427276786_wp, 4.181607143_wp, 5.652366071_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.357633929_wp, 2.149285714_wp, 0.758750000_wp, 1.026160714_wp, & 
+   & 0.999419643_wp, 1.186607143_wp, 0.384375000_wp, 0.544821429_wp, & 
+   & 1.293571429_wp, 1.186607143_wp, 3.085223214_wp, 1.534241071_wp, & 
+   & 3.940937500_wp, 4.876875000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 1.079642857_wp, 1.400535714_wp, & 
+   & 0.651785714_wp, 6.000000000_wp, 0.544821429_wp, 0.544821429_wp, & 
+   & 0.571562500_wp, 0.571562500_wp, 0.812232143_wp, 0.678526786_wp, & 
+   & 0.598303571_wp, 0.625044643_wp, 0.571562500_wp, 0.598303571_wp, & 
+   & 0.598303571_wp, 0.625044643_wp, 0.651785714_wp, 1.240089286_wp, & 
+   & 1.373794643_wp, 0.544821429_wp, 0.491339286_wp, 0.625044643_wp, & 
+   & 1.774910714_wp, 2.095803571_wp, 6.000000000_wp, 2.363214286_wp, & 
+   & 3.780491071_wp, 3.940937500_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 1.320312500_wp, 2.871294643_wp, & 
+   & 1.534241071_wp, 2.095803571_wp, 2.737589286_wp, 0.919196429_wp, & 
+   & 2.470178571_wp, 2.042321429_wp, 1.935357143_wp, 1.935357143_wp, & 
+   & 2.844553571_wp, 2.710848214_wp, 2.336473214_wp, 3.031741071_wp, & 
+   & 3.031741071_wp, 3.005000000_wp, 1.935357143_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 11) / &
+   & 0.651785714_wp, 0.919196429_wp, 0.250669643_wp, 0.304151786_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.437857143_wp, 0.518080357_wp, & 
+   & 0.625044643_wp, 0.732008929_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 12) / &
+   & 0.357633929_wp, 0.544821429_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.250669643_wp, 0.304151786_wp, & 
+   & 0.357633929_wp, 0.437857143_wp, 0.250669643_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.036741071_wp, 0.063482143_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 13) / &
+   & 1.614464286_wp, 5.277991071_wp, 0.357633929_wp, 0.304151786_wp, & 
+   & 0.972678571_wp, 1.480758929_wp, 2.095803571_wp, 3.325892857_wp, & 
+   & 3.620044643_wp, 4.235089286_wp, 0.250669643_wp, 0.116964286_wp, & 
+   & 1.855133929_wp, 0.865714286_wp, 2.176026786_wp, 2.309732143_wp, & 
+   & 2.470178571_wp, 2.657366071_wp, 0.090223214_wp, 0.277410714_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.170446429_wp, 0.357633929_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.571562500_wp, 0.384375000_wp, 1.801651786_wp, 0.945937500_wp, & 
+   & 2.069062500_wp, 2.176026786_wp, 2.256250000_wp, 2.389955357_wp, & 
+   & 0.063482143_wp, 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.330892857_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.304151786_wp, 0.357633929_wp, 0.571562500_wp, 0.384375000_wp, & 
+   & 1.667946429_wp, 0.625044643_wp, 1.935357143_wp, 1.988839286_wp, & 
+   & 2.042321429_wp, 2.149285714_wp, 0.063482143_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 1.988839286_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.223928571_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.384375000_wp, 0.651785714_wp, 1.293571429_wp, 0.544821429_wp, & 
+   & 0.437857143_wp, 0.491339286_wp, 1.908616071_wp, 1.908616071_wp, & 
+   & 1.988839286_wp, 2.069062500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 1.079642857_wp, 0.197187500_wp, 0.357633929_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.304151786_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.277410714_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 14) / &
+   & 1.881875000_wp, 6.000000000_wp, 0.464598214_wp, 0.304151786_wp, & 
+   & 1.320312500_wp, 1.534241071_wp, 2.309732143_wp, 3.780491071_wp, & 
+   & 4.181607143_wp, 5.277991071_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.865714286_wp, 1.133125000_wp, 1.908616071_wp, 2.496919643_wp, & 
+   & 2.844553571_wp, 2.844553571_wp, 0.090223214_wp, 0.357633929_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.223928571_wp, 0.411116071_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.384375000_wp, 0.437857143_wp, & 
+   & 0.812232143_wp, 0.491339286_wp, 1.801651786_wp, 1.186607143_wp, & 
+   & 1.962098214_wp, 2.389955357_wp, 2.523660714_wp, 2.309732143_wp, & 
+   & 0.063482143_wp, 0.330892857_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.411116071_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.357633929_wp, 0.437857143_wp, 0.812232143_wp, 0.491339286_wp, & 
+   & 1.855133929_wp, 0.945937500_wp, 1.427276786_wp, 1.962098214_wp, & 
+   & 2.202767857_wp, 1.908616071_wp, 0.063482143_wp, 0.330892857_wp, & 
+   & 0.223928571_wp, 1.667946429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.411116071_wp, & 
+   & 0.384375000_wp, 0.223928571_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.491339286_wp, 0.785491071_wp, 1.373794643_wp, 0.732008929_wp, & 
+   & 1.721428571_wp, 0.785491071_wp, 1.213348214_wp, 1.694687500_wp, & 
+   & 2.042321429_wp, 1.801651786_wp, 0.304151786_wp, 0.304151786_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.732008929_wp, 0.357633929_wp, & 
+   & 0.785491071_wp, 0.250669643_wp, 0.625044643_wp, 0.330892857_wp, & 
+   & 0.250669643_wp, 0.437857143_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.357633929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 15) / &
+   & 2.202767857_wp, 6.000000000_wp, 0.464598214_wp, 0.304151786_wp, & 
+   & 1.881875000_wp, 1.694687500_wp, 2.684107143_wp, 5.919776786_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.250669643_wp, 0.143705357_wp, & 
+   & 2.176026786_wp, 1.908616071_wp, 2.630625000_wp, 3.566562500_wp, & 
+   & 3.887455357_wp, 4.342053571_wp, 0.090223214_wp, 0.491339286_wp, & 
+   & 0.304151786_wp, 0.357633929_wp, 0.250669643_wp, 0.411116071_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.464598214_wp, 0.518080357_wp, & 
+   & 1.106383929_wp, 0.571562500_wp, 2.015580357_wp, 1.962098214_wp, & 
+   & 2.630625000_wp, 3.218928571_wp, 3.432857143_wp, 3.727008929_wp, & 
+   & 0.090223214_wp, 0.437857143_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.330892857_wp, 0.491339286_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.437857143_wp, 0.518080357_wp, 1.133125000_wp, 0.598303571_wp, & 
+   & 1.962098214_wp, 1.667946429_wp, 2.470178571_wp, 2.844553571_wp, & 
+   & 2.978258929_wp, 3.165446429_wp, 0.063482143_wp, 0.437857143_wp, & 
+   & 0.250669643_wp, 2.791071429_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.304151786_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, 0.518080357_wp, & 
+   & 0.464598214_wp, 0.223928571_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.625044643_wp, 0.812232143_wp, 2.309732143_wp, 0.892455357_wp, & 
+   & 1.774910714_wp, 1.454017857_wp, 2.416696429_wp, 2.710848214_wp, & 
+   & 2.791071429_wp, 2.951517857_wp, 0.411116071_wp, 0.437857143_wp, & 
+   & 0.357633929_wp, 0.972678571_wp, 0.919196429_wp, 0.384375000_wp, & 
+   & 0.625044643_wp, 0.330892857_wp, 0.838973214_wp, 0.411116071_wp, & 
+   & 0.999419643_wp, 0.518080357_wp, 0.304151786_wp, 0.304151786_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.437857143_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 16) / &
+   & 2.496919643_wp, 6.000000000_wp, 0.518080357_wp, 0.330892857_wp, & 
+   & 2.176026786_wp, 1.855133929_wp, 3.058482143_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.277410714_wp, 0.143705357_wp, & 
+   & 2.309732143_wp, 2.496919643_wp, 3.566562500_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.116964286_wp, 0.571562500_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.304151786_wp, 0.437857143_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.544821429_wp, 0.571562500_wp, & 
+   & 1.293571429_wp, 0.625044643_wp, 2.122544643_wp, 2.657366071_wp, & 
+   & 3.860714286_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.090223214_wp, 0.518080357_wp, 0.330892857_wp, 0.411116071_wp, & 
+   & 0.384375000_wp, 0.544821429_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.518080357_wp, 0.571562500_wp, 1.320312500_wp, 0.678526786_wp, & 
+   & 2.069062500_wp, 2.256250000_wp, 3.673526786_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.598303571_wp, & 
+   & 0.304151786_wp, 6.000000000_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.357633929_wp, 0.304151786_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.277410714_wp, 0.571562500_wp, & 
+   & 0.518080357_wp, 0.250669643_wp, 0.223928571_wp, 0.277410714_wp, & 
+   & 0.732008929_wp, 0.865714286_wp, 3.646785714_wp, 0.999419643_wp, & 
+   & 1.881875000_wp, 1.988839286_wp, 3.753750000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.491339286_wp, 0.518080357_wp, & 
+   & 0.437857143_wp, 0.999419643_wp, 1.186607143_wp, 0.437857143_wp, & 
+   & 0.758750000_wp, 0.357633929_wp, 0.919196429_wp, 0.491339286_wp, & 
+   & 1.133125000_wp, 0.598303571_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 1.962098214_wp, 1.721428571_wp, 0.518080357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 17) / &
+   & 2.817812500_wp, 6.000000000_wp, 0.571562500_wp, 0.384375000_wp, & 
+   & 2.443437500_wp, 2.069062500_wp, 3.593303571_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.304151786_wp, 0.170446429_wp, & 
+   & 2.470178571_wp, 2.844553571_wp, 3.887455357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.116964286_wp, 0.651785714_wp, & 
+   & 0.411116071_wp, 0.464598214_wp, 0.357633929_wp, 0.491339286_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.598303571_wp, 0.625044643_wp, & 
+   & 1.480758929_wp, 0.705267857_wp, 2.309732143_wp, 3.085223214_wp, & 
+   & 4.208348214_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.090223214_wp, 0.598303571_wp, 0.384375000_wp, 0.464598214_wp, & 
+   & 0.437857143_wp, 0.598303571_wp, 0.197187500_wp, 0.304151786_wp, & 
+   & 0.571562500_wp, 0.625044643_wp, 1.507500000_wp, 0.732008929_wp, & 
+   & 2.256250000_wp, 2.630625000_wp, 4.021160714_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.090223214_wp, 0.838973214_wp, & 
+   & 0.330892857_wp, 6.000000000_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.384375000_wp, 0.330892857_wp, & 
+   & 0.304151786_wp, 0.304151786_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, 0.651785714_wp, & 
+   & 0.598303571_wp, 0.277410714_wp, 0.250669643_wp, 0.330892857_wp, & 
+   & 0.838973214_wp, 0.945937500_wp, 4.689687500_wp, 1.133125000_wp, & 
+   & 2.069062500_wp, 2.256250000_wp, 4.101383929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.571562500_wp, 2.176026786_wp, & 
+   & 0.518080357_wp, 1.052901786_wp, 1.293571429_wp, 0.518080357_wp, & 
+   & 0.865714286_wp, 0.437857143_wp, 1.133125000_wp, 0.571562500_wp, & 
+   & 1.266830357_wp, 0.732008929_wp, 0.411116071_wp, 0.945937500_wp, & 
+   & 1.988839286_wp, 1.881875000_wp, 0.625044643_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 18) / &
+   & 3.005000000_wp, 6.000000000_wp, 0.678526786_wp, 0.437857143_wp, & 
+   & 2.523660714_wp, 2.309732143_wp, 3.753750000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.330892857_wp, 0.197187500_wp, & 
+   & 2.657366071_wp, 2.844553571_wp, 4.342053571_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.143705357_wp, 0.758750000_wp, & 
+   & 0.464598214_wp, 0.544821429_wp, 0.411116071_wp, 0.544821429_wp, & 
+   & 0.330892857_wp, 0.330892857_wp, 0.678526786_wp, 0.705267857_wp, & 
+   & 1.614464286_wp, 0.785491071_wp, 2.550401786_wp, 2.898035714_wp, & 
+   & 4.636205357_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.116964286_wp, 0.678526786_wp, 0.411116071_wp, 0.544821429_wp, & 
+   & 0.491339286_wp, 0.678526786_wp, 0.223928571_wp, 0.330892857_wp, & 
+   & 0.651785714_wp, 0.705267857_wp, 1.614464286_wp, 0.838973214_wp, & 
+   & 2.470178571_wp, 2.470178571_wp, 4.475758929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.090223214_wp, 0.945937500_wp, & 
+   & 0.357633929_wp, 6.000000000_wp, 0.304151786_wp, 0.304151786_wp, & 
+   & 0.304151786_wp, 0.304151786_wp, 0.437857143_wp, 0.384375000_wp, & 
+   & 0.330892857_wp, 0.330892857_wp, 0.330892857_wp, 0.330892857_wp, & 
+   & 0.330892857_wp, 0.330892857_wp, 0.357633929_wp, 0.705267857_wp, & 
+   & 0.678526786_wp, 0.304151786_wp, 0.277410714_wp, 0.357633929_wp, & 
+   & 0.945937500_wp, 1.079642857_wp, 3.727008929_wp, 1.240089286_wp, & 
+   & 2.309732143_wp, 2.229508929_wp, 3.807232143_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.651785714_wp, 2.363214286_wp, & 
+   & 0.598303571_wp, 1.159866071_wp, 1.454017857_wp, 0.544821429_wp, & 
+   & 1.026160714_wp, 0.491339286_wp, 1.159866071_wp, 0.651785714_wp, & 
+   & 1.373794643_wp, 0.892455357_wp, 0.464598214_wp, 1.320312500_wp, & 
+   & 2.149285714_wp, 1.935357143_wp, 0.732008929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 19) / &
+   & 0.330892857_wp, 0.705267857_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.384375000_wp, 0.678526786_wp, 0.170446429_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.036741071_wp, 0.063482143_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.036741071_wp, 0.063482143_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.090223214_wp, 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.036741071_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.036741071_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 20) / &
+   & 0.945937500_wp, 3.005000000_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.437857143_wp, 1.026160714_wp, 1.079642857_wp, 1.373794643_wp, & 
+   & 1.774910714_wp, 2.550401786_wp, 0.197187500_wp, 0.116964286_wp, & 
+   & 0.277410714_wp, 0.357633929_wp, 0.491339286_wp, 0.571562500_wp, & 
+   & 0.651785714_wp, 0.758750000_wp, 0.063482143_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.330892857_wp, 0.277410714_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.437857143_wp, 0.491339286_wp, 0.544821429_wp, 0.598303571_wp, & 
+   & 0.036741071_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.223928571_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.330892857_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 0.437857143_wp, 0.464598214_wp, 0.036741071_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.384375000_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.357633929_wp, 0.411116071_wp, 0.330892857_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.411116071_wp, 0.411116071_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 21) / &
+   & 0.732008929_wp, 1.213348214_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.330892857_wp, 0.518080357_wp, 0.625044643_wp, 0.678526786_wp, & 
+   & 0.785491071_wp, 0.919196429_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.411116071_wp, 0.464598214_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, 0.384375000_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.250669643_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 22) / &
+   & 0.812232143_wp, 1.320312500_wp, 0.143705357_wp, 0.277410714_wp, & 
+   & 0.384375000_wp, 0.625044643_wp, 0.705267857_wp, 0.785491071_wp, & 
+   & 0.892455357_wp, 1.026160714_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 0.464598214_wp, 0.544821429_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, 0.277410714_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.384375000_wp, 0.437857143_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.277410714_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.277410714_wp, 0.304151786_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 23) / &
+   & 0.785491071_wp, 1.347053571_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.304151786_wp, 0.491339286_wp, 0.625044643_wp, 0.705267857_wp, & 
+   & 0.838973214_wp, 0.999419643_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 24) / &
+   & 0.919196429_wp, 1.266830357_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.544821429_wp, 0.651785714_wp, 0.678526786_wp, 0.758750000_wp, & 
+   & 0.919196429_wp, 1.079642857_wp, 0.250669643_wp, 0.116964286_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.411116071_wp, 0.437857143_wp, & 
+   & 0.491339286_wp, 0.544821429_wp, 0.090223214_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.384375000_wp, 0.330892857_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.437857143_wp, 0.464598214_wp, & 
+   & 0.063482143_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.277410714_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.384375000_wp, 0.330892857_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.357633929_wp, 0.357633929_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.063482143_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.330892857_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.304151786_wp, 0.384375000_wp, 0.384375000_wp, 0.384375000_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.330892857_wp, 0.330892857_wp, & 
+   & 0.357633929_wp, 0.357633929_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.250669643_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 25) / &
+   & 0.544821429_wp, 0.732008929_wp, 0.277410714_wp, 0.223928571_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.411116071_wp, 0.437857143_wp, & 
+   & 0.518080357_wp, 0.598303571_wp, 0.250669643_wp, 0.143705357_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 26) / &
+   & 0.571562500_wp, 0.732008929_wp, 0.304151786_wp, 0.250669643_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.411116071_wp, 0.437857143_wp, & 
+   & 0.518080357_wp, 0.571562500_wp, 0.250669643_wp, 0.143705357_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.090223214_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 27) / &
+   & 1.079642857_wp, 1.774910714_wp, 0.277410714_wp, 0.330892857_wp, & 
+   & 0.491339286_wp, 0.812232143_wp, 0.919196429_wp, 0.999419643_wp, & 
+   & 1.159866071_wp, 1.347053571_wp, 0.250669643_wp, 0.143705357_wp, & 
+   & 0.304151786_wp, 0.384375000_wp, 0.464598214_wp, 0.544821429_wp, & 
+   & 0.598303571_wp, 0.678526786_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.357633929_wp, 0.330892857_wp, 0.330892857_wp, 0.384375000_wp, & 
+   & 0.437857143_wp, 0.464598214_wp, 0.518080357_wp, 0.544821429_wp, & 
+   & 0.090223214_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.170446429_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.357633929_wp, 0.304151786_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, 0.384375000_wp, & 
+   & 0.411116071_wp, 0.437857143_wp, 0.063482143_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.384375000_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.223928571_wp, 0.304151786_wp, & 
+   & 0.304151786_wp, 0.357633929_wp, 0.411116071_wp, 0.357633929_wp, & 
+   & 0.304151786_wp, 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.277410714_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.250669643_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 28) / &
+   & 1.079642857_wp, 1.721428571_wp, 0.277410714_wp, 0.330892857_wp, & 
+   & 0.518080357_wp, 0.812232143_wp, 0.919196429_wp, 0.999419643_wp, & 
+   & 1.159866071_wp, 1.320312500_wp, 0.250669643_wp, 0.143705357_wp, & 
+   & 0.330892857_wp, 0.437857143_wp, 0.518080357_wp, 0.571562500_wp, & 
+   & 0.625044643_wp, 0.705267857_wp, 0.090223214_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.304151786_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.411116071_wp, 0.330892857_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.464598214_wp, 0.518080357_wp, 0.544821429_wp, 0.598303571_wp, & 
+   & 0.090223214_wp, 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.277410714_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.384375000_wp, 0.330892857_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.411116071_wp, 0.437857143_wp, & 
+   & 0.464598214_wp, 0.491339286_wp, 0.063482143_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.411116071_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.411116071_wp, 0.437857143_wp, 0.411116071_wp, & 
+   & 0.330892857_wp, 0.330892857_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.411116071_wp, 0.437857143_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.277410714_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.277410714_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 29) / &
+   & 1.667946429_wp, 4.074642857_wp, 0.411116071_wp, 0.304151786_wp, & 
+   & 0.972678571_wp, 1.560982143_wp, 1.908616071_wp, 2.256250000_wp, & 
+   & 2.630625000_wp, 3.058482143_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.571562500_wp, 0.812232143_wp, 1.106383929_wp, 1.293571429_wp, & 
+   & 1.480758929_wp, 1.614464286_wp, 0.090223214_wp, 0.330892857_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.197187500_wp, 0.384375000_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 0.678526786_wp, 0.464598214_wp, 0.651785714_wp, 0.812232143_wp, & 
+   & 1.026160714_wp, 1.159866071_wp, 1.293571429_wp, 1.320312500_wp, & 
+   & 0.063482143_wp, 0.304151786_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.384375000_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.678526786_wp, 0.464598214_wp, & 
+   & 0.571562500_wp, 0.705267857_wp, 0.838973214_wp, 0.945937500_wp, & 
+   & 1.026160714_wp, 1.079642857_wp, 0.063482143_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 0.892455357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.357633929_wp, & 
+   & 0.357633929_wp, 0.197187500_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.464598214_wp, 0.732008929_wp, 0.892455357_wp, 2.069062500_wp, & 
+   & 0.571562500_wp, 0.598303571_wp, 0.758750000_wp, 0.865714286_wp, & 
+   & 0.945937500_wp, 0.972678571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.250669643_wp, 0.223928571_wp, 0.304151786_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.464598214_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 0.357633929_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.330892857_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 30) / &
+   & 1.293571429_wp, 1.881875000_wp, 0.330892857_wp, 0.330892857_wp, & 
+   & 0.598303571_wp, 0.892455357_wp, 0.999419643_wp, 1.079642857_wp, & 
+   & 1.240089286_wp, 1.427276786_wp, 0.277410714_wp, 0.143705357_wp, & 
+   & 0.384375000_wp, 0.491339286_wp, 0.571562500_wp, 0.625044643_wp, & 
+   & 0.705267857_wp, 0.785491071_wp, 0.090223214_wp, 0.277410714_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, 0.330892857_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.330892857_wp, 0.330892857_wp, & 
+   & 0.464598214_wp, 0.384375000_wp, 0.437857143_wp, 0.464598214_wp, & 
+   & 0.518080357_wp, 0.571562500_wp, 0.598303571_wp, 0.651785714_wp, & 
+   & 0.090223214_wp, 0.250669643_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.170446429_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.437857143_wp, 0.384375000_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.464598214_wp, 0.491339286_wp, & 
+   & 0.518080357_wp, 0.544821429_wp, 0.063482143_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.464598214_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.223928571_wp, 0.223928571_wp, 0.277410714_wp, & 
+   & 0.357633929_wp, 0.464598214_wp, 0.491339286_wp, 0.437857143_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.437857143_wp, 0.437857143_wp, & 
+   & 0.464598214_wp, 0.491339286_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.330892857_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.304151786_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.304151786_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 31) / &
+   & 1.694687500_wp, 5.277991071_wp, 0.384375000_wp, 0.277410714_wp, & 
+   & 1.052901786_wp, 1.507500000_wp, 2.256250000_wp, 3.218928571_wp, & 
+   & 3.780491071_wp, 4.181607143_wp, 0.197187500_wp, 0.116964286_wp, & 
+   & 1.801651786_wp, 1.801651786_wp, 2.015580357_wp, 2.122544643_wp, & 
+   & 2.309732143_wp, 2.550401786_wp, 0.063482143_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, 0.357633929_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.330892857_wp, 0.384375000_wp, & 
+   & 0.651785714_wp, 0.437857143_wp, 1.694687500_wp, 1.828392857_wp, & 
+   & 1.855133929_wp, 1.962098214_wp, 2.042321429_wp, 2.229508929_wp, & 
+   & 0.063482143_wp, 0.277410714_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.357633929_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.304151786_wp, 0.384375000_wp, 0.651785714_wp, 0.437857143_wp, & 
+   & 1.560982143_wp, 0.758750000_wp, 1.774910714_wp, 1.801651786_wp, & 
+   & 1.801651786_wp, 1.962098214_wp, 0.063482143_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 1.801651786_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.330892857_wp, & 
+   & 0.304151786_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.411116071_wp, 0.705267857_wp, 1.801651786_wp, 0.625044643_wp, & 
+   & 0.544821429_wp, 0.571562500_wp, 1.774910714_wp, 1.721428571_wp, & 
+   & 1.748169643_wp, 1.881875000_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.197187500_wp, 0.304151786_wp, & 
+   & 1.855133929_wp, 0.223928571_wp, 0.437857143_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.330892857_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 1.908616071_wp, 0.304151786_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 32) / &
+   & 1.828392857_wp, 6.000000000_wp, 0.437857143_wp, 0.304151786_wp, & 
+   & 1.320312500_wp, 1.480758929_wp, 2.282991071_wp, 3.940937500_wp, & 
+   & 4.368794643_wp, 5.652366071_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.945937500_wp, 1.186607143_wp, 1.962098214_wp, 2.657366071_wp, & 
+   & 3.085223214_wp, 2.898035714_wp, 0.090223214_wp, 0.357633929_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.197187500_wp, 0.411116071_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.812232143_wp, 0.464598214_wp, 1.828392857_wp, 1.320312500_wp, & 
+   & 1.988839286_wp, 2.577142857_wp, 2.764330357_wp, 2.416696429_wp, & 
+   & 0.063482143_wp, 0.330892857_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.411116071_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.812232143_wp, 0.491339286_wp, & 
+   & 1.855133929_wp, 1.026160714_wp, 1.560982143_wp, 1.908616071_wp, & 
+   & 2.363214286_wp, 1.988839286_wp, 0.063482143_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 1.774910714_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.384375000_wp, & 
+   & 0.357633929_wp, 0.223928571_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.491339286_wp, 0.785491071_wp, 1.427276786_wp, 0.732008929_wp, & 
+   & 1.694687500_wp, 0.838973214_wp, 1.373794643_wp, 1.801651786_wp, & 
+   & 2.256250000_wp, 1.855133929_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.277410714_wp, 0.892455357_wp, 0.865714286_wp, 0.330892857_wp, & 
+   & 0.277410714_wp, 0.250669643_wp, 0.625044643_wp, 0.330892857_wp, & 
+   & 0.223928571_wp, 0.411116071_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.357633929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 33) / &
+   & 2.069062500_wp, 6.000000000_wp, 0.464598214_wp, 0.277410714_wp, & 
+   & 1.721428571_wp, 1.614464286_wp, 2.496919643_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 2.069062500_wp, 1.962098214_wp, 2.630625000_wp, 3.860714286_wp, & 
+   & 4.208348214_wp, 4.636205357_wp, 0.090223214_wp, 0.437857143_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.250669643_wp, 0.384375000_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.437857143_wp, 0.464598214_wp, & 
+   & 1.026160714_wp, 0.518080357_wp, 1.855133929_wp, 1.988839286_wp, & 
+   & 2.684107143_wp, 3.486339286_wp, 3.700267857_wp, 3.994419643_wp, & 
+   & 0.063482143_wp, 0.384375000_wp, 0.277410714_wp, 0.330892857_wp, & 
+   & 0.304151786_wp, 0.464598214_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.411116071_wp, 0.464598214_wp, 1.052901786_wp, 0.571562500_wp, & 
+   & 1.828392857_wp, 1.641205357_wp, 2.523660714_wp, 3.111964286_wp, & 
+   & 3.218928571_wp, 3.406116071_wp, 0.063482143_wp, 0.384375000_wp, & 
+   & 0.250669643_wp, 3.085223214_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.464598214_wp, & 
+   & 0.437857143_wp, 0.223928571_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.598303571_wp, 0.758750000_wp, 2.389955357_wp, 0.838973214_wp, & 
+   & 1.667946429_wp, 1.507500000_wp, 2.496919643_wp, 2.951517857_wp, & 
+   & 3.031741071_wp, 3.192187500_wp, 0.357633929_wp, 2.176026786_wp, & 
+   & 0.330892857_wp, 0.919196429_wp, 0.945937500_wp, 0.384375000_wp, & 
+   & 0.411116071_wp, 0.304151786_wp, 0.838973214_wp, 0.384375000_wp, & 
+   & 0.999419643_wp, 0.464598214_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 1.935357143_wp, 0.357633929_wp, 0.411116071_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 34) / &
+   & 2.229508929_wp, 6.000000000_wp, 0.437857143_wp, 0.304151786_wp, & 
+   & 1.988839286_wp, 1.694687500_wp, 2.710848214_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 2.176026786_wp, 2.389955357_wp, 3.218928571_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.090223214_wp, 0.491339286_wp, & 
+   & 0.304151786_wp, 0.357633929_wp, 0.250669643_wp, 0.411116071_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.464598214_wp, 0.518080357_wp, & 
+   & 1.159866071_wp, 0.571562500_wp, 1.962098214_wp, 2.577142857_wp, & 
+   & 3.486339286_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.090223214_wp, 0.464598214_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.330892857_wp, 0.491339286_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.437857143_wp, 0.518080357_wp, 1.213348214_wp, 0.598303571_wp, & 
+   & 1.935357143_wp, 2.176026786_wp, 3.325892857_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.491339286_wp, & 
+   & 0.250669643_wp, 6.000000000_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.304151786_wp, 0.277410714_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, 0.544821429_wp, & 
+   & 0.464598214_wp, 0.223928571_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.625044643_wp, 0.758750000_wp, 3.833973214_wp, 0.892455357_wp, & 
+   & 1.774910714_wp, 1.881875000_wp, 3.379375000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.411116071_wp, 0.464598214_wp, & 
+   & 0.384375000_wp, 0.892455357_wp, 0.892455357_wp, 0.411116071_wp, & 
+   & 0.571562500_wp, 0.330892857_wp, 0.919196429_wp, 0.411116071_wp, & 
+   & 1.026160714_wp, 0.491339286_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 1.881875000_wp, 1.694687500_wp, 0.464598214_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 35) / &
+   & 2.416696429_wp, 6.000000000_wp, 0.491339286_wp, 0.330892857_wp, & 
+   & 2.202767857_wp, 1.855133929_wp, 3.058482143_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.250669643_wp, 0.143705357_wp, & 
+   & 2.256250000_wp, 2.523660714_wp, 3.432857143_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.090223214_wp, 0.544821429_wp, & 
+   & 0.330892857_wp, 0.384375000_wp, 0.304151786_wp, 0.437857143_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.518080357_wp, 0.544821429_wp, & 
+   & 1.293571429_wp, 0.598303571_wp, 2.042321429_wp, 2.764330357_wp, & 
+   & 3.700267857_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.090223214_wp, 0.491339286_wp, 0.330892857_wp, 0.384375000_wp, & 
+   & 0.384375000_wp, 0.518080357_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.491339286_wp, 0.544821429_wp, 1.320312500_wp, 0.651785714_wp, & 
+   & 1.988839286_wp, 2.577142857_wp, 3.539821429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.598303571_wp, & 
+   & 0.277410714_wp, 6.000000000_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.330892857_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, 0.571562500_wp, & 
+   & 0.518080357_wp, 0.223928571_wp, 0.223928571_wp, 0.277410714_wp, & 
+   & 0.705267857_wp, 0.838973214_wp, 5.572142857_wp, 0.972678571_wp, & 
+   & 1.855133929_wp, 2.149285714_wp, 3.620044643_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.464598214_wp, 0.518080357_wp, & 
+   & 0.411116071_wp, 0.945937500_wp, 0.999419643_wp, 0.464598214_wp, & 
+   & 0.678526786_wp, 0.357633929_wp, 0.999419643_wp, 0.464598214_wp, & 
+   & 0.999419643_wp, 0.544821429_wp, 0.330892857_wp, 0.384375000_wp, & 
+   & 1.828392857_wp, 1.694687500_wp, 0.518080357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 36) / &
+   & 2.523660714_wp, 6.000000000_wp, 0.571562500_wp, 0.357633929_wp, & 
+   & 2.176026786_wp, 1.935357143_wp, 3.031741071_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.277410714_wp, 0.143705357_wp, & 
+   & 2.389955357_wp, 2.309732143_wp, 3.727008929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.116964286_wp, 0.598303571_wp, & 
+   & 0.384375000_wp, 0.437857143_wp, 0.330892857_wp, 0.464598214_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.544821429_wp, 0.598303571_wp, & 
+   & 1.320312500_wp, 0.651785714_wp, 2.229508929_wp, 2.416696429_wp, & 
+   & 3.994419643_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.090223214_wp, 0.544821429_wp, 0.357633929_wp, 0.437857143_wp, & 
+   & 0.411116071_wp, 0.571562500_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.544821429_wp, 0.598303571_wp, 1.347053571_wp, 0.705267857_wp, & 
+   & 2.176026786_wp, 2.095803571_wp, 3.833973214_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.090223214_wp, 0.838973214_wp, & 
+   & 0.304151786_wp, 6.000000000_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.357633929_wp, 0.304151786_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.304151786_wp, 0.598303571_wp, & 
+   & 0.544821429_wp, 0.250669643_wp, 0.223928571_wp, 0.304151786_wp, & 
+   & 0.758750000_wp, 0.892455357_wp, 3.058482143_wp, 1.052901786_wp, & 
+   & 2.015580357_wp, 1.908616071_wp, 3.192187500_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.518080357_wp, 2.282991071_wp, & 
+   & 0.464598214_wp, 1.026160714_wp, 1.240089286_wp, 0.464598214_wp, & 
+   & 0.838973214_wp, 0.384375000_wp, 0.999419643_wp, 0.518080357_wp, & 
+   & 1.159866071_wp, 0.651785714_wp, 0.384375000_wp, 0.598303571_wp, & 
+   & 2.069062500_wp, 1.855133929_wp, 0.571562500_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 37) / &
+   & 0.250669643_wp, 0.464598214_wp, 0.090223214_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.357633929_wp, 0.143705357_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.063482143_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.036741071_wp, 0.036741071_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.116964286_wp, 0.090223214_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.036741071_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.036741071_wp, 0.036741071_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.063482143_wp, 0.036741071_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.036741071_wp, 0.036741071_wp, 0.036741071_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 38) / &
+   & 0.865714286_wp, 2.764330357_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.411116071_wp, 0.865714286_wp, 0.919196429_wp, 1.052901786_wp, & 
+   & 1.293571429_wp, 2.149285714_wp, 0.197187500_wp, 0.090223214_wp, & 
+   & 0.250669643_wp, 0.330892857_wp, 0.437857143_wp, 0.518080357_wp, & 
+   & 0.598303571_wp, 0.678526786_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.304151786_wp, 0.250669643_wp, 0.277410714_wp, 0.330892857_wp, & 
+   & 0.384375000_wp, 0.464598214_wp, 0.491339286_wp, 0.544821429_wp, & 
+   & 0.036741071_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.304151786_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.036741071_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.357633929_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.330892857_wp, 0.357633929_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 39) / &
+   & 0.598303571_wp, 1.026160714_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.330892857_wp, 0.464598214_wp, 0.518080357_wp, 0.571562500_wp, & 
+   & 0.651785714_wp, 0.758750000_wp, 0.170446429_wp, 0.090223214_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.063482143_wp, 0.143705357_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.250669643_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.197187500_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.250669643_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 40) / &
+   & 0.812232143_wp, 1.320312500_wp, 0.170446429_wp, 0.277410714_wp, & 
+   & 0.384375000_wp, 0.625044643_wp, 0.705267857_wp, 0.758750000_wp, & 
+   & 0.892455357_wp, 1.026160714_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 0.464598214_wp, 0.544821429_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.277410714_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.384375000_wp, 0.437857143_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.277410714_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.277410714_wp, 0.304151786_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 41) / &
+   & 0.785491071_wp, 1.320312500_wp, 0.170446429_wp, 0.277410714_wp, & 
+   & 0.357633929_wp, 0.571562500_wp, 0.651785714_wp, 0.732008929_wp, & 
+   & 0.838973214_wp, 0.999419643_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.330892857_wp, 0.384375000_wp, & 
+   & 0.437857143_wp, 0.491339286_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.277410714_wp, 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.063482143_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.277410714_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.304151786_wp, 0.277410714_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 42) / &
+   & 1.106383929_wp, 1.587723214_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.518080357_wp, 0.785491071_wp, 0.865714286_wp, 0.919196429_wp, & 
+   & 1.052901786_wp, 1.186607143_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.330892857_wp, 0.411116071_wp, 0.491339286_wp, 0.544821429_wp, & 
+   & 0.598303571_wp, 0.678526786_wp, 0.090223214_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.277410714_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.384375000_wp, 0.304151786_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 0.464598214_wp, 0.491339286_wp, 0.518080357_wp, 0.571562500_wp, & 
+   & 0.063482143_wp, 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.384375000_wp, 0.304151786_wp, & 
+   & 0.304151786_wp, 0.357633929_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.437857143_wp, 0.464598214_wp, 0.063482143_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.411116071_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.304151786_wp, 0.384375000_wp, 0.437857143_wp, 0.384375000_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, 0.384375000_wp, & 
+   & 0.411116071_wp, 0.437857143_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.250669643_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.250669643_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 43) / &
+   & 0.384375000_wp, 0.491339286_wp, 0.304151786_wp, 0.170446429_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.197187500_wp, 0.116964286_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 44) / &
+   & 0.544821429_wp, 0.705267857_wp, 0.330892857_wp, 0.223928571_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.384375000_wp, 0.437857143_wp, & 
+   & 0.491339286_wp, 0.544821429_wp, 0.223928571_wp, 0.143705357_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.090223214_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.063482143_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 45) / &
+   & 1.106383929_wp, 1.694687500_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.464598214_wp, 0.758750000_wp, 0.865714286_wp, 0.945937500_wp, & 
+   & 1.133125000_wp, 1.293571429_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.304151786_wp, 0.357633929_wp, 0.437857143_wp, 0.518080357_wp, & 
+   & 0.571562500_wp, 0.651785714_wp, 0.090223214_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.357633929_wp, 0.304151786_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.411116071_wp, 0.437857143_wp, 0.491339286_wp, 0.544821429_wp, & 
+   & 0.063482143_wp, 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.330892857_wp, 0.304151786_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.063482143_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.357633929_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.357633929_wp, 0.384375000_wp, 0.357633929_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.330892857_wp, 0.330892857_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.250669643_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 46) / &
+   & 1.133125000_wp, 1.507500000_wp, 0.304151786_wp, 0.304151786_wp, & 
+   & 0.544821429_wp, 0.812232143_wp, 0.892455357_wp, 0.945937500_wp, & 
+   & 1.052901786_wp, 1.186607143_wp, 0.250669643_wp, 0.116964286_wp, & 
+   & 0.357633929_wp, 0.437857143_wp, 0.518080357_wp, 0.571562500_wp, & 
+   & 0.625044643_wp, 0.705267857_wp, 0.090223214_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.304151786_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.411116071_wp, 0.330892857_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.464598214_wp, 0.518080357_wp, 0.544821429_wp, 0.598303571_wp, & 
+   & 0.090223214_wp, 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.411116071_wp, 0.330892857_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.411116071_wp, 0.437857143_wp, & 
+   & 0.464598214_wp, 0.491339286_wp, 0.063482143_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.437857143_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.411116071_wp, 0.437857143_wp, 0.411116071_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.437857143_wp, 0.437857143_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.304151786_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.277410714_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.277410714_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 47) / &
+   & 1.614464286_wp, 4.101383929_wp, 0.411116071_wp, 0.277410714_wp, & 
+   & 0.945937500_wp, 1.454017857_wp, 1.881875000_wp, 2.309732143_wp, & 
+   & 2.630625000_wp, 3.085223214_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.571562500_wp, 0.812232143_wp, 1.133125000_wp, 1.320312500_wp, & 
+   & 1.507500000_wp, 1.614464286_wp, 0.090223214_wp, 0.330892857_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.197187500_wp, 0.384375000_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.357633929_wp, 0.384375000_wp, & 
+   & 0.678526786_wp, 0.437857143_wp, 0.651785714_wp, 0.812232143_wp, & 
+   & 1.052901786_wp, 1.213348214_wp, 1.320312500_wp, 1.347053571_wp, & 
+   & 0.063482143_wp, 0.304151786_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.384375000_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.330892857_wp, 0.411116071_wp, 0.678526786_wp, 0.464598214_wp, & 
+   & 0.544821429_wp, 0.705267857_wp, 0.838973214_wp, 0.972678571_wp, & 
+   & 1.079642857_wp, 1.106383929_wp, 0.063482143_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.919196429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.330892857_wp, & 
+   & 0.330892857_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.437857143_wp, 0.732008929_wp, 0.919196429_wp, 0.651785714_wp, & 
+   & 0.571562500_wp, 0.598303571_wp, 0.785491071_wp, 0.892455357_wp, & 
+   & 0.972678571_wp, 0.999419643_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.250669643_wp, 0.223928571_wp, 0.304151786_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.437857143_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 0.357633929_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 48) / &
+   & 2.684107143_wp, 2.015580357_wp, 0.330892857_wp, 0.277410714_wp, & 
+   & 0.625044643_wp, 0.972678571_wp, 1.079642857_wp, 1.159866071_wp, & 
+   & 1.347053571_wp, 1.534241071_wp, 0.250669643_wp, 0.116964286_wp, & 
+   & 0.384375000_wp, 0.491339286_wp, 0.598303571_wp, 0.678526786_wp, & 
+   & 0.732008929_wp, 0.838973214_wp, 0.090223214_wp, 0.277410714_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, 0.330892857_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.464598214_wp, 0.384375000_wp, 0.437857143_wp, 0.491339286_wp, & 
+   & 0.571562500_wp, 0.598303571_wp, 0.651785714_wp, 0.705267857_wp, & 
+   & 0.063482143_wp, 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.304151786_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.464598214_wp, 0.384375000_wp, & 
+   & 0.384375000_wp, 0.437857143_wp, 0.464598214_wp, 0.518080357_wp, & 
+   & 0.544821429_wp, 0.571562500_wp, 0.063482143_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.491339286_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.223928571_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.357633929_wp, 0.464598214_wp, 0.518080357_wp, 0.464598214_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.437857143_wp, 0.464598214_wp, & 
+   & 0.491339286_wp, 0.518080357_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.330892857_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.304151786_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 49) / &
+   & 1.587723214_wp, 4.903616071_wp, 0.330892857_wp, 0.277410714_wp, & 
+   & 0.999419643_wp, 1.427276786_wp, 2.095803571_wp, 3.058482143_wp, & 
+   & 3.566562500_wp, 3.940937500_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 1.667946429_wp, 1.855133929_wp, 1.962098214_wp, 2.069062500_wp, & 
+   & 2.256250000_wp, 2.470178571_wp, 0.063482143_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.330892857_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.571562500_wp, 0.357633929_wp, 1.560982143_wp, 1.855133929_wp, & 
+   & 1.828392857_wp, 1.935357143_wp, 1.988839286_wp, 2.176026786_wp, & 
+   & 0.063482143_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.304151786_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.544821429_wp, 0.384375000_wp, & 
+   & 1.400535714_wp, 1.667946429_wp, 1.694687500_wp, 1.721428571_wp, & 
+   & 1.774910714_wp, 1.908616071_wp, 0.063482143_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 1.748169643_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.357633929_wp, 0.625044643_wp, 1.881875000_wp, 0.544821429_wp, & 
+   & 0.411116071_wp, 0.464598214_wp, 1.667946429_wp, 1.641205357_wp, & 
+   & 1.721428571_wp, 1.801651786_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.892455357_wp, 0.197187500_wp, 0.357633929_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.277410714_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 1.908616071_wp, 0.223928571_wp, 0.250669643_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 50) / &
+   & 1.587723214_wp, 6.000000000_wp, 0.384375000_wp, 0.277410714_wp, & 
+   & 1.106383929_wp, 1.347053571_wp, 1.988839286_wp, 3.459598214_wp, & 
+   & 3.753750000_wp, 4.876875000_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.625044643_wp, 0.945937500_wp, 1.667946429_wp, 2.256250000_wp, & 
+   & 2.630625000_wp, 2.470178571_wp, 0.090223214_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.170446429_wp, 0.357633929_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.705267857_wp, 0.411116071_wp, 0.758750000_wp, 1.026160714_wp, & 
+   & 1.641205357_wp, 2.176026786_wp, 2.577142857_wp, 2.095803571_wp, & 
+   & 0.063482143_wp, 0.277410714_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.357633929_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.304151786_wp, 0.357633929_wp, 0.705267857_wp, 0.437857143_wp, & 
+   & 1.667946429_wp, 0.838973214_wp, 1.186607143_wp, 1.560982143_wp, & 
+   & 1.881875000_wp, 1.694687500_wp, 0.063482143_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 1.400535714_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.304151786_wp, & 
+   & 0.304151786_wp, 0.197187500_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.411116071_wp, 0.705267857_wp, 1.159866071_wp, 0.651785714_wp, & 
+   & 1.641205357_wp, 0.678526786_wp, 1.079642857_wp, 1.400535714_wp, & 
+   & 1.855133929_wp, 1.480758929_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.785491071_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.571562500_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.330892857_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 51) / &
+   & 1.774910714_wp, 6.000000000_wp, 0.411116071_wp, 0.250669643_wp, & 
+   & 1.400535714_wp, 1.400535714_wp, 2.095803571_wp, 5.545401786_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.197187500_wp, 0.090223214_wp, & 
+   & 1.935357143_wp, 1.427276786_wp, 2.470178571_wp, 3.673526786_wp, & 
+   & 4.021160714_wp, 4.475758929_wp, 0.063482143_wp, 0.357633929_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.197187500_wp, 0.357633929_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 0.838973214_wp, 0.464598214_wp, 1.774910714_wp, 1.560982143_wp, & 
+   & 2.523660714_wp, 3.325892857_wp, 3.539821429_wp, 3.833973214_wp, & 
+   & 0.063482143_wp, 0.330892857_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.384375000_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.330892857_wp, 0.411116071_wp, 0.838973214_wp, 0.464598214_wp, & 
+   & 1.694687500_wp, 1.186607143_wp, 2.095803571_wp, 2.978258929_wp, & 
+   & 3.085223214_wp, 3.272410714_wp, 0.063482143_wp, 0.304151786_wp, & 
+   & 0.197187500_wp, 2.791071429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.384375000_wp, & 
+   & 0.357633929_wp, 0.197187500_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.464598214_wp, 0.678526786_wp, 1.748169643_wp, 0.705267857_wp, & 
+   & 1.480758929_wp, 0.919196429_wp, 1.828392857_wp, 2.844553571_wp, & 
+   & 2.924776786_wp, 3.058482143_wp, 0.304151786_wp, 0.304151786_wp, & 
+   & 0.277410714_wp, 0.838973214_wp, 0.945937500_wp, 0.330892857_wp, & 
+   & 0.277410714_wp, 0.250669643_wp, 0.651785714_wp, 0.304151786_wp, & 
+   & 0.838973214_wp, 0.384375000_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.330892857_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 52) / &
+   & 1.881875000_wp, 6.000000000_wp, 0.411116071_wp, 0.250669643_wp, & 
+   & 1.667946429_wp, 1.454017857_wp, 2.229508929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.197187500_wp, 0.116964286_wp, & 
+   & 1.988839286_wp, 1.962098214_wp, 2.844553571_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.411116071_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.223928571_wp, 0.357633929_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.384375000_wp, 0.437857143_wp, & 
+   & 0.945937500_wp, 0.491339286_wp, 1.801651786_wp, 1.908616071_wp, & 
+   & 3.111964286_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.063482143_wp, 0.357633929_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.411116071_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.357633929_wp, 0.437857143_wp, 0.972678571_wp, 0.518080357_wp, & 
+   & 1.721428571_wp, 1.560982143_wp, 2.978258929_wp, 4.422276786_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.357633929_wp, & 
+   & 0.223928571_wp, 5.491919643_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.437857143_wp, & 
+   & 0.384375000_wp, 0.197187500_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.518080357_wp, 0.678526786_wp, 2.336473214_wp, 0.758750000_wp, & 
+   & 1.507500000_wp, 1.320312500_wp, 2.791071429_wp, 4.047901786_wp, & 
+   & 5.732589286_wp, 6.000000000_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.304151786_wp, 0.785491071_wp, 0.250669643_wp, 0.357633929_wp, & 
+   & 0.304151786_wp, 0.250669643_wp, 0.758750000_wp, 0.330892857_wp, & 
+   & 0.972678571_wp, 0.384375000_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 1.935357143_wp, 0.304151786_wp, 0.357633929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 53) / &
+   & 2.042321429_wp, 6.000000000_wp, 0.437857143_wp, 0.277410714_wp, & 
+   & 1.748169643_wp, 1.534241071_wp, 2.389955357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 2.042321429_wp, 2.202767857_wp, 2.978258929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.090223214_wp, 0.437857143_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.223928571_wp, 0.357633929_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.411116071_wp, 0.464598214_wp, & 
+   & 1.026160714_wp, 0.518080357_wp, 1.801651786_wp, 2.363214286_wp, & 
+   & 3.218928571_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.063482143_wp, 0.384375000_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.304151786_wp, 0.437857143_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.384375000_wp, 0.464598214_wp, 1.079642857_wp, 0.544821429_wp, & 
+   & 1.774910714_wp, 1.881875000_wp, 3.085223214_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.384375000_wp, & 
+   & 0.223928571_wp, 6.000000000_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.491339286_wp, & 
+   & 0.411116071_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.571562500_wp, 0.705267857_wp, 3.325892857_wp, 0.838973214_wp, & 
+   & 1.587723214_wp, 1.774910714_wp, 3.138705357_wp, 5.491919643_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 0.330892857_wp, 0.812232143_wp, 0.812232143_wp, 0.384375000_wp, & 
+   & 0.384375000_wp, 0.277410714_wp, 0.838973214_wp, 0.357633929_wp, & 
+   & 0.945937500_wp, 0.437857143_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 1.881875000_wp, 0.330892857_wp, 0.384375000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 54) / &
+   & 2.069062500_wp, 6.000000000_wp, 0.437857143_wp, 0.277410714_wp, & 
+   & 1.774910714_wp, 1.587723214_wp, 2.443437500_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 2.149285714_wp, 1.908616071_wp, 3.165446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.090223214_wp, 0.464598214_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.250669643_wp, 0.384375000_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.437857143_wp, 0.491339286_wp, & 
+   & 1.079642857_wp, 0.544821429_wp, 1.962098214_wp, 1.988839286_wp, & 
+   & 3.406116071_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.063482143_wp, 0.411116071_wp, 0.277410714_wp, 0.330892857_wp, & 
+   & 0.330892857_wp, 0.464598214_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.411116071_wp, 0.491339286_wp, 1.106383929_wp, 0.571562500_wp, & 
+   & 1.908616071_wp, 1.694687500_wp, 3.272410714_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.437857143_wp, & 
+   & 0.250669643_wp, 6.000000000_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.304151786_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.518080357_wp, & 
+   & 0.437857143_wp, 0.223928571_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.598303571_wp, 0.758750000_wp, 2.443437500_wp, 0.865714286_wp, & 
+   & 1.721428571_wp, 1.427276786_wp, 2.603883929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.411116071_wp, 2.256250000_wp, & 
+   & 0.357633929_wp, 0.865714286_wp, 0.945937500_wp, 0.411116071_wp, & 
+   & 0.544821429_wp, 0.304151786_wp, 0.945937500_wp, 0.384375000_wp, & 
+   & 1.026160714_wp, 0.491339286_wp, 0.304151786_wp, 0.304151786_wp, & 
+   & 1.962098214_wp, 0.384375000_wp, 0.437857143_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 55) / &
+   & 0.250669643_wp, 0.785491071_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.384375000_wp, 1.079642857_wp, 0.143705357_wp, 0.036741071_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.036741071_wp, 0.036741071_wp, 0.036741071_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.090223214_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.036741071_wp, 0.063482143_wp, 0.036741071_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.036741071_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.063482143_wp, 0.036741071_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.036741071_wp, 0.036741071_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.036741071_wp, 0.036741071_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.036741071_wp, 0.036741071_wp, 0.036741071_wp, 0.036741071_wp, & 
+   & 0.036741071_wp, 0.036741071_wp, 0.036741071_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 56) / &
+   & 1.159866071_wp, 1.748169643_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.384375000_wp, 0.838973214_wp, 1.106383929_wp, 1.159866071_wp, & 
+   & 1.347053571_wp, 1.400535714_wp, 0.170446429_wp, 0.063482143_wp, & 
+   & 0.223928571_wp, 0.330892857_wp, 0.437857143_wp, 0.598303571_wp, & 
+   & 0.838973214_wp, 0.945937500_wp, 0.036741071_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.304151786_wp, 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.384375000_wp, 0.491339286_wp, 0.598303571_wp, 0.838973214_wp, & 
+   & 0.036741071_wp, 0.143705357_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.223928571_wp, 0.090223214_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.384375000_wp, 0.437857143_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.330892857_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.330892857_wp, 0.357633929_wp, 0.330892857_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, 0.330892857_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.090223214_wp, 0.170446429_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 57) / &
+   & 0.544821429_wp, 0.865714286_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.411116071_wp, 0.464598214_wp, 0.491339286_wp, & 
+   & 0.571562500_wp, 0.651785714_wp, 0.143705357_wp, 0.090223214_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.036741071_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.036741071_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.223928571_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.223928571_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.197187500_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 58) / &
+   & 1.881875000_wp, 6.000000000_wp, 0.384375000_wp, 0.250669643_wp, & 
+   & 1.560982143_wp, 1.454017857_wp, 2.256250000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.197187500_wp, 0.090223214_wp, & 
+   & 1.988839286_wp, 1.667946429_wp, 2.791071429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.384375000_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.197187500_wp, 0.330892857_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.892455357_wp, 0.464598214_wp, 1.801651786_wp, 1.774910714_wp, & 
+   & 3.085223214_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.063482143_wp, 0.357633929_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.411116071_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.357633929_wp, 0.437857143_wp, 0.919196429_wp, 0.491339286_wp, & 
+   & 1.748169643_wp, 1.400535714_wp, 2.791071429_wp, 5.491919643_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.330892857_wp, & 
+   & 0.223928571_wp, 6.000000000_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.437857143_wp, & 
+   & 0.384375000_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.491339286_wp, 0.651785714_wp, 1.988839286_wp, 0.758750000_wp, & 
+   & 1.480758929_wp, 1.240089286_wp, 2.309732143_wp, 4.903616071_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.277410714_wp, 0.785491071_wp, 0.250669643_wp, 0.330892857_wp, & 
+   & 0.277410714_wp, 0.250669643_wp, 0.705267857_wp, 0.330892857_wp, & 
+   & 0.972678571_wp, 0.384375000_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 1.881875000_wp, 0.304151786_wp, 0.357633929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 59) / &
+   & 0.464598214_wp, 0.705267857_wp, 0.090223214_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.464598214_wp, 0.544821429_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.116964286_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.090223214_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 60) / &
+   & 0.491339286_wp, 0.732008929_wp, 0.090223214_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.491339286_wp, 0.544821429_wp, 0.116964286_wp, 0.090223214_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.116964286_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.090223214_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 61) / &
+   & 0.491339286_wp, 0.732008929_wp, 0.090223214_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.491339286_wp, 0.571562500_wp, 0.116964286_wp, 0.090223214_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.090223214_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.143705357_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.090223214_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 62) / &
+   & 0.491339286_wp, 0.732008929_wp, 0.090223214_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.330892857_wp, 0.384375000_wp, 0.437857143_wp, & 
+   & 0.491339286_wp, 0.571562500_wp, 0.116964286_wp, 0.090223214_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.090223214_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.143705357_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.090223214_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 63) / &
+   & 0.651785714_wp, 1.052901786_wp, 0.116964286_wp, 0.250669643_wp, & 
+   & 0.330892857_wp, 0.491339286_wp, 0.571562500_wp, 0.625044643_wp, & 
+   & 0.705267857_wp, 0.812232143_wp, 0.143705357_wp, 0.090223214_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.384375000_wp, 0.437857143_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.063482143_wp, 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.036741071_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.250669643_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 64) / &
+   & 0.625044643_wp, 0.892455357_wp, 0.143705357_wp, 0.250669643_wp, & 
+   & 0.304151786_wp, 0.384375000_wp, 0.464598214_wp, 0.518080357_wp, & 
+   & 0.598303571_wp, 0.678526786_wp, 0.143705357_wp, 0.090223214_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.330892857_wp, 0.384375000_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.063482143_wp, 0.116964286_wp, 0.170446429_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.036741071_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.223928571_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 65) / &
+   & 0.544821429_wp, 0.785491071_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.277410714_wp, 0.357633929_wp, 0.411116071_wp, 0.464598214_wp, & 
+   & 0.544821429_wp, 0.598303571_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 66) / &
+   & 0.571562500_wp, 0.812232143_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.357633929_wp, 0.437857143_wp, 0.464598214_wp, & 
+   & 0.544821429_wp, 0.625044643_wp, 0.116964286_wp, 0.090223214_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.063482143_wp, 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 67) / &
+   & 0.518080357_wp, 0.758750000_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.330892857_wp, 0.411116071_wp, 0.437857143_wp, & 
+   & 0.518080357_wp, 0.571562500_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 68) / &
+   & 0.518080357_wp, 0.758750000_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.411116071_wp, 0.437857143_wp, & 
+   & 0.518080357_wp, 0.598303571_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.063482143_wp, 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 69) / &
+   & 0.544821429_wp, 0.785491071_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.411116071_wp, 0.464598214_wp, & 
+   & 0.518080357_wp, 0.598303571_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.063482143_wp, 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 70) / &
+   & 0.571562500_wp, 0.812232143_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.357633929_wp, 0.437857143_wp, 0.464598214_wp, & 
+   & 0.544821429_wp, 0.625044643_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.063482143_wp, 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 71) / &
+   & 0.598303571_wp, 0.838973214_wp, 0.143705357_wp, 0.250669643_wp, & 
+   & 0.304151786_wp, 0.384375000_wp, 0.464598214_wp, 0.491339286_wp, & 
+   & 0.571562500_wp, 0.651785714_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.063482143_wp, 0.116964286_wp, 0.170446429_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.223928571_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 72) / &
+   & 0.972678571_wp, 1.667946429_wp, 0.170446429_wp, 0.330892857_wp, & 
+   & 0.491339286_wp, 0.838973214_wp, 0.919196429_wp, 0.972678571_wp, & 
+   & 1.106383929_wp, 1.240089286_wp, 0.197187500_wp, 0.143705357_wp, & 
+   & 0.277410714_wp, 0.411116071_wp, 0.518080357_wp, 0.571562500_wp, & 
+   & 0.651785714_wp, 0.705267857_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.357633929_wp, 0.277410714_wp, 0.330892857_wp, 0.384375000_wp, & 
+   & 0.464598214_wp, 0.544821429_wp, 0.571562500_wp, 0.598303571_wp, & 
+   & 0.090223214_wp, 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.330892857_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.384375000_wp, 0.437857143_wp, & 
+   & 0.491339286_wp, 0.518080357_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.437857143_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.357633929_wp, 0.464598214_wp, 0.357633929_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.330892857_wp, 0.411116071_wp, & 
+   & 0.464598214_wp, 0.464598214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.223928571_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 73) / &
+   & 1.026160714_wp, 1.801651786_wp, 0.250669643_wp, 0.304151786_wp, & 
+   & 0.464598214_wp, 0.812232143_wp, 0.919196429_wp, 0.999419643_wp, & 
+   & 1.159866071_wp, 1.373794643_wp, 0.223928571_wp, 0.143705357_wp, & 
+   & 0.277410714_wp, 0.384375000_wp, 0.464598214_wp, 0.518080357_wp, & 
+   & 0.598303571_wp, 0.678526786_wp, 0.090223214_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.357633929_wp, 0.277410714_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.437857143_wp, 0.464598214_wp, 0.518080357_wp, 0.544821429_wp, & 
+   & 0.063482143_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.330892857_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.357633929_wp, 0.384375000_wp, & 
+   & 0.411116071_wp, 0.437857143_wp, 0.063482143_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.384375000_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.357633929_wp, 0.411116071_wp, 0.357633929_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.250669643_wp, 0.197187500_wp, & 
+   & 0.143705357_wp, 0.223928571_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 74) / &
+   & 0.518080357_wp, 0.705267857_wp, 0.330892857_wp, 0.250669643_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.491339286_wp, 0.544821429_wp, 0.197187500_wp, 0.116964286_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.063482143_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.063482143_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.143705357_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 75) / &
+   & 0.464598214_wp, 0.598303571_wp, 0.357633929_wp, 0.197187500_wp, & 
+   & 0.304151786_wp, 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.437857143_wp, 0.491339286_wp, 0.197187500_wp, 0.116964286_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.090223214_wp, 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 76) / &
+   & 0.598303571_wp, 0.785491071_wp, 0.330892857_wp, 0.223928571_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.437857143_wp, 0.491339286_wp, & 
+   & 0.571562500_wp, 0.625044643_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.090223214_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.304151786_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.090223214_wp, 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.063482143_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.250669643_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 77) / &
+   & 2.202767857_wp, 2.336473214_wp, 0.330892857_wp, 0.277410714_wp, & 
+   & 0.651785714_wp, 1.159866071_wp, 1.240089286_wp, 1.347053571_wp, & 
+   & 1.560982143_wp, 1.774910714_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.384375000_wp, 0.491339286_wp, 0.625044643_wp, 0.732008929_wp, & 
+   & 0.838973214_wp, 0.945937500_wp, 0.090223214_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.304151786_wp, 0.304151786_wp, & 
+   & 0.464598214_wp, 0.357633929_wp, 0.411116071_wp, 0.491339286_wp, & 
+   & 0.598303571_wp, 0.625044643_wp, 0.705267857_wp, 0.758750000_wp, & 
+   & 0.063482143_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.304151786_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.437857143_wp, 0.357633929_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.464598214_wp, 0.518080357_wp, & 
+   & 0.571562500_wp, 0.598303571_wp, 0.063482143_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.491339286_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.330892857_wp, 0.464598214_wp, 0.544821429_wp, 0.437857143_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.437857143_wp, 0.464598214_wp, & 
+   & 0.518080357_wp, 0.544821429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.170446429_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.330892857_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.304151786_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.277410714_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 78) / &
+   & 2.042321429_wp, 3.058482143_wp, 0.437857143_wp, 0.277410714_wp, & 
+   & 1.159866071_wp, 1.293571429_wp, 1.320312500_wp, 1.480758929_wp, & 
+   & 1.774910714_wp, 2.095803571_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.651785714_wp, 0.785491071_wp, 0.812232143_wp, 0.865714286_wp, & 
+   & 0.945937500_wp, 1.079642857_wp, 0.090223214_wp, 0.357633929_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.223928571_wp, 0.384375000_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 0.732008929_wp, 0.464598214_wp, 0.705267857_wp, 0.785491071_wp, & 
+   & 0.758750000_wp, 0.758750000_wp, 0.838973214_wp, 0.892455357_wp, & 
+   & 0.063482143_wp, 0.330892857_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.384375000_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.732008929_wp, 0.464598214_wp, & 
+   & 0.625044643_wp, 0.705267857_wp, 0.678526786_wp, 0.678526786_wp, & 
+   & 0.705267857_wp, 0.758750000_wp, 0.063482143_wp, 0.330892857_wp, & 
+   & 0.223928571_wp, 0.651785714_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.357633929_wp, & 
+   & 0.357633929_wp, 0.197187500_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.464598214_wp, 0.544821429_wp, 0.705267857_wp, 0.651785714_wp, & 
+   & 0.651785714_wp, 0.678526786_wp, 0.651785714_wp, 0.651785714_wp, & 
+   & 0.651785714_wp, 0.705267857_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.304151786_wp, 0.277410714_wp, 0.250669643_wp, 0.330892857_wp, & 
+   & 0.812232143_wp, 0.250669643_wp, 0.571562500_wp, 0.330892857_wp, & 
+   & 0.223928571_wp, 0.384375000_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.357633929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 79) / &
+   & 1.908616071_wp, 6.000000000_wp, 0.437857143_wp, 0.277410714_wp, & 
+   & 1.454017857_wp, 1.507500000_wp, 2.256250000_wp, 4.903616071_wp, & 
+   & 5.625625000_wp, 6.000000000_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 1.293571429_wp, 1.373794643_wp, 2.309732143_wp, 3.646785714_wp, & 
+   & 4.689687500_wp, 3.727008929_wp, 0.090223214_wp, 0.411116071_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.223928571_wp, 0.384375000_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.411116071_wp, 0.437857143_wp, & 
+   & 0.892455357_wp, 0.491339286_wp, 1.801651786_wp, 1.427276786_wp, & 
+   & 2.389955357_wp, 3.833973214_wp, 5.572142857_wp, 3.058482143_wp, & 
+   & 0.063482143_wp, 0.357633929_wp, 0.250669643_wp, 0.304151786_wp, & 
+   & 0.304151786_wp, 0.437857143_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.384375000_wp, 0.437857143_wp, 0.919196429_wp, 0.518080357_wp, & 
+   & 1.881875000_wp, 1.159866071_wp, 1.748169643_wp, 2.336473214_wp, & 
+   & 3.325892857_wp, 2.443437500_wp, 0.063482143_wp, 0.357633929_wp, & 
+   & 0.223928571_wp, 1.988839286_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.464598214_wp, & 
+   & 0.411116071_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.544821429_wp, 0.705267857_wp, 1.614464286_wp, 0.785491071_wp, & 
+   & 1.774910714_wp, 0.972678571_wp, 1.507500000_wp, 2.122544643_wp, & 
+   & 3.138705357_wp, 2.229508929_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.304151786_wp, 0.838973214_wp, 0.945937500_wp, 0.357633929_wp, & 
+   & 0.330892857_wp, 0.277410714_wp, 0.732008929_wp, 0.357633929_wp, & 
+   & 0.838973214_wp, 0.437857143_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 80) / &
+   & 2.256250000_wp, 3.085223214_wp, 0.411116071_wp, 0.277410714_wp, & 
+   & 0.919196429_wp, 1.560982143_wp, 1.667946429_wp, 1.801651786_wp, & 
+   & 2.095803571_wp, 2.363214286_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.544821429_wp, 0.732008929_wp, 0.892455357_wp, 0.999419643_wp, & 
+   & 1.133125000_wp, 1.240089286_wp, 0.090223214_wp, 0.330892857_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.223928571_wp, 0.384375000_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 2.069062500_wp, 0.437857143_wp, 0.625044643_wp, 0.732008929_wp, & 
+   & 0.838973214_wp, 0.892455357_wp, 0.972678571_wp, 1.052901786_wp, & 
+   & 0.063482143_wp, 0.304151786_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.384375000_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.651785714_wp, 0.464598214_wp, & 
+   & 0.544821429_wp, 0.651785714_wp, 0.705267857_wp, 0.758750000_wp, & 
+   & 0.838973214_wp, 0.865714286_wp, 0.063482143_wp, 0.330892857_wp, & 
+   & 0.223928571_wp, 0.758750000_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.357633929_wp, & 
+   & 0.357633929_wp, 0.223928571_wp, 0.197187500_wp, 0.250669643_wp, & 
+   & 0.437857143_wp, 0.651785714_wp, 0.785491071_wp, 0.598303571_wp, & 
+   & 0.544821429_wp, 0.571562500_wp, 0.678526786_wp, 0.705267857_wp, & 
+   & 0.758750000_wp, 0.785491071_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.304151786_wp, 0.277410714_wp, 0.250669643_wp, 0.330892857_wp, & 
+   & 0.277410714_wp, 0.277410714_wp, 0.518080357_wp, 0.330892857_wp, & 
+   & 0.250669643_wp, 0.384375000_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.357633929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 81) / &
+   & 1.614464286_wp, 4.716428571_wp, 0.330892857_wp, 0.277410714_wp, & 
+   & 1.855133929_wp, 1.347053571_wp, 2.095803571_wp, 2.951517857_wp, & 
+   & 3.406116071_wp, 3.780491071_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 0.437857143_wp, 1.721428571_wp, 1.774910714_wp, 1.881875000_wp, & 
+   & 2.069062500_wp, 2.309732143_wp, 0.063482143_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.330892857_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.571562500_wp, 0.357633929_wp, 0.544821429_wp, 1.694687500_wp, & 
+   & 1.667946429_wp, 1.774910714_wp, 1.855133929_wp, 2.015580357_wp, & 
+   & 0.063482143_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.304151786_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.571562500_wp, 0.384375000_wp, & 
+   & 0.411116071_wp, 1.641205357_wp, 1.480758929_wp, 1.507500000_wp, & 
+   & 1.587723214_wp, 1.721428571_wp, 0.063482143_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 1.480758929_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.197187500_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.357633929_wp, 0.651785714_wp, 1.774910714_wp, 0.544821429_wp, & 
+   & 0.437857143_wp, 1.641205357_wp, 1.454017857_wp, 1.427276786_wp, & 
+   & 1.454017857_wp, 1.587723214_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.357633929_wp, 0.250669643_wp, & 
+   & 1.828392857_wp, 0.304151786_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 82) / &
+   & 1.507500000_wp, 5.358214286_wp, 0.357633929_wp, 0.250669643_wp, & 
+   & 0.945937500_wp, 1.347053571_wp, 1.908616071_wp, 2.924776786_wp, & 
+   & 3.165446429_wp, 3.940937500_wp, 0.197187500_wp, 0.090223214_wp, & 
+   & 0.491339286_wp, 0.785491071_wp, 1.454017857_wp, 1.988839286_wp, & 
+   & 2.256250000_wp, 2.229508929_wp, 0.063482143_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.170446429_wp, 0.357633929_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.598303571_wp, 0.384375000_wp, 0.571562500_wp, 0.838973214_wp, & 
+   & 1.507500000_wp, 1.881875000_wp, 2.149285714_wp, 1.908616071_wp, & 
+   & 0.063482143_wp, 0.250669643_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.330892857_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.277410714_wp, 0.357633929_wp, 0.598303571_wp, 0.411116071_wp, & 
+   & 0.464598214_wp, 0.678526786_wp, 0.919196429_wp, 1.320312500_wp, & 
+   & 1.774910714_wp, 1.427276786_wp, 0.063482143_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 1.240089286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.197187500_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.384375000_wp, 0.678526786_wp, 0.972678571_wp, 0.571562500_wp, & 
+   & 1.641205357_wp, 0.544821429_wp, 0.812232143_wp, 1.106383929_wp, & 
+   & 1.560982143_wp, 1.240089286_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.170446429_wp, 0.277410714_wp, & 
+   & 0.838973214_wp, 0.197187500_wp, 0.411116071_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.330892857_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.277410714_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 83) / &
+   & 1.667946429_wp, 6.000000000_wp, 0.411116071_wp, 0.250669643_wp, & 
+   & 1.213348214_wp, 1.347053571_wp, 1.988839286_wp, 4.903616071_wp, & 
+   & 5.331473214_wp, 6.000000000_wp, 0.197187500_wp, 0.090223214_wp, & 
+   & 1.908616071_wp, 1.213348214_wp, 2.416696429_wp, 3.753750000_wp, & 
+   & 4.101383929_wp, 3.807232143_wp, 0.063482143_wp, 0.330892857_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, 0.330892857_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.330892857_wp, 0.384375000_wp, & 
+   & 0.758750000_wp, 0.437857143_wp, 1.774910714_wp, 1.373794643_wp, & 
+   & 2.496919643_wp, 3.379375000_wp, 3.620044643_wp, 3.192187500_wp, & 
+   & 0.063482143_wp, 0.304151786_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.357633929_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.330892857_wp, 0.384375000_wp, 0.785491071_wp, 0.437857143_wp, & 
+   & 1.667946429_wp, 1.079642857_wp, 1.828392857_wp, 2.791071429_wp, & 
+   & 3.138705357_wp, 2.603883929_wp, 0.063482143_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 2.309732143_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.330892857_wp, & 
+   & 0.330892857_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.437857143_wp, 0.651785714_wp, 1.507500000_wp, 0.678526786_wp, & 
+   & 1.454017857_wp, 0.812232143_wp, 1.641205357_wp, 2.523660714_wp, & 
+   & 2.951517857_wp, 2.389955357_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.812232143_wp, 0.972678571_wp, 0.304151786_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.598303571_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.357633929_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 84) / &
+   & 1.774910714_wp, 6.000000000_wp, 0.384375000_wp, 0.223928571_wp, & 
+   & 1.454017857_wp, 1.373794643_wp, 2.069062500_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.197187500_wp, 0.090223214_wp, & 
+   & 1.908616071_wp, 1.694687500_wp, 2.710848214_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.357633929_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.197187500_wp, 0.330892857_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.357633929_wp, 0.411116071_wp, & 
+   & 0.865714286_wp, 0.437857143_wp, 1.721428571_wp, 1.801651786_wp, & 
+   & 2.951517857_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.063482143_wp, 0.330892857_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.384375000_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.330892857_wp, 0.411116071_wp, 0.892455357_wp, 0.464598214_wp, & 
+   & 1.641205357_wp, 1.400535714_wp, 2.844553571_wp, 4.047901786_wp, & 
+   & 5.491919643_wp, 6.000000000_wp, 0.063482143_wp, 0.330892857_wp, & 
+   & 0.197187500_wp, 4.903616071_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.411116071_wp, & 
+   & 0.357633929_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.464598214_wp, 0.651785714_wp, 2.122544643_wp, 0.705267857_wp, & 
+   & 1.427276786_wp, 1.106383929_wp, 2.523660714_wp, 3.727008929_wp, & 
+   & 5.090803571_wp, 5.491919643_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.277410714_wp, 0.785491071_wp, 0.223928571_wp, 0.330892857_wp, & 
+   & 0.277410714_wp, 0.250669643_wp, 0.758750000_wp, 0.304151786_wp, & 
+   & 0.945937500_wp, 0.384375000_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 1.881875000_wp, 0.277410714_wp, 0.330892857_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 85) / &
+   & 1.881875000_wp, 6.000000000_wp, 0.384375000_wp, 0.250669643_wp, & 
+   & 1.721428571_wp, 1.427276786_wp, 2.176026786_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.197187500_wp, 0.090223214_wp, & 
+   & 1.988839286_wp, 2.042321429_wp, 2.791071429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.411116071_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.197187500_wp, 0.357633929_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.384375000_wp, 0.411116071_wp, & 
+   & 0.945937500_wp, 0.464598214_wp, 1.748169643_wp, 2.256250000_wp, & 
+   & 3.031741071_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.063482143_wp, 0.357633929_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.277410714_wp, 0.411116071_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.357633929_wp, 0.437857143_wp, 0.972678571_wp, 0.491339286_wp, & 
+   & 1.721428571_wp, 1.855133929_wp, 2.924776786_wp, 5.732589286_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.357633929_wp, & 
+   & 0.223928571_wp, 6.000000000_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.464598214_wp, & 
+   & 0.384375000_wp, 0.197187500_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.518080357_wp, 0.651785714_wp, 3.138705357_wp, 0.758750000_wp, & 
+   & 1.454017857_wp, 1.560982143_wp, 2.951517857_wp, 5.090803571_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.304151786_wp, 0.785491071_wp, 0.250669643_wp, 0.357633929_wp, & 
+   & 0.304151786_wp, 0.250669643_wp, 0.838973214_wp, 0.330892857_wp, & 
+   & 0.892455357_wp, 0.411116071_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 1.801651786_wp, 0.304151786_wp, 0.357633929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 86) / &
+   & 1.935357143_wp, 6.000000000_wp, 0.437857143_wp, 0.250669643_wp, & 
+   & 1.641205357_wp, 1.507500000_wp, 2.229508929_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.223928571_wp, 0.116964286_wp, & 
+   & 2.069062500_wp, 1.801651786_wp, 2.951517857_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.090223214_wp, 0.411116071_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.223928571_wp, 0.357633929_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.411116071_wp, 0.437857143_wp, & 
+   & 0.972678571_wp, 0.491339286_wp, 1.881875000_wp, 1.855133929_wp, & 
+   & 3.192187500_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 0.063482143_wp, 0.384375000_wp, 0.250669643_wp, 0.304151786_wp, & 
+   & 0.304151786_wp, 0.437857143_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.384375000_wp, 0.437857143_wp, 0.999419643_wp, 0.518080357_wp, & 
+   & 1.801651786_wp, 1.480758929_wp, 3.058482143_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.063482143_wp, 0.384375000_wp, & 
+   & 0.223928571_wp, 6.000000000_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.277410714_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.464598214_wp, & 
+   & 0.411116071_wp, 0.197187500_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.544821429_wp, 0.705267857_wp, 2.229508929_wp, 0.785491071_wp, & 
+   & 1.587723214_wp, 1.240089286_wp, 2.389955357_wp, 5.491919643_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 0.357633929_wp, 2.229508929_wp, & 
+   & 0.304151786_wp, 0.812232143_wp, 0.865714286_wp, 0.384375000_wp, & 
+   & 0.357633929_wp, 0.277410714_wp, 0.838973214_wp, 0.357633929_wp, & 
+   & 0.972678571_wp, 0.437857143_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 1.962098214_wp, 0.330892857_wp, 0.384375000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 87) / &
+   & 0.785491071_wp, 1.748169643_wp, 0.090223214_wp, 0.197187500_wp, & 
+   & 0.357633929_wp, 0.838973214_wp, 0.865714286_wp, 0.945937500_wp, & 
+   & 1.106383929_wp, 1.320312500_wp, 0.170446429_wp, 0.090223214_wp, & 
+   & 0.197187500_wp, 0.304151786_wp, 0.411116071_wp, 0.491339286_wp, & 
+   & 0.571562500_wp, 0.651785714_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.250669643_wp, 0.197187500_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.464598214_wp, 0.518080357_wp, & 
+   & 0.036741071_wp, 0.116964286_wp, 0.116964286_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.090223214_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.250669643_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.304151786_wp, 0.063482143_wp, 0.063482143_wp, & 
+   & 0.063482143_wp, 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.063482143_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.277410714_wp, 0.330892857_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.063482143_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.090223214_wp, 0.143705357_wp, 0.116964286_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 88) / &
+   & 0.812232143_wp, 3.218928571_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.384375000_wp, 0.999419643_wp, 0.999419643_wp, 2.496919643_wp, & 
+   & 2.496919643_wp, 2.871294643_wp, 0.170446429_wp, 0.090223214_wp, & 
+   & 0.223928571_wp, 0.304151786_wp, 0.437857143_wp, 0.518080357_wp, & 
+   & 2.176026786_wp, 2.363214286_wp, 0.036741071_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.090223214_wp, 0.197187500_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.277410714_wp, 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, & 
+   & 2.176026786_wp, 0.464598214_wp, 0.518080357_wp, 2.282991071_wp, & 
+   & 0.036741071_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.090223214_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.277410714_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.411116071_wp, 2.256250000_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.357633929_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.304151786_wp, 0.357633929_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.277410714_wp, 0.330892857_wp, & 
+   & 0.357633929_wp, 2.229508929_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.090223214_wp, 0.143705357_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 89) / &
+   & 0.785491071_wp, 1.988839286_wp, 0.223928571_wp, 0.170446429_wp, & 
+   & 0.357633929_wp, 0.705267857_wp, 0.838973214_wp, 1.052901786_wp, & 
+   & 1.400535714_wp, 1.534241071_wp, 0.170446429_wp, 0.090223214_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.357633929_wp, 0.437857143_wp, & 
+   & 0.518080357_wp, 0.598303571_wp, 0.036741071_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.330892857_wp, 0.384375000_wp, 0.411116071_wp, 0.464598214_wp, & 
+   & 0.036741071_wp, 0.143705357_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.223928571_wp, 0.090223214_wp, 0.143705357_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.277410714_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.223928571_wp, 0.304151786_wp, 0.304151786_wp, 0.304151786_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.304151786_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.197187500_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.223928571_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 90) / &
+   & 1.106383929_wp, 2.791071429_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.437857143_wp, 0.919196429_wp, 1.427276786_wp, 1.587723214_wp, & 
+   & 1.855133929_wp, 2.095803571_wp, 0.170446429_wp, 0.090223214_wp, & 
+   & 0.197187500_wp, 0.277410714_wp, 0.972678571_wp, 0.999419643_wp, & 
+   & 1.052901786_wp, 1.159866071_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 0.223928571_wp, 0.892455357_wp, & 
+   & 0.919196429_wp, 0.892455357_wp, 0.945937500_wp, 1.026160714_wp, & 
+   & 0.036741071_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.838973214_wp, 0.785491071_wp, & 
+   & 0.812232143_wp, 0.865714286_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.785491071_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.277410714_wp, 0.838973214_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.812232143_wp, 0.785491071_wp, & 
+   & 0.785491071_wp, 0.812232143_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.090223214_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.090223214_wp, 0.170446429_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 91) / &
+   & 1.079642857_wp, 3.780491071_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.357633929_wp, 0.838973214_wp, 1.694687500_wp, 2.042321429_wp, & 
+   & 2.389955357_wp, 2.737589286_wp, 0.143705357_wp, 0.090223214_wp, & 
+   & 0.197187500_wp, 0.732008929_wp, 0.919196429_wp, 1.186607143_wp, & 
+   & 1.293571429_wp, 1.454017857_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.865714286_wp, & 
+   & 0.945937500_wp, 0.892455357_wp, 0.999419643_wp, 1.240089286_wp, & 
+   & 0.063482143_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.785491071_wp, 0.945937500_wp, 0.250669643_wp, & 
+   & 0.812232143_wp, 0.945937500_wp, 0.036741071_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.250669643_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.250669643_wp, 0.945937500_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.972678571_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.865714286_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.090223214_wp, 0.090223214_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.170446429_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 92) / &
+   & 0.892455357_wp, 1.240089286_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.411116071_wp, 0.518080357_wp, 0.678526786_wp, 0.732008929_wp, & 
+   & 0.865714286_wp, 0.919196429_wp, 0.197187500_wp, 0.090223214_wp, & 
+   & 0.250669643_wp, 0.357633929_wp, 0.384375000_wp, 0.437857143_wp, & 
+   & 0.518080357_wp, 0.544821429_wp, 0.063482143_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.304151786_wp, 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.464598214_wp, 0.464598214_wp, & 
+   & 0.063482143_wp, 0.143705357_wp, 0.223928571_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.036741071_wp, 0.143705357_wp, & 
+   & 0.223928571_wp, 0.330892857_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.357633929_wp, 0.330892857_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.277410714_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.411116071_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 93) / &
+   & 1.293571429_wp, 3.245669643_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.919196429_wp, 0.812232143_wp, 1.480758929_wp, 1.828392857_wp, & 
+   & 2.149285714_wp, 2.470178571_wp, 0.143705357_wp, 0.090223214_wp, & 
+   & 1.079642857_wp, 0.785491071_wp, 0.625044643_wp, 0.758750000_wp, & 
+   & 0.865714286_wp, 1.026160714_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.223928571_wp, 1.855133929_wp, 0.277410714_wp, & 
+   & 0.411116071_wp, 0.571562500_wp, 0.678526786_wp, 0.838973214_wp, & 
+   & 0.063482143_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.892455357_wp, 0.223928571_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.384375000_wp, 0.544821429_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.277410714_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.812232143_wp, 0.330892857_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.838973214_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.357633929_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 94) / &
+   & 0.758750000_wp, 2.710848214_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.330892857_wp, 0.544821429_wp, 0.678526786_wp, 0.812232143_wp, & 
+   & 1.801651786_wp, 2.042321429_wp, 0.170446429_wp, 0.090223214_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.437857143_wp, 0.491339286_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, 0.384375000_wp, & 
+   & 0.063482143_wp, 0.143705357_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.250669643_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.277410714_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.197187500_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.250669643_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 95) / &
+   & 1.828392857_wp, 2.443437500_wp, 0.277410714_wp, 0.197187500_wp, & 
+   & 0.732008929_wp, 1.347053571_wp, 1.240089286_wp, 1.400535714_wp, & 
+   & 1.748169643_wp, 1.935357143_wp, 0.197187500_wp, 0.090223214_wp, & 
+   & 0.357633929_wp, 0.625044643_wp, 0.838973214_wp, 0.919196429_wp, & 
+   & 1.133125000_wp, 1.159866071_wp, 0.063482143_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.277410714_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.464598214_wp, 0.330892857_wp, 0.437857143_wp, 0.625044643_wp, & 
+   & 0.838973214_wp, 0.919196429_wp, 0.999419643_wp, 0.999419643_wp, & 
+   & 0.036741071_wp, 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.277410714_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.437857143_wp, 0.330892857_wp, & 
+   & 0.357633929_wp, 0.571562500_wp, 0.651785714_wp, 0.758750000_wp, & 
+   & 0.838973214_wp, 0.945937500_wp, 0.036741071_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.705267857_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.330892857_wp, 0.571562500_wp, 0.732008929_wp, 0.518080357_wp, & 
+   & 0.357633929_wp, 0.411116071_wp, 0.598303571_wp, 0.758750000_wp, & 
+   & 0.838973214_wp, 0.838973214_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.170446429_wp, 0.143705357_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.277410714_wp, 0.223928571_wp, & 
+   & 0.143705357_wp, 0.277410714_wp, 0.197187500_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 96) / &
+   & 0.945937500_wp, 2.550401786_wp, 0.250669643_wp, 0.197187500_wp, & 
+   & 0.411116071_wp, 1.186607143_wp, 1.266830357_wp, 1.507500000_wp, & 
+   & 1.694687500_wp, 1.935357143_wp, 0.197187500_wp, 0.090223214_wp, & 
+   & 0.250669643_wp, 0.330892857_wp, 0.411116071_wp, 0.491339286_wp, & 
+   & 0.571562500_wp, 0.651785714_wp, 0.063482143_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.143705357_wp, 0.250669643_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.304151786_wp, 0.277410714_wp, 0.277410714_wp, 0.330892857_wp, & 
+   & 0.384375000_wp, 0.411116071_wp, 0.464598214_wp, 0.518080357_wp, & 
+   & 0.036741071_wp, 0.170446429_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.250669643_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 0.277410714_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.036741071_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.330892857_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.250669643_wp, 0.330892857_wp, 0.357633929_wp, 0.330892857_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.330892857_wp, 0.357633929_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.223928571_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.277410714_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 97) / &
+   & 1.079642857_wp, 3.593303571_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.357633929_wp, 1.026160714_wp, 1.587723214_wp, 2.149285714_wp, & 
+   & 2.309732143_wp, 2.844553571_wp, 0.143705357_wp, 0.090223214_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.999419643_wp, 1.133125000_wp, & 
+   & 1.266830357_wp, 1.373794643_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.999419643_wp, 1.026160714_wp, 0.999419643_wp, 1.159866071_wp, & 
+   & 0.063482143_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.838973214_wp, 0.972678571_wp, & 
+   & 0.945937500_wp, 1.026160714_wp, 0.036741071_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.972678571_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.090223214_wp, 0.090223214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.838973214_wp, 0.250669643_wp, & 
+   & 1.828392857_wp, 0.170446429_wp, 0.197187500_wp, 0.945937500_wp, & 
+   & 0.892455357_wp, 0.972678571_wp, 0.090223214_wp, 0.090223214_wp, & 
+   & 0.116964286_wp, 0.090223214_wp, 0.090223214_wp, 0.170446429_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.090223214_wp, 0.170446429_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 98) / &
+   & 2.924776786_wp, 3.459598214_wp, 0.250669643_wp, 0.197187500_wp, & 
+   & 0.705267857_wp, 0.812232143_wp, 1.774910714_wp, 2.042321429_wp, & 
+   & 2.336473214_wp, 2.710848214_wp, 0.197187500_wp, 0.090223214_wp, & 
+   & 0.304151786_wp, 0.437857143_wp, 0.518080357_wp, 0.598303571_wp, & 
+   & 0.732008929_wp, 0.892455357_wp, 0.063482143_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.357633929_wp, 0.304151786_wp, 0.330892857_wp, 0.411116071_wp, & 
+   & 0.464598214_wp, 0.491339286_wp, 0.544821429_wp, 0.651785714_wp, & 
+   & 0.036741071_wp, 0.170446429_wp, 0.250669643_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.357633929_wp, 0.304151786_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.384375000_wp, 0.384375000_wp, & 
+   & 0.437857143_wp, 0.491339286_wp, 0.036741071_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.384375000_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.304151786_wp, 0.384375000_wp, 0.437857143_wp, 0.384375000_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, 0.384375000_wp, & 
+   & 0.411116071_wp, 0.437857143_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.223928571_wp, 0.170446429_wp, 0.170446429_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.277410714_wp, 0.277410714_wp, & 
+   & 0.170446429_wp, 0.223928571_wp, 0.223928571_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.384375000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 99) / &
+   & 0.732008929_wp, 2.764330357_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.330892857_wp, 1.774910714_wp, 2.042321429_wp, 0.732008929_wp, & 
+   & 2.122544643_wp, 2.336473214_wp, 0.170446429_wp, 0.090223214_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.411116071_wp, 0.464598214_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, 0.384375000_wp, & 
+   & 0.036741071_wp, 0.143705357_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.277410714_wp, 0.304151786_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.250669643_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.411116071_wp, & 
+   & 0.143705357_wp, 0.116964286_wp, 0.197187500_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.223928571_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 100) / &
+   & 1.052901786_wp, 3.620044643_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.357633929_wp, 1.454017857_wp, 1.881875000_wp, 2.550401786_wp, & 
+   & 2.550401786_wp, 3.031741071_wp, 0.143705357_wp, 0.090223214_wp, & 
+   & 0.197187500_wp, 0.250669643_wp, 0.304151786_wp, 0.411116071_wp, & 
+   & 0.945937500_wp, 1.320312500_wp, 0.063482143_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.330892857_wp, 0.384375000_wp, 0.598303571_wp, & 
+   & 0.036741071_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.223928571_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.250669643_wp, 0.250669643_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.090223214_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.170446429_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 101) / &
+   & 1.079642857_wp, 3.673526786_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.384375000_wp, 1.427276786_wp, 1.855133929_wp, 2.523660714_wp, & 
+   & 2.523660714_wp, 3.031741071_wp, 0.170446429_wp, 0.090223214_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.357633929_wp, 1.962098214_wp, & 
+   & 1.988839286_wp, 2.149285714_wp, 0.063482143_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.197187500_wp, 0.197187500_wp, & 
+   & 0.250669643_wp, 0.250669643_wp, 0.223928571_wp, 0.250669643_wp, & 
+   & 1.935357143_wp, 1.881875000_wp, 1.828392857_wp, 2.069062500_wp, & 
+   & 0.036741071_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.197187500_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.250669643_wp, 0.223928571_wp, & 
+   & 1.908616071_wp, 0.223928571_wp, 0.250669643_wp, 1.935357143_wp, & 
+   & 1.881875000_wp, 1.962098214_wp, 0.036741071_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 1.881875000_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.197187500_wp, 0.277410714_wp, 0.304151786_wp, 0.277410714_wp, & 
+   & 0.197187500_wp, 0.197187500_wp, 0.223928571_wp, 1.881875000_wp, & 
+   & 1.801651786_wp, 1.962098214_wp, 0.116964286_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.197187500_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.170446429_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.197187500_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.116964286_wp, 0.143705357_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 102) / &
+   & 1.106383929_wp, 3.700267857_wp, 0.223928571_wp, 0.197187500_wp, & 
+   & 0.411116071_wp, 1.507500000_wp, 1.881875000_wp, 2.470178571_wp, & 
+   & 2.603883929_wp, 3.005000000_wp, 0.143705357_wp, 0.090223214_wp, & 
+   & 0.223928571_wp, 0.304151786_wp, 0.384375000_wp, 1.721428571_wp, & 
+   & 1.881875000_wp, 1.935357143_wp, 0.063482143_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 0.223928571_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.223928571_wp, 0.223928571_wp, & 
+   & 0.277410714_wp, 0.250669643_wp, 1.908616071_wp, 0.277410714_wp, & 
+   & 0.357633929_wp, 1.694687500_wp, 1.694687500_wp, 1.855133929_wp, & 
+   & 0.036741071_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.197187500_wp, 0.223928571_wp, 0.277410714_wp, 0.250669643_wp, & 
+   & 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, & 
+   & 0.330892857_wp, 0.384375000_wp, 0.036741071_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.304151786_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.143705357_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.330892857_wp, 0.304151786_wp, & 
+   & 0.223928571_wp, 0.223928571_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.304151786_wp, 0.330892857_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.116964286_wp, 0.116964286_wp, 0.223928571_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.197187500_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.223928571_wp, 0.143705357_wp, 0.116964286_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.170446429_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 103) / &
+   & 1.079642857_wp, 2.550401786_wp, 0.223928571_wp, 0.170446429_wp, & 
+   & 0.464598214_wp, 1.106383929_wp, 1.320312500_wp, 1.507500000_wp, & 
+   & 1.774910714_wp, 1.935357143_wp, 0.170446429_wp, 0.090223214_wp, & 
+   & 0.277410714_wp, 0.357633929_wp, 0.437857143_wp, 0.518080357_wp, & 
+   & 0.625044643_wp, 0.732008929_wp, 0.036741071_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.197187500_wp, 0.143705357_wp, 0.250669643_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.250669643_wp, 0.277410714_wp, & 
+   & 0.330892857_wp, 0.304151786_wp, 0.304151786_wp, 0.357633929_wp, & 
+   & 0.411116071_wp, 0.464598214_wp, 0.518080357_wp, 0.571562500_wp, & 
+   & 0.036741071_wp, 0.170446429_wp, 0.143705357_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.250669643_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.223928571_wp, 0.277410714_wp, 0.304151786_wp, 0.304151786_wp, & 
+   & 0.250669643_wp, 0.304151786_wp, 0.330892857_wp, 0.357633929_wp, & 
+   & 0.384375000_wp, 0.437857143_wp, 0.036741071_wp, 0.143705357_wp, & 
+   & 0.116964286_wp, 0.357633929_wp, 0.143705357_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, 0.170446429_wp, & 
+   & 0.170446429_wp, 0.170446429_wp, 0.197187500_wp, 0.223928571_wp, & 
+   & 0.223928571_wp, 0.143705357_wp, 0.116964286_wp, 0.170446429_wp, & 
+   & 0.277410714_wp, 0.357633929_wp, 0.357633929_wp, 0.357633929_wp, & 
+   & 0.250669643_wp, 0.277410714_wp, 0.304151786_wp, 0.330892857_wp, & 
+   & 0.357633929_wp, 0.384375000_wp, 0.116964286_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.143705357_wp, 0.250669643_wp, & 
+   & 0.143705357_wp, 0.143705357_wp, 0.250669643_wp, 0.170446429_wp, & 
+   & 0.143705357_wp, 0.384375000_wp, 0.143705357_wp, 0.143705357_wp, & 
+   & 0.143705357_wp, 0.170446429_wp, 0.143705357_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 104) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 105) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 106) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 107) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 108) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 109) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 110) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 111) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 112) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 113) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 114) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 115) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 116) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 117) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+   data weight_factors(:, 118) / &
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, 6.000000000_wp, & 
+   & 6.000000000_wp, 6.000000000_wp /
+
+
+contains
+
+
+!> Get pairwise CN weighting factor for a given element symbol pair
+elemental function get_wfpair_val_sym(symi, symj) result(wfpair)
+
+   !> Element symbol i
+   character(len=*), intent(in) :: symi
+
+   !> Element symbol j
+   character(len=*), intent(in) :: symj
+
+   !> Pairwise CN weighting factor
+   real(wp) :: wfpair
+
+   wfpair = get_wfpair_val(to_number(symi), to_number(symj))
+
+end function get_wfpair_val_sym
+
+
+!> Get pairwise CN weighting factor for a given atomic number pair
+elemental function get_wfpair_val_num(numi, numj) result(wfpair)
+
+   !> Atomic number i
+   integer, intent(in) :: numi
+
+   !> Atomic number i
+   integer, intent(in) :: numj
+
+   !> Pairwise CN weighting factor
+   real(wp) :: wfpair
+
+   wfpair = weight_factors(numi, numj)
+
+end function get_wfpair_val_num
+
+
+end module dftd4_data_wfpair
diff --git a/src/dftd4/disp.f90 b/src/dftd4/disp.f90
index b5d6acd..0828d56 100644
--- a/src/dftd4/disp.f90
+++ b/src/dftd4/disp.f90
@@ -21,8 +21,8 @@ module dftd4_disp
    use dftd4_cutoff, only : realspace_cutoff, get_lattice_points
    use dftd4_damping, only : damping_param
    use dftd4_data, only : get_covalent_rad
-   use dftd4_model, only : d4_model
-   use dftd4_ncoord, only : get_coordination_number
+   use dftd4_model, only : dispersion_model
+   use dftd4_ncoord, only : get_coordination_number, add_coordination_number_derivs
    use mctc_env, only : wp
    use mctc_io, only : structure_type
    use mctc_io_convert, only : autoaa
@@ -43,7 +43,7 @@ subroutine get_dispersion(mol, disp, param, cutoff, energy, gradient, sigma)
    class(structure_type), intent(in) :: mol
 
    !> Dispersion model
-   class(d4_model), intent(in) :: disp
+   class(dispersion_model), intent(in) :: disp
 
    !> Damping parameters
    class(damping_param), intent(in) :: param
@@ -62,9 +62,9 @@ subroutine get_dispersion(mol, disp, param, cutoff, energy, gradient, sigma)
  
    logical :: grad
    integer :: mref
-   real(wp), allocatable :: cn(:), dcndr(:, :, :), dcndL(:, :, :)
+   real(wp), allocatable :: cn(:)
    real(wp), allocatable :: q(:), dqdr(:, :, :), dqdL(:, :, :)
-   real(wp), allocatable :: gwvec(:, :), gwdcn(:, :), gwdq(:, :)
+   real(wp), allocatable :: gwvec(:, :, :), gwdcn(:, :, :), gwdq(:, :, :)
    real(wp), allocatable :: c6(:, :), dc6dcn(:, :), dc6dq(:, :)
    real(wp), allocatable :: dEdcn(:), dEdq(:), energies(:)
    real(wp), allocatable :: lattr(:, :)
@@ -73,17 +73,15 @@ subroutine get_dispersion(mol, disp, param, cutoff, energy, gradient, sigma)
    grad = present(gradient).or.present(sigma)
 
    allocate(cn(mol%nat))
-   if (grad) allocate(dcndr(3, mol%nat, mol%nat), dcndL(3, 3, mol%nat))
    call get_lattice_points(mol%periodic, mol%lattice, cutoff%cn, lattr)
-   call get_coordination_number(mol, lattr, cutoff%cn, disp%rcov, disp%en, &
-      & cn, dcndr, dcndL)
+   call get_coordination_number(mol, lattr, cutoff%cn, disp%rcov, disp%en, cn)
 
    allocate(q(mol%nat))
    if (grad) allocate(dqdr(3, mol%nat, mol%nat), dqdL(3, 3, mol%nat))
    call get_charges(mol, q, dqdr, dqdL)
 
-   allocate(gwvec(mref, mol%nat))
-   if (grad) allocate(gwdcn(mref, mol%nat), gwdq(mref, mol%nat))
+   allocate(gwvec(mref, mol%nat, disp%ncoup))
+   if (grad) allocate(gwdcn(mref, mol%nat, disp%ncoup), gwdq(mref, mol%nat, disp%ncoup))
    call disp%weight_references(mol, cn, q, gwvec, gwdcn, gwdq)
 
    allocate(c6(mol%nat, mol%nat))
@@ -99,6 +97,7 @@ subroutine get_dispersion(mol, disp, param, cutoff, energy, gradient, sigma)
       gradient(:, :) = 0.0_wp
       sigma(:, :) = 0.0_wp
    end if
+
    call get_lattice_points(mol%periodic, mol%lattice, cutoff%disp2, lattr)
    call param%get_dispersion2(mol, lattr, cutoff%disp2, disp%r4r2, &
       & c6, dc6dcn, dc6dq, energies, dEdcn, dEdq, gradient, sigma)
@@ -115,8 +114,8 @@ subroutine get_dispersion(mol, disp, param, cutoff, energy, gradient, sigma)
    call param%get_dispersion3(mol, lattr, cutoff%disp3, disp%r4r2, &
       & c6, dc6dcn, dc6dq, energies, dEdcn, dEdq, gradient, sigma)
    if (grad) then
-      call d4_gemv(dcndr, dEdcn, gradient, beta=1.0_wp)
-      call d4_gemv(dcndL, dEdcn, sigma, beta=1.0_wp)
+      call add_coordination_number_derivs(mol, lattr, cutoff%cn, &
+         & disp%rcov, disp%en, dEdcn, gradient, sigma)
    end if
 
    energy = sum(energies)
@@ -132,7 +131,7 @@ subroutine get_properties(mol, disp, cutoff, cn, q, c6, alpha)
    class(structure_type), intent(in) :: mol
 
    !> Dispersion model
-   class(d4_model), intent(in) :: disp
+   class(dispersion_model), intent(in) :: disp
 
    !> Realspace cutoffs
    type(realspace_cutoff), intent(in) :: cutoff
@@ -150,7 +149,7 @@ subroutine get_properties(mol, disp, cutoff, cn, q, c6, alpha)
    real(wp), intent(out) :: alpha(:)
 
    integer :: mref
-   real(wp), allocatable :: gwvec(:, :), lattr(:, :)
+   real(wp), allocatable :: gwvec(:, :, :), lattr(:, :)
 
    mref = maxval(disp%ref)
 
@@ -159,7 +158,7 @@ subroutine get_properties(mol, disp, cutoff, cn, q, c6, alpha)
 
    call get_charges(mol, q)
 
-   allocate(gwvec(mref, mol%nat))
+   allocate(gwvec(mref, mol%nat, disp%ncoup))
    call disp%weight_references(mol, cn, q, gwvec)
 
    call disp%get_atomic_c6(mol, gwvec, c6=c6)
@@ -176,7 +175,7 @@ subroutine get_pairwise_dispersion(mol, disp, param, cutoff, energy2, energy3)
    class(structure_type), intent(in) :: mol
 
    !> Dispersion model
-   class(d4_model), intent(in) :: disp
+   class(dispersion_model), intent(in) :: disp
 
    !> Damping parameters
    class(damping_param), intent(in) :: param
@@ -191,7 +190,7 @@ subroutine get_pairwise_dispersion(mol, disp, param, cutoff, energy2, energy3)
    real(wp), intent(out) :: energy3(:, :)
 
    integer :: mref
-   real(wp), allocatable :: cn(:), q(:), gwvec(:, :), c6(:, :), lattr(:, :)
+   real(wp), allocatable :: cn(:), q(:), gwvec(:, :, :), c6(:, :), lattr(:, :)
 
    mref = maxval(disp%ref)
 
@@ -202,7 +201,7 @@ subroutine get_pairwise_dispersion(mol, disp, param, cutoff, energy2, energy3)
    allocate(q(mol%nat))
    call get_charges(mol, q)
 
-   allocate(gwvec(mref, mol%nat))
+   allocate(gwvec(mref, mol%nat, disp%ncoup))
    call disp%weight_references(mol, cn, q, gwvec)
 
    allocate(c6(mol%nat, mol%nat))
diff --git a/src/dftd4/meson.build b/src/dftd4/meson.build
index 17ef63f..2ece928 100644
--- a/src/dftd4/meson.build
+++ b/src/dftd4/meson.build
@@ -16,6 +16,7 @@
 
 subdir('damping')
 subdir('data')
+subdir('model')
 
 srcs += files(
   'blas.F90',
diff --git a/src/dftd4/model.f90 b/src/dftd4/model.f90
index 3148f63..7d422a6 100644
--- a/src/dftd4/model.f90
+++ b/src/dftd4/model.f90
@@ -14,792 +14,16 @@
 ! You should have received a copy of the Lesser GNU General Public License
 ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
 
-!> Definition of the D4 dispersion model for the evaluation of C6 coefficients.
+!> Re-export of all dispersion models
 module dftd4_model
-   use, intrinsic :: iso_fortran_env, only : output_unit
-   use ieee_arithmetic, only : ieee_is_nan
-   use dftd4_data, only : get_covalent_rad, get_r4r2_val, get_effective_charge, &
-      get_electronegativity, get_hardness
-   use dftd4_reference
-   use mctc_env, only : error_type, fatal_error, wp
-   use mctc_io, only : structure_type
-   use mctc_io_constants, only : pi
+   use dftd4_model_type, only : dispersion_model, d4_ref
+   use dftd4_model_d4, only : d4_model, new_d4_model
+   use dftd4_model_d4s, only : d4s_model, new_d4s_model
    implicit none
    private
 
-   public :: d4_model, new_d4_model, d4_ref
-
-
-   !> Base D4 dispersion model to evaluate C6 coefficients
-   type :: d4_model
-
-      !> Charge scaling height
-      real(wp) :: ga
-
-      !> Charge scaling steepness
-      real(wp) :: gc
-
-      !> Weighting factor for CN interpolation
-      real(wp) :: wf
-
-      !> Effective nuclear charges
-      real(wp), allocatable :: zeff(:)
-
-      !> Chemical hardness
-      real(wp), allocatable :: eta(:)
-
-      !> Electronegativity
-      real(wp), allocatable :: en(:)
-
-      !> Covalent radii for coordination number
-      real(wp), allocatable :: rcov(:)
-
-      !> Expectation values for C8 extrapolation
-      real(wp), allocatable :: r4r2(:)
-
-      !> Number of reference systems
-      integer, allocatable :: ref(:)
-
-      !> Number of Gaussian weights for each reference
-      integer, allocatable :: ngw(:, :)
-
-      !> Reference coordination numbers
-      real(wp), allocatable :: cn(:, :)
-
-      !> Reference partial charges
-      real(wp), allocatable :: q(:, :)
-
-      !> Reference dynamic polarizibilities
-      real(wp), allocatable :: aiw(:, :, :)
-
-      !> Reference C6 coefficients
-      real(wp), allocatable :: c6(:, :, :, :)
-
-   contains
-
-      !> Generate weights for all reference systems
-      procedure :: weight_references
-
-      !> Evaluate C6 coefficient
-      procedure :: get_atomic_c6
-
-      !> Evaluate atomic polarizibilities
-      procedure :: get_polarizibilities
-
-   end type d4_model
-
-
-   !> Default maximum charge scaling height for partial charge extrapolation
-   real(wp), parameter :: ga_default = 3.0_wp
-
-   !> Default charge scaling steepness for partial charge extrapolation
-   real(wp), parameter :: gc_default = 2.0_wp
-
-   !> Default weighting factor for coordination number interpolation
-   real(wp), parameter :: wf_default = 6.0_wp
-
-
-   !> Possible reference charges for D4
-   type :: enum_ref
-
-      !> Electronegativity equilibration charges
-      integer :: eeq = 1
-
-      !> GFN2-xTB Mulliken partial charges
-      integer :: gfn2 = 2
-
-   end type enum_ref
-
-   !> Actual enumerator for D4 reference charges
-   type(enum_ref), parameter :: d4_ref = enum_ref()
-   !DEC$ ATTRIBUTES DLLEXPORT :: d4_ref
-
-   !> Create new dispersion model from molecular structure input
-   interface new_d4_model
-      module procedure :: new_d4_model_no_checks
-      module procedure :: new_d4_model_with_checks
-   end interface new_d4_model
-
-contains
-
-
-!> Create new dispersion model from molecular structure input
-subroutine new_d4_model_with_checks(error, d4, mol, ga, gc, wf, ref)
-   !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_with_checks
-
-   !> Instance of the dispersion model
-   type(d4_model), intent(out) :: d4
-
-   !> Molecular structure data
-   class(structure_type), intent(in) :: mol
-
-   !> Error handling
-   type(error_type), allocatable, intent(out) :: error
-
-   !> Charge scaling height
-   real(wp), intent(in), optional :: ga
-
-   !> Charge scaling steepness
-   real(wp), intent(in), optional :: gc
-
-   !> Weighting factor for coordination number interpolation
-   real(wp), intent(in), optional :: wf
-
-   !> Reference charge selection
-   integer, intent(in), optional :: ref
-
-   integer :: isp, izp, iref, jsp, jzp, jref
-   integer :: mref, ref_charge
-   real(wp) :: aiw(23), c6
-   real(wp), parameter :: thopi = 3.0_wp/pi
-
-   ! check for unsupported elements (104 (Rf) - 111 (Rg))
-   do isp = 1, mol%nid
-      if (mol%num(isp) > 103 .and. mol%num(isp) < 112) then
-         call fatal_error(error, "Structure contains unsupported element '"//trim(mol%sym(isp))//"'")
-         return
-      end if
-   end do
-
-   if (present(ref)) then
-      ref_charge = ref
-   else
-      ref_charge = d4_ref%eeq
-   end if
-
-   if (present(ga)) then
-      d4%ga = ga
-   else
-      d4%ga = ga_default
-   end if
-
-   if (present(gc)) then
-      d4%gc = gc
-   else
-      d4%gc = gc_default
-   end if
-
-   if (present(wf)) then
-      d4%wf = wf
-   else
-      d4%wf = wf_default
-   end if
-
-   allocate(d4%rcov(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%rcov(isp) = get_covalent_rad(izp)
-   end do
-
-   allocate(d4%en(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%en(isp) = get_electronegativity(izp)
-   end do
-
-   allocate(d4%zeff(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%zeff(isp) = get_effective_charge(izp)
-   end do
-
-   allocate(d4%eta(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%eta(isp) = get_hardness(izp)
-   end do
-
-   allocate(d4%r4r2(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%r4r2(isp) = get_r4r2_val(izp)
-   end do
-
-   allocate(d4%ref(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%ref(isp) = get_nref(izp)
-   end do
-
-   mref = maxval(d4%ref)
-   allocate(d4%cn(mref, mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      call set_refcn(d4%cn(:, isp), izp)
-   end do
-
-   allocate(d4%q(mref, mol%nid))
-   allocate(d4%aiw(23, mref, mol%nid))
-   select case(ref_charge)
-   case default
-      call fatal_error(error, "Unsupported option for reference charges")
-      return
-   case(d4_ref%eeq)
-      do isp = 1, mol%nid
-         izp = mol%num(isp)
-         call set_refq_eeq(d4%q(:, isp), izp)
-         call set_refalpha_eeq(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
-      end do
-   case(d4_ref%gfn2)
-      do isp = 1, mol%nid
-         izp = mol%num(isp)
-         call set_refq_gfn2(d4%q(:, isp), izp)
-         call set_refalpha_gfn2(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
-      end do
-   end select
-
-   allocate(d4%ngw(mref, mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      call set_refgw(d4%ngw(:, isp), izp)
-   end do
-
-   allocate(d4%c6(mref, mref, mol%nid, mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      do jsp = 1, isp
-         jzp = mol%num(jsp)
-         do iref = 1, d4%ref(isp)
-            do jref = 1, d4%ref(jsp)
-               aiw(:) = d4%aiw(:, iref, isp) * d4%aiw(:, jref, jsp)
-               c6 = thopi * trapzd(aiw)
-               d4%c6(jref, iref, jsp, isp) = c6
-               d4%c6(iref, jref, isp, jsp) = c6
-            end do
-         end do
-      end do
-   end do
-
-end subroutine new_d4_model_with_checks
-
-!> Create new dispersion model from molecular structure input without
-!> checking for supported elements (old/compatibility version)
-subroutine new_d4_model_no_checks(d4, mol, ga, gc, wf, ref)
-   !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_no_checks
-
-   !> Instance of the dispersion model
-   type(d4_model), intent(out) :: d4
-
-   !> Molecular structure data
-   class(structure_type), intent(in) :: mol
-
-   !> Charge scaling height
-   real(wp), intent(in), optional :: ga
-
-   !> Charge scaling steepness
-   real(wp), intent(in), optional :: gc
-
-   !> Weighting factor for coordination number interpolation
-   real(wp), intent(in), optional :: wf
-
-   !> Reference charge selection
-   integer, intent(in), optional :: ref
-
-   integer :: isp, izp, iref, jsp, jzp, jref
-   integer :: mref, ref_charge
-   real(wp) :: aiw(23), c6
-   real(wp), parameter :: thopi = 3.0_wp/pi
-
-   if (present(ref)) then
-      ref_charge = ref
-   else
-      ref_charge = d4_ref%eeq
-   end if
-
-   if (present(ga)) then
-      d4%ga = ga
-   else
-      d4%ga = ga_default
-   end if
-
-   if (present(gc)) then
-      d4%gc = gc
-   else
-      d4%gc = gc_default
-   end if
-
-   if (present(wf)) then
-      d4%wf = wf
-   else
-      d4%wf = wf_default
-   end if
-
-   allocate(d4%rcov(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%rcov(isp) = get_covalent_rad(izp)
-   end do
-
-   allocate(d4%en(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%en(isp) = get_electronegativity(izp)
-   end do
-
-   allocate(d4%zeff(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%zeff(isp) = get_effective_charge(izp)
-   end do
-
-   allocate(d4%eta(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%eta(isp) = get_hardness(izp)
-   end do
-
-   allocate(d4%r4r2(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%r4r2(isp) = get_r4r2_val(izp)
-   end do
-
-   allocate(d4%ref(mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      d4%ref(isp) = get_nref(izp)
-   end do
-
-   mref = maxval(d4%ref)
-   allocate(d4%cn(mref, mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      call set_refcn(d4%cn(:, isp), izp)
-   end do
-
-   allocate(d4%q(mref, mol%nid))
-   allocate(d4%aiw(23, mref, mol%nid))
-   if (ref_charge == d4_ref%gfn2) then
-      do isp = 1, mol%nid
-         izp = mol%num(isp)
-         call set_refq_gfn2(d4%q(:, isp), izp)
-         call set_refalpha_gfn2(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
-      end do
-   else
-      if (ref_charge /= d4_ref%eeq) then
-         write(output_unit, '(a)') "[Info] Unsupported option for reference charge. Defaulting to EEQ charges."
-      end if
-      do isp = 1, mol%nid
-         izp = mol%num(isp)
-         call set_refq_eeq(d4%q(:, isp), izp)
-         call set_refalpha_eeq(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
-      end do
-   end if
-
-   allocate(d4%ngw(mref, mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      call set_refgw(d4%ngw(:, isp), izp)
-   end do
-
-   allocate(d4%c6(mref, mref, mol%nid, mol%nid))
-   do isp = 1, mol%nid
-      izp = mol%num(isp)
-      do jsp = 1, isp
-         jzp = mol%num(jsp)
-         do iref = 1, d4%ref(isp)
-            do jref = 1, d4%ref(jsp)
-               aiw(:) = d4%aiw(:, iref, isp) * d4%aiw(:, jref, jsp)
-               c6 = thopi * trapzd(aiw)
-               d4%c6(jref, iref, jsp, isp) = c6
-               d4%c6(iref, jref, isp, jsp) = c6
-            end do
-         end do
-      end do
-   end do
-
-end subroutine new_d4_model_no_checks
-
-
-!> Calculate the weights of the reference system and the derivatives w.r.t.
-!> coordination number for later use.
-subroutine weight_references(self, mol, cn, q, gwvec, gwdcn, gwdq)
-   !DEC$ ATTRIBUTES DLLEXPORT :: weight_references
-
-   !> Instance of the dispersion model
-   class(d4_model), intent(in) :: self
-
-   !> Molecular structure data
-   class(structure_type), intent(in) :: mol
-
-   !> Coordination number of every atom
-   real(wp), intent(in) :: cn(:)
-
-   !> Partial charge of every atom
-   real(wp), intent(in) :: q(:)
-
-   !> weighting for the atomic reference systems
-   real(wp), intent(out) :: gwvec(:, :)
-
-   !> derivative of the weighting function w.r.t. the coordination number
-   real(wp), intent(out), optional :: gwdcn(:, :)
-
-   !> derivative of the weighting function w.r.t. the charge scaling
-   real(wp), intent(out), optional :: gwdq(:, :)
-
-   integer :: iat, izp, iref, igw
-   real(wp) :: norm, dnorm, gw, expw, expd, gwk, dgwk, wf, zi, gi, maxcn
-
-   if (present(gwdcn) .and. present(gwdq)) then
-      gwvec(:, :) = 0.0_wp
-      gwdcn(:, :) = 0.0_wp
-      gwdq(:, :) = 0.0_wp
-
-      !$omp parallel do default(none) schedule(runtime) &
-      !$omp shared(gwvec, gwdcn, gwdq, mol, self, cn, q) private(iat, izp, iref, &
-      !$omp& igw, norm, dnorm, gw, expw, expd, gwk, dgwk, wf, zi, gi, maxcn)
-      do iat = 1, mol%nat
-         izp = mol%id(iat)
-         zi = self%zeff(izp)
-         gi = self%eta(izp) * self%gc
-         norm = 0.0_wp
-         dnorm = 0.0_wp
-         do iref = 1, self%ref(izp)
-            do igw = 1, self%ngw(iref, izp)
-               wf = igw * self%wf
-               gw = weight_cn(wf, cn(iat), self%cn(iref, izp))
-               norm = norm + gw
-               dnorm = dnorm + 2*wf * (self%cn(iref, izp) - cn(iat)) * gw
-            end do
-         end do
-         norm = 1.0_wp / norm
-         do iref = 1, self%ref(izp)
-            expw = 0.0_wp
-            expd = 0.0_wp
-            do igw = 1, self%ngw(iref, izp)
-               wf = igw * self%wf
-               gw = weight_cn(wf, cn(iat), self%cn(iref, izp))
-               expw = expw + gw
-               expd = expd + 2*wf * (self%cn(iref, izp) - cn(iat)) * gw
-            end do
-            gwk = expw * norm
-            if (is_exceptional(gwk)) then
-               maxcn = maxval(self%cn(:self%ref(izp), izp))
-               if (abs(maxcn - self%cn(iref, izp)) < 1e-12_wp) then
-                  gwk = 1.0_wp
-               else
-                  gwk = 0.0_wp
-               end if
-            end if
-            gwvec(iref, iat) = gwk * zeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
-            gwdq(iref, iat) = gwk * dzeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
-
-            dgwk = norm * (expd - expw * dnorm * norm)
-            if (is_exceptional(dgwk)) then
-               dgwk = 0.0_wp
-            end if
-            gwdcn(iref, iat) = dgwk * zeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
-         end do
-      end do
-
-   else
-
-      gwvec(:, :) = 0.0_wp
-
-      !$omp parallel do default(none) schedule(runtime) &
-      !$omp shared(gwvec, mol, self, cn, q) &
-      !$omp private(iat, izp, iref, igw, norm, gw, expw, gwk, wf, zi, gi, maxcn)
-      do iat = 1, mol%nat
-         izp = mol%id(iat)
-         zi = self%zeff(izp)
-         gi = self%eta(izp) * self%gc
-         norm = 0.0_wp
-         do iref = 1, self%ref(izp)
-            do igw = 1, self%ngw(iref, izp)
-               wf = igw * self%wf
-               norm = norm + weight_cn(wf, cn(iat), self%cn(iref, izp))
-            end do
-         end do
-         norm = 1.0_wp / norm
-         do iref = 1, self%ref(izp)
-            expw = 0.0_wp
-            do igw = 1, self%ngw(iref, izp)
-               wf = igw * self%wf
-               expw = expw + weight_cn(wf, cn(iat), self%cn(iref, izp))
-            end do
-            gwk = expw * norm
-            if (is_exceptional(gwk)) then
-               maxcn = maxval(self%cn(:self%ref(izp), izp))
-               if (abs(maxcn - self%cn(iref, izp)) < 1e-12_wp) then
-                  gwk = 1.0_wp
-               else
-                  gwk = 0.0_wp
-               end if
-            end if
-            gwvec(iref, iat) = gwk * zeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
-         end do
-      end do
-   end if
-
-end subroutine weight_references
-
-
-!> Check whether we are dealing with an exceptional value, NaN or Inf
-elemental function is_exceptional(val)
-   real(wp), intent(in) :: val
-   logical :: is_exceptional
-   is_exceptional = ieee_is_nan(val) .or. abs(val) > huge(val)
-end function is_exceptional
-
-
-!> Calculate atomic dispersion coefficients and their derivatives w.r.t.
-!> the coordination numbers and atomic partial charges.
-subroutine get_atomic_c6(self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq)
-   !DEC$ ATTRIBUTES DLLEXPORT :: get_atomic_c6
-
-   !> Instance of the dispersion model
-   class(d4_model), intent(in) :: self
-
-   !> Molecular structure data
-   class(structure_type), intent(in) :: mol
-
-   !> Weighting function for the atomic reference systems
-   real(wp), intent(in) :: gwvec(:, :)
-
-   !> Derivative of the weighting function w.r.t. the coordination number
-   real(wp), intent(in), optional :: gwdcn(:, :)
-
-   !> Derivative of the weighting function w.r.t. the partial charge
-   real(wp), intent(in), optional :: gwdq(:, :)
-
-   !> C6 coefficients for all atom pairs.
-   real(wp), intent(out) :: c6(:, :)
-
-   !> Derivative of the C6 w.r.t. the coordination number
-   real(wp), intent(out), optional :: dc6dcn(:, :)
-
-   !> Derivative of the C6 w.r.t. the partial charge
-   real(wp), intent(out), optional :: dc6dq(:, :)
-
-   integer :: iat, jat, izp, jzp, iref, jref
-   real(wp) :: refc6, dc6, dc6dcni, dc6dcnj, dc6dqi, dc6dqj
-
-   if (present(gwdcn).and.present(dc6dcn) &
-      & .and.present(gwdq).and.present(dc6dq)) then
-      c6(:, :) = 0.0_wp
-      dc6dcn(:, :) = 0.0_wp
-      dc6dq(:, :) = 0.0_wp
-
-      !$omp parallel do default(none) schedule(runtime) &
-      !$omp shared(c6, dc6dcn, dc6dq, mol, self, gwvec, gwdcn, gwdq) &
-      !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6, dc6dqi, dc6dqj, &
-      !$omp& dc6dcni, dc6dcnj)
-      do iat = 1, mol%nat
-         izp = mol%id(iat)
-         do jat = 1, iat
-            jzp = mol%id(jat)
-            dc6 = 0.0_wp
-            dc6dcni = 0.0_wp
-            dc6dcnj = 0.0_wp
-            dc6dqi = 0.0_wp
-            dc6dqj = 0.0_wp
-            do iref = 1, self%ref(izp)
-               do jref = 1, self%ref(jzp)
-                  refc6 = self%c6(iref, jref, izp, jzp)
-                  dc6 = dc6 + gwvec(iref, iat) * gwvec(jref, jat) * refc6
-                  dc6dcni = dc6dcni + gwdcn(iref, iat) * gwvec(jref, jat) * refc6
-                  dc6dcnj = dc6dcnj + gwvec(iref, iat) * gwdcn(jref, jat) * refc6
-                  dc6dqi = dc6dqi + gwdq(iref, iat) * gwvec(jref, jat) * refc6
-                  dc6dqj = dc6dqj + gwvec(iref, iat) * gwdq(jref, jat) * refc6
-               end do
-            end do
-            c6(iat, jat) = dc6
-            c6(jat, iat) = dc6
-            dc6dcn(iat, jat) = dc6dcni
-            dc6dcn(jat, iat) = dc6dcnj
-            dc6dq(iat, jat) = dc6dqi
-            dc6dq(jat, iat) = dc6dqj
-         end do
-      end do
-
-   else
-
-      c6(:, :) = 0.0_wp
-
-      !$omp parallel do default(none) schedule(runtime) &
-      !$omp shared(c6, mol, self, gwvec) &
-      !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6)
-      do iat = 1, mol%nat
-         izp = mol%id(iat)
-         do jat = 1, iat
-            jzp = mol%id(jat)
-            dc6 = 0.0_wp
-            do iref = 1, self%ref(izp)
-               do jref = 1, self%ref(jzp)
-                  refc6 = self%c6(iref, jref, izp, jzp)
-                  dc6 = dc6 + gwvec(iref, iat) * gwvec(jref, jat) * refc6
-               end do
-            end do
-            c6(iat, jat) = dc6
-            c6(jat, iat) = dc6
-         end do
-      end do
-   end if
-
-end subroutine get_atomic_c6
-
-
-!> Calculate atomic polarizibilities and their derivatives w.r.t.
-!> the coordination numbers and atomic partial charges.
-subroutine get_polarizibilities(self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq)
-   !DEC$ ATTRIBUTES DLLEXPORT :: get_polarizibilities
-   !> Instance of the dispersion model
-   class(d4_model), intent(in) :: self
-
-   !> Molecular structure data
-   class(structure_type), intent(in) :: mol
-
-   !> Weighting function for the atomic reference systems
-   real(wp), intent(in) :: gwvec(:, :)
-
-   !> Derivative of the weighting function w.r.t. the coordination number
-   real(wp), intent(in), optional :: gwdcn(:, :)
-
-   !> Derivative of the weighting function w.r.t. the partial charge
-   real(wp), intent(in), optional :: gwdq(:, :)
-
-   !> Static polarizibilities for all atoms.
-   real(wp), intent(out) :: alpha(:)
-
-   !> Derivative of the polarizibility w.r.t. the coordination number
-   real(wp), intent(out), optional :: dadcn(:)
-
-   !> Derivative of the polarizibility w.r.t. the partial charge
-   real(wp), intent(out), optional :: dadq(:)
-
-   integer :: iat, izp, iref
-   real(wp) :: refa, da, dadcni, dadqi
-
-   if (present(gwdcn).and.present(dadcn) &
-      & .and.present(gwdq).and.present(dadq)) then
-      alpha(:) = 0.0_wp
-      dadcn(:) = 0.0_wp
-      dadq(:) = 0.0_wp
-
-      !$omp parallel do default(none) schedule(runtime) &
-      !$omp shared(alpha, dadcn, dadq, mol, self, gwvec, gwdcn, gwdq) &
-      !$omp private(iat, izp, iref, refa, da, dadqi, dadcni)
-      do iat = 1, mol%nat
-         izp = mol%id(iat)
-         da = 0.0_wp
-         dadcni = 0.0_wp
-         dadqi = 0.0_wp
-         do iref = 1, self%ref(izp)
-            refa = self%aiw(1, iref, izp)
-            da = da + gwvec(iref, iat) * refa
-            dadcni = dadcni + gwdcn(iref, iat) * refa
-            dadqi = dadqi + gwdq(iref, iat) * refa
-         end do
-         alpha(iat) = da
-         dadcn(iat) = dadcni
-         dadq(iat) = dadqi
-      end do
-
-   else
-
-      alpha(:) = 0.0_wp
-
-      !$omp parallel do default(none) schedule(runtime) &
-      !$omp shared(alpha, mol, self, gwvec) private(iat, izp, iref, refa, da)
-      do iat = 1, mol%nat
-         izp = mol%id(iat)
-         da = 0.0_wp
-         do iref = 1, self%ref(izp)
-            da = da + gwvec(iref, iat) * self%aiw(1, iref, izp)
-         end do
-         alpha(iat) = da
-      end do
-   end if
-
-end subroutine get_polarizibilities
-
-
-elemental function weight_cn(wf,cn,cnref) result(cngw)
-   real(wp),intent(in) :: wf, cn, cnref
-   real(wp) :: cngw
-   intrinsic :: exp
-   cngw = exp ( -wf * ( cn - cnref )**2 )
-end function weight_cn
-
-!> charge scaling function
-elemental function zeta(a, c, qref, qmod)
-   real(wp), intent(in) :: a
-   real(wp), intent(in) :: c
-   real(wp), intent(in) :: qref
-   real(wp), intent(in) :: qmod
-   real(wp) :: zeta
-
-   intrinsic :: exp
-
-   if (qmod < 0.0_wp) then
-      zeta = exp( a )
-   else
-      zeta = exp( a * ( 1.0_wp - exp( c * ( 1.0_wp - qref/qmod ) ) ) )
-   endif
-
-end function zeta
-
-!> derivative of charge scaling function w.r.t. charge
-elemental function dzeta(a, c, qref, qmod)
-   real(wp), intent(in) :: a
-   real(wp), intent(in) :: c
-   real(wp), intent(in) :: qref
-   real(wp), intent(in) :: qmod
-   real(wp) :: dzeta
-
-   intrinsic :: exp
-
-   if (qmod < 0.0_wp) then
-      dzeta = 0.0_wp
-   else
-      dzeta = - a * c * exp( c * ( 1.0_wp - qref/qmod ) ) &
-         & * zeta(a,c,qref,qmod) * qref / ( qmod**2 )
-   endif
-
-end function dzeta
-
-!> numerical Casimir--Polder integration
-pure function trapzd(pol)
-   real(wp), intent(in) :: pol(23)
-   real(wp) :: trapzd
-
-   real(wp), parameter :: freq(23) = [ &
-      & 0.000001_wp, 0.050000_wp, 0.100000_wp, &
-      & 0.200000_wp, 0.300000_wp, 0.400000_wp, &
-      & 0.500000_wp, 0.600000_wp, 0.700000_wp, &
-      & 0.800000_wp, 0.900000_wp, 1.000000_wp, &
-      & 1.200000_wp, 1.400000_wp, 1.600000_wp, &
-      & 1.800000_wp, 2.000000_wp, 2.500000_wp, &
-      & 3.000000_wp, 4.000000_wp, 5.000000_wp, &
-      & 7.500000_wp, 10.00000_wp]
-   real(wp), parameter :: weights(23) = 0.5_wp * [ &
-      &  ( freq (2) - freq (1) ),  &
-      &  ( freq (2) - freq (1) ) + ( freq (3) - freq (2) ),  &
-      &  ( freq (3) - freq (2) ) + ( freq (4) - freq (3) ),  &
-      &  ( freq (4) - freq (3) ) + ( freq (5) - freq (4) ),  &
-      &  ( freq (5) - freq (4) ) + ( freq (6) - freq (5) ),  &
-      &  ( freq (6) - freq (5) ) + ( freq (7) - freq (6) ),  &
-      &  ( freq (7) - freq (6) ) + ( freq (8) - freq (7) ),  &
-      &  ( freq (8) - freq (7) ) + ( freq (9) - freq (8) ),  &
-      &  ( freq (9) - freq (8) ) + ( freq(10) - freq (9) ),  &
-      &  ( freq(10) - freq (9) ) + ( freq(11) - freq(10) ),  &
-      &  ( freq(11) - freq(10) ) + ( freq(12) - freq(11) ),  &
-      &  ( freq(12) - freq(11) ) + ( freq(13) - freq(12) ),  &
-      &  ( freq(13) - freq(12) ) + ( freq(14) - freq(13) ),  &
-      &  ( freq(14) - freq(13) ) + ( freq(15) - freq(14) ),  &
-      &  ( freq(15) - freq(14) ) + ( freq(16) - freq(15) ),  &
-      &  ( freq(16) - freq(15) ) + ( freq(17) - freq(16) ),  &
-      &  ( freq(17) - freq(16) ) + ( freq(18) - freq(17) ),  &
-      &  ( freq(18) - freq(17) ) + ( freq(19) - freq(18) ),  &
-      &  ( freq(19) - freq(18) ) + ( freq(20) - freq(19) ),  &
-      &  ( freq(20) - freq(19) ) + ( freq(21) - freq(20) ),  &
-      &  ( freq(21) - freq(20) ) + ( freq(22) - freq(21) ),  &
-      &  ( freq(22) - freq(21) ) + ( freq(23) - freq(22) ),  &
-      &  ( freq(23) - freq(22) ) ]
-
-   trapzd = sum(pol*weights)
-
-end function trapzd
-
+   public :: dispersion_model, d4_ref
+   public :: d4_model, new_d4_model
+   public :: d4s_model, new_d4s_model
 
 end module dftd4_model
diff --git a/config/cmake/Findcustom-blas.cmake b/src/dftd4/model/CMakeLists.txt
similarity index 62%
rename from config/cmake/Findcustom-blas.cmake
rename to src/dftd4/model/CMakeLists.txt
index f09e1bf..1524e23 100644
--- a/config/cmake/Findcustom-blas.cmake
+++ b/src/dftd4/model/CMakeLists.txt
@@ -14,15 +14,14 @@
 # You should have received a copy of the GNU Lesser General Public License
 # along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
 
-if(NOT BLAS_FOUND)
-  if("${BLA_VENDOR}" MATCHES "^Intel" OR DEFINED ENV{MKLROOT})
-    # C must be enabled to use MKL
-    # https://cmake.org/cmake/help/v3.14/module/FindBLAS.html#result-variables
-    enable_language("C")
-  endif()
-  find_package("BLAS" REQUIRED)
-  if(NOT TARGET "BLAS::BLAS")
-    add_library("BLAS::BLAS" INTERFACE IMPORTED)
-    target_link_libraries("BLAS::BLAS" INTERFACE "${BLAS_LIBRARIES}")
-  endif()
-endif()
+set(dir "${CMAKE_CURRENT_SOURCE_DIR}")
+
+list(
+  APPEND srcs
+  "${dir}/d4.f90"
+  "${dir}/d4s.f90"
+  "${dir}/type.f90"
+  "${dir}/utils.f90"
+)
+
+set(srcs "${srcs}" PARENT_SCOPE)
diff --git a/src/dftd4/model/d4.f90 b/src/dftd4/model/d4.f90
new file mode 100644
index 0000000..ba8b243
--- /dev/null
+++ b/src/dftd4/model/d4.f90
@@ -0,0 +1,661 @@
+! This file is part of dftd4.
+! SPDX-Identifier: LGPL-3.0-or-later
+!
+! dftd4 is free software: you can redistribute it and/or modify it under
+! the terms of the Lesser GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
+!
+! dftd4 is distributed in the hope that it will be useful,
+! but WITHOUT ANY WARRANTY; without even the implied warranty of
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+! Lesser GNU General Public License for more details.
+!
+! You should have received a copy of the Lesser GNU General Public License
+! along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
+
+!> Definition of the D4 dispersion model for the evaluation of C6 coefficients.
+module dftd4_model_d4
+   use, intrinsic :: iso_fortran_env, only : output_unit
+   use ieee_arithmetic, only : ieee_is_nan
+   use dftd4_model_type, only : dispersion_model, d4_ref
+   use dftd4_data, only : get_covalent_rad, get_r4r2_val, get_effective_charge, &
+      get_electronegativity, get_hardness
+   use dftd4_reference
+   use dftd4_model_utils
+   use mctc_env, only : error_type, fatal_error, wp
+   use mctc_io, only : structure_type
+   use mctc_io_constants, only : pi
+   implicit none
+   private
+
+   public :: d4_model, new_d4_model
+
+
+   !> D4 dispersion model to evaluate C6 coefficients
+   type, extends(dispersion_model) :: d4_model
+
+      !> Weighting factor for CN interpolation
+      real(wp) :: wf
+
+   contains
+
+      !> Generate weights for all reference systems
+      procedure :: weight_references
+
+      !> Evaluate C6 coefficient
+      procedure :: get_atomic_c6
+
+      !> Evaluate atomic polarizibilities
+      procedure :: get_polarizibilities
+
+   end type d4_model
+
+
+   !> Default maximum charge scaling height for partial charge extrapolation
+   real(wp), parameter :: ga_default = 3.0_wp
+
+   !> Default charge scaling steepness for partial charge extrapolation
+   real(wp), parameter :: gc_default = 2.0_wp
+
+   !> Default weighting factor for coordination number interpolation
+   real(wp), parameter :: wf_default = 6.0_wp
+
+   !> Create new D4 dispersion model from molecular structure input
+   interface new_d4_model
+      module procedure :: new_d4_model_no_checks
+      module procedure :: new_d4_model_with_checks
+   end interface new_d4_model
+
+contains
+
+
+!> Create new D4 dispersion model from molecular structure input
+subroutine new_d4_model_with_checks(error, d4, mol, ga, gc, wf, ref)
+   !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_with_checks
+
+   !> Instance of the dispersion model
+   type(d4_model), intent(out) :: d4
+
+   !> Molecular structure data
+   class(structure_type), intent(in) :: mol
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   !> Charge scaling height
+   real(wp), intent(in), optional :: ga
+
+   !> Charge scaling steepness
+   real(wp), intent(in), optional :: gc
+
+   !> Weighting factor for coordination number interpolation
+   real(wp), intent(in), optional :: wf
+
+   !> Reference charge selection
+   integer, intent(in), optional :: ref
+
+   integer :: isp, izp, iref, jsp, jzp, jref
+   integer :: mref, ref_charge
+   real(wp) :: aiw(23), c6
+   real(wp), parameter :: thopi = 3.0_wp/pi
+
+   ! check for unsupported elements (104 (Rf) - 111 (Rg))
+   do isp = 1, mol%nid
+      if (mol%num(isp) > 103 .and. mol%num(isp) < 112) then
+         call fatal_error(error, "Structure contains unsupported element '"//trim(mol%sym(isp))//"'")
+         return
+      end if
+   end do
+
+   d4%ncoup = 1
+
+   if (present(ref)) then
+      ref_charge = ref
+   else
+      ref_charge = d4_ref%eeq
+   end if
+
+   if (present(ga)) then
+      d4%ga = ga
+   else
+      d4%ga = ga_default
+   end if
+
+   if (present(gc)) then
+      d4%gc = gc
+   else
+      d4%gc = gc_default
+   end if
+
+   if (present(wf)) then
+      d4%wf = wf
+   else
+      d4%wf = wf_default
+   end if
+
+   allocate(d4%rcov(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%rcov(isp) = get_covalent_rad(izp)
+   end do
+
+   allocate(d4%en(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%en(isp) = get_electronegativity(izp)
+   end do
+
+   allocate(d4%zeff(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%zeff(isp) = get_effective_charge(izp)
+   end do
+
+   allocate(d4%eta(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%eta(isp) = get_hardness(izp)
+   end do
+
+   allocate(d4%r4r2(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%r4r2(isp) = get_r4r2_val(izp)
+   end do
+
+   allocate(d4%ref(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%ref(isp) = get_nref(izp)
+   end do
+
+   mref = maxval(d4%ref)
+   allocate(d4%cn(mref, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      call set_refcn(d4%cn(:, isp), izp)
+   end do
+
+   allocate(d4%q(mref, mol%nid))
+   allocate(d4%aiw(23, mref, mol%nid))
+   select case(ref_charge)
+   case default
+      call fatal_error(error, "Unsupported option for reference charges")
+      return
+   case(d4_ref%eeq)
+      do isp = 1, mol%nid
+         izp = mol%num(isp)
+         call set_refq_eeq(d4%q(:, isp), izp)
+         call set_refalpha_eeq(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
+      end do
+   case(d4_ref%gfn2)
+      do isp = 1, mol%nid
+         izp = mol%num(isp)
+         call set_refq_gfn2(d4%q(:, isp), izp)
+         call set_refalpha_gfn2(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
+      end do
+   end select
+
+   allocate(d4%ngw(mref, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      call set_refgw(d4%ngw(:, isp), izp)
+   end do
+
+   allocate(d4%c6(mref, mref, mol%nid, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      do jsp = 1, isp
+         jzp = mol%num(jsp)
+         do iref = 1, d4%ref(isp)
+            do jref = 1, d4%ref(jsp)
+               aiw(:) = d4%aiw(:, iref, isp) * d4%aiw(:, jref, jsp)
+               c6 = thopi * trapzd(aiw)
+               d4%c6(jref, iref, jsp, isp) = c6
+               d4%c6(iref, jref, isp, jsp) = c6
+            end do
+         end do
+      end do
+   end do
+
+end subroutine new_d4_model_with_checks
+
+!> Create new dispersion model from molecular structure input without
+!> checking for supported elements (old/compatibility version)
+subroutine new_d4_model_no_checks(d4, mol, ga, gc, wf, ref)
+   !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_no_checks
+
+   !> Instance of the dispersion model
+   type(d4_model), intent(out) :: d4
+
+   !> Molecular structure data
+   class(structure_type), intent(in) :: mol
+
+   !> Charge scaling height
+   real(wp), intent(in), optional :: ga
+
+   !> Charge scaling steepness
+   real(wp), intent(in), optional :: gc
+
+   !> Weighting factor for coordination number interpolation
+   real(wp), intent(in), optional :: wf
+
+   !> Reference charge selection
+   integer, intent(in), optional :: ref
+
+   integer :: isp, izp, iref, jsp, jzp, jref
+   integer :: mref, ref_charge
+   real(wp) :: aiw(23), c6
+   real(wp), parameter :: thopi = 3.0_wp/pi
+
+   d4%ncoup = 1
+
+   if (present(ref)) then
+      ref_charge = ref
+   else
+      ref_charge = d4_ref%eeq
+   end if
+
+   if (present(ga)) then
+      d4%ga = ga
+   else
+      d4%ga = ga_default
+   end if
+
+   if (present(gc)) then
+      d4%gc = gc
+   else
+      d4%gc = gc_default
+   end if
+
+   if (present(wf)) then
+      d4%wf = wf
+   else
+      d4%wf = wf_default
+   end if
+
+   allocate(d4%rcov(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%rcov(isp) = get_covalent_rad(izp)
+   end do
+
+   allocate(d4%en(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%en(isp) = get_electronegativity(izp)
+   end do
+
+   allocate(d4%zeff(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%zeff(isp) = get_effective_charge(izp)
+   end do
+
+   allocate(d4%eta(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%eta(isp) = get_hardness(izp)
+   end do
+
+   allocate(d4%r4r2(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%r4r2(isp) = get_r4r2_val(izp)
+   end do
+
+   allocate(d4%ref(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%ref(isp) = get_nref(izp)
+   end do
+
+   mref = maxval(d4%ref)
+   allocate(d4%cn(mref, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      call set_refcn(d4%cn(:, isp), izp)
+   end do
+
+   allocate(d4%q(mref, mol%nid))
+   allocate(d4%aiw(23, mref, mol%nid))
+   if (ref_charge == d4_ref%gfn2) then
+      do isp = 1, mol%nid
+         izp = mol%num(isp)
+         call set_refq_gfn2(d4%q(:, isp), izp)
+         call set_refalpha_gfn2(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
+      end do
+   else
+      if (ref_charge /= d4_ref%eeq) then
+         write(output_unit, '(a)') "[Info] Unsupported option for reference charge. Defaulting to EEQ charges."
+      end if
+      do isp = 1, mol%nid
+         izp = mol%num(isp)
+         call set_refq_eeq(d4%q(:, isp), izp)
+         call set_refalpha_eeq(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
+      end do
+   end if
+
+   allocate(d4%ngw(mref, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      call set_refgw(d4%ngw(:, isp), izp)
+   end do
+
+   allocate(d4%c6(mref, mref, mol%nid, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      do jsp = 1, isp
+         jzp = mol%num(jsp)
+         do iref = 1, d4%ref(isp)
+            do jref = 1, d4%ref(jsp)
+               aiw(:) = d4%aiw(:, iref, isp) * d4%aiw(:, jref, jsp)
+               c6 = thopi * trapzd(aiw)
+               d4%c6(jref, iref, jsp, isp) = c6
+               d4%c6(iref, jref, isp, jsp) = c6
+            end do
+         end do
+      end do
+   end do
+
+end subroutine new_d4_model_no_checks
+
+
+!> Calculate the weights of the reference system and the derivatives w.r.t.
+!> coordination number for later use.
+subroutine weight_references(self, mol, cn, q, gwvec, gwdcn, gwdq)
+   !DEC$ ATTRIBUTES DLLEXPORT :: weight_references
+
+   !> Instance of the dispersion model
+   class(d4_model), intent(in) :: self
+
+   !> Molecular structure data
+   class(structure_type), intent(in) :: mol
+
+   !> Coordination number of every atom
+   real(wp), intent(in) :: cn(:)
+
+   !> Partial charge of every atom
+   real(wp), intent(in) :: q(:)
+
+   !> weighting for the atomic reference systems
+   real(wp), intent(out) :: gwvec(:, :, :)
+
+   !> derivative of the weighting function w.r.t. the coordination number
+   real(wp), intent(out), optional :: gwdcn(:, :, :)
+
+   !> derivative of the weighting function w.r.t. the charge scaling
+   real(wp), intent(out), optional :: gwdq(:, :, :)
+
+   integer :: iat, izp, iref, igw
+   real(wp) :: norm, dnorm, gw, expw, expd, gwk, dgwk, wf, zi, gi, maxcn
+
+   if (present(gwdcn) .and. present(gwdq)) then
+      gwvec(:, :, :) = 0.0_wp
+      gwdcn(:, :, :) = 0.0_wp
+      gwdq(:, :, :) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(gwvec, gwdcn, gwdq, mol, self, cn, q) private(iat, izp, iref, &
+      !$omp& igw, norm, dnorm, gw, expw, expd, gwk, dgwk, wf, zi, gi, maxcn)
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         zi = self%zeff(izp)
+         gi = self%eta(izp) * self%gc
+         norm = 0.0_wp
+         dnorm = 0.0_wp
+         do iref = 1, self%ref(izp)
+            do igw = 1, self%ngw(iref, izp)
+               wf = igw * self%wf
+               gw = weight_cn(wf, cn(iat), self%cn(iref, izp))
+               norm = norm + gw
+               dnorm = dnorm + 2*wf * (self%cn(iref, izp) - cn(iat)) * gw
+            end do
+         end do
+         norm = 1.0_wp / norm
+         do iref = 1, self%ref(izp)
+            expw = 0.0_wp
+            expd = 0.0_wp
+            do igw = 1, self%ngw(iref, izp)
+               wf = igw * self%wf
+               gw = weight_cn(wf, cn(iat), self%cn(iref, izp))
+               expw = expw + gw
+               expd = expd + 2*wf * (self%cn(iref, izp) - cn(iat)) * gw
+            end do
+            gwk = expw * norm
+            if (is_exceptional(gwk)) then
+               maxcn = maxval(self%cn(:self%ref(izp), izp))
+               if (abs(maxcn - self%cn(iref, izp)) < 1e-12_wp) then
+                  gwk = 1.0_wp
+               else
+                  gwk = 0.0_wp
+               end if
+            end if
+            gwvec(iref, iat, 1) = gwk * zeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
+            gwdq(iref, iat, 1) = gwk * dzeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
+
+            dgwk = norm * (expd - expw * dnorm * norm)
+            if (is_exceptional(dgwk)) then
+               dgwk = 0.0_wp
+            end if
+            gwdcn(iref, iat, 1) = dgwk * zeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
+         end do
+      end do
+
+   else
+
+      gwvec(:, :, :) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(gwvec, mol, self, cn, q) &
+      !$omp private(iat, izp, iref, igw, norm, gw, expw, gwk, wf, zi, gi, maxcn)
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         zi = self%zeff(izp)
+         gi = self%eta(izp) * self%gc
+         norm = 0.0_wp
+         do iref = 1, self%ref(izp)
+            do igw = 1, self%ngw(iref, izp)
+               wf = igw * self%wf
+               norm = norm + weight_cn(wf, cn(iat), self%cn(iref, izp))
+            end do
+         end do
+         norm = 1.0_wp / norm
+         do iref = 1, self%ref(izp)
+            expw = 0.0_wp
+            do igw = 1, self%ngw(iref, izp)
+               wf = igw * self%wf
+               expw = expw + weight_cn(wf, cn(iat), self%cn(iref, izp))
+            end do
+            gwk = expw * norm
+            if (is_exceptional(gwk)) then
+               maxcn = maxval(self%cn(:self%ref(izp), izp))
+               if (abs(maxcn - self%cn(iref, izp)) < 1e-12_wp) then
+                  gwk = 1.0_wp
+               else
+                  gwk = 0.0_wp
+               end if
+            end if
+            gwvec(iref, iat, 1) = gwk * zeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
+         end do
+      end do
+   end if
+
+end subroutine weight_references
+
+
+!> Calculate atomic dispersion coefficients and their derivatives w.r.t.
+!> the coordination numbers and atomic partial charges.
+subroutine get_atomic_c6(self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq)
+   !DEC$ ATTRIBUTES DLLEXPORT :: get_atomic_c6
+
+   !> Instance of the dispersion model
+   class(d4_model), intent(in) :: self
+
+   !> Molecular structure data
+   class(structure_type), intent(in) :: mol
+
+   !> Weighting function for the atomic reference systems
+   real(wp), intent(in) :: gwvec(:, :, :)
+
+   !> Derivative of the weighting function w.r.t. the coordination number
+   real(wp), intent(in), optional :: gwdcn(:, :, :)
+
+   !> Derivative of the weighting function w.r.t. the partial charge
+   real(wp), intent(in), optional :: gwdq(:, :, :)
+
+   !> C6 coefficients for all atom pairs.
+   real(wp), intent(out) :: c6(:, :)
+
+   !> Derivative of the C6 w.r.t. the coordination number
+   real(wp), intent(out), optional :: dc6dcn(:, :)
+
+   !> Derivative of the C6 w.r.t. the partial charge
+   real(wp), intent(out), optional :: dc6dq(:, :)
+
+   integer :: iat, jat, izp, jzp, iref, jref
+   real(wp) :: refc6, dc6, dc6dcni, dc6dcnj, dc6dqi, dc6dqj
+
+   if (present(gwdcn).and.present(dc6dcn) &
+      & .and.present(gwdq).and.present(dc6dq)) then
+      c6(:, :) = 0.0_wp
+      dc6dcn(:, :) = 0.0_wp
+      dc6dq(:, :) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(c6, dc6dcn, dc6dq, mol, self, gwvec, gwdcn, gwdq) &
+      !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6, dc6dqi, dc6dqj, &
+      !$omp& dc6dcni, dc6dcnj)
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         do jat = 1, iat
+            jzp = mol%id(jat)
+            dc6 = 0.0_wp
+            dc6dcni = 0.0_wp
+            dc6dcnj = 0.0_wp
+            dc6dqi = 0.0_wp
+            dc6dqj = 0.0_wp
+            do iref = 1, self%ref(izp)
+               do jref = 1, self%ref(jzp)
+                  refc6 = self%c6(iref, jref, izp, jzp)
+                  dc6 = dc6 + gwvec(iref, iat, 1) * gwvec(jref, jat, 1) * refc6
+                  dc6dcni = dc6dcni + gwdcn(iref, iat, 1) * gwvec(jref, jat, 1) * refc6
+                  dc6dcnj = dc6dcnj + gwvec(iref, iat, 1) * gwdcn(jref, jat, 1) * refc6
+                  dc6dqi = dc6dqi + gwdq(iref, iat, 1) * gwvec(jref, jat, 1) * refc6
+                  dc6dqj = dc6dqj + gwvec(iref, iat, 1) * gwdq(jref, jat, 1) * refc6
+               end do
+            end do
+            c6(iat, jat) = dc6
+            c6(jat, iat) = dc6
+            dc6dcn(iat, jat) = dc6dcni
+            dc6dcn(jat, iat) = dc6dcnj
+            dc6dq(iat, jat) = dc6dqi
+            dc6dq(jat, iat) = dc6dqj
+         end do
+      end do
+
+   else
+
+      c6(:, :) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(c6, mol, self, gwvec) &
+      !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6)
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         do jat = 1, iat
+            jzp = mol%id(jat)
+            dc6 = 0.0_wp
+            do iref = 1, self%ref(izp)
+               do jref = 1, self%ref(jzp)
+                  refc6 = self%c6(iref, jref, izp, jzp)
+                  dc6 = dc6 + gwvec(iref, iat, 1) * gwvec(jref, jat, 1) * refc6
+               end do
+            end do
+            c6(iat, jat) = dc6
+            c6(jat, iat) = dc6
+         end do
+      end do
+   end if
+
+end subroutine get_atomic_c6
+
+
+!> Calculate atomic polarizibilities and their derivatives w.r.t.
+!> the coordination numbers and atomic partial charges.
+subroutine get_polarizibilities(self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq)
+   !DEC$ ATTRIBUTES DLLEXPORT :: get_polarizibilities
+
+   !> Instance of the dispersion model
+   class(d4_model), intent(in) :: self
+
+   !> Molecular structure data
+   class(structure_type), intent(in) :: mol
+
+   !> Weighting function for the atomic reference systems
+   real(wp), intent(in) :: gwvec(:, :, :)
+
+   !> Derivative of the weighting function w.r.t. the coordination number
+   real(wp), intent(in), optional :: gwdcn(:, :, :)
+
+   !> Derivative of the weighting function w.r.t. the partial charge
+   real(wp), intent(in), optional :: gwdq(:, :, :)
+
+   !> Static polarizibilities for all atoms.
+   real(wp), intent(out) :: alpha(:)
+
+   !> Derivative of the polarizibility w.r.t. the coordination number
+   real(wp), intent(out), optional :: dadcn(:)
+
+   !> Derivative of the polarizibility w.r.t. the partial charge
+   real(wp), intent(out), optional :: dadq(:)
+
+   integer :: iat, izp, iref
+   real(wp) :: refa, da, dadcni, dadqi
+
+   if (present(gwdcn).and.present(dadcn) &
+      & .and.present(gwdq).and.present(dadq)) then
+      alpha(:) = 0.0_wp
+      dadcn(:) = 0.0_wp
+      dadq(:) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(alpha, dadcn, dadq, mol, self, gwvec, gwdcn, gwdq) &
+      !$omp private(iat, izp, iref, refa, da, dadqi, dadcni)
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         da = 0.0_wp
+         dadcni = 0.0_wp
+         dadqi = 0.0_wp
+         do iref = 1, self%ref(izp)
+            refa = self%aiw(1, iref, izp)
+            da = da + gwvec(iref, iat, 1) * refa
+            dadcni = dadcni + gwdcn(iref, iat, 1) * refa
+            dadqi = dadqi + gwdq(iref, iat, 1) * refa
+         end do
+         alpha(iat) = da
+         dadcn(iat) = dadcni
+         dadq(iat) = dadqi
+      end do
+
+   else
+
+      alpha(:) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(alpha, mol, self, gwvec) private(iat, izp, iref, refa, da)
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         da = 0.0_wp
+         do iref = 1, self%ref(izp)
+            da = da + gwvec(iref, iat, 1) * self%aiw(1, iref, izp)
+         end do
+         alpha(iat) = da
+      end do
+   end if
+
+end subroutine get_polarizibilities
+
+
+end module dftd4_model_d4
diff --git a/src/dftd4/model/d4s.f90 b/src/dftd4/model/d4s.f90
new file mode 100644
index 0000000..a9ade8a
--- /dev/null
+++ b/src/dftd4/model/d4s.f90
@@ -0,0 +1,673 @@
+! This file is part of dftd4.
+! SPDX-Identifier: LGPL-3.0-or-later
+!
+! dftd4 is free software: you can redistribute it and/or modify it under
+! the terms of the Lesser GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
+!
+! dftd4 is distributed in the hope that it will be useful,
+! but WITHOUT ANY WARRANTY; without even the implied warranty of
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+! Lesser GNU General Public License for more details.
+!
+! You should have received a copy of the Lesser GNU General Public License
+! along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
+
+!> Definition of the D4S dispersion model for the evaluation of C6 coefficients.
+module dftd4_model_d4s
+   use, intrinsic :: iso_fortran_env, only : output_unit
+   use ieee_arithmetic, only : ieee_is_nan
+   use dftd4_model_type, only : dispersion_model, d4_ref
+   use dftd4_data, only : get_covalent_rad, get_r4r2_val, get_wfpair_val, &
+      & get_effective_charge, get_electronegativity, get_hardness
+   use dftd4_reference
+   use dftd4_model_utils
+   use mctc_env, only : error_type, fatal_error, wp
+   use mctc_io, only : structure_type
+   use mctc_io_constants, only : pi
+   implicit none
+   private
+
+   public :: d4s_model, new_d4s_model, d4_ref
+
+
+   !> D4S dispersion model to evaluate C6 coefficients
+   type, extends(dispersion_model) :: d4s_model
+
+      !> Weighting factors for CN interpolation
+      real(wp), allocatable :: wf(:, :)
+
+   contains
+
+      !> Generate weights for all reference systems
+      procedure :: weight_references
+
+      !> Evaluate C6 coefficient
+      procedure :: get_atomic_c6
+
+      !> Evaluate atomic polarizibilities
+      procedure :: get_polarizibilities
+
+   end type d4s_model
+
+
+   !> Default maximum charge scaling height for partial charge extrapolation
+   real(wp), parameter :: ga_default = 3.0_wp
+
+   !> Default charge scaling steepness for partial charge extrapolation
+   real(wp), parameter :: gc_default = 2.0_wp
+
+   !> Create new D4 dispersion model from molecular structure input
+   interface new_d4s_model
+      module procedure :: new_d4s_model_no_checks
+      module procedure :: new_d4s_model_with_checks
+   end interface new_d4s_model
+
+contains
+
+
+!> Create new D4S dispersion model from molecular structure input
+subroutine new_d4s_model_with_checks(error, d4, mol, ga, gc, ref)
+   !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_with_checks
+
+   !> Instance of the dispersion model
+   type(d4s_model), intent(out) :: d4
+
+   !> Molecular structure data
+   class(structure_type), intent(in) :: mol
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   !> Charge scaling height
+   real(wp), intent(in), optional :: ga
+
+   !> Charge scaling steepness
+   real(wp), intent(in), optional :: gc
+
+   !> Reference charge selection
+   integer, intent(in), optional :: ref
+
+   integer :: isp, izp, iref, jsp, jzp, jref
+   integer :: mref, ref_charge
+   real(wp) :: aiw(23), c6
+   real(wp), parameter :: thopi = 3.0_wp/pi
+
+   ! check for unsupported elements (104 (Rf) - 111 (Rg))
+   do isp = 1, mol%nid
+      if (mol%num(isp) > 103 .and. mol%num(isp) < 112) then
+         call fatal_error(error, "Structure contains unsupported element '"//trim(mol%sym(isp))//"'")
+         return
+      end if
+   end do
+
+   d4%ncoup = mol%nat
+
+   if (present(ref)) then
+      ref_charge = ref
+   else
+      ref_charge = d4_ref%eeq
+   end if
+
+   if (present(ga)) then
+      d4%ga = ga
+   else
+      d4%ga = ga_default
+   end if
+
+   if (present(gc)) then
+      d4%gc = gc
+   else
+      d4%gc = gc_default
+   end if
+
+   allocate(d4%wf(mol%nid, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      do jsp = 1, mol%nid
+         jzp = mol%num(jsp)
+         d4%wf(isp, jsp) = get_wfpair_val(izp, jzp)
+      end do 
+   end do
+
+   allocate(d4%rcov(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%rcov(isp) = get_covalent_rad(izp)
+   end do
+
+   allocate(d4%en(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%en(isp) = get_electronegativity(izp)
+   end do
+
+   allocate(d4%zeff(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%zeff(isp) = get_effective_charge(izp)
+   end do
+
+   allocate(d4%eta(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%eta(isp) = get_hardness(izp)
+   end do
+
+   allocate(d4%r4r2(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%r4r2(isp) = get_r4r2_val(izp)
+   end do
+
+   allocate(d4%ref(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%ref(isp) = get_nref(izp)
+   end do
+
+   mref = maxval(d4%ref)
+   allocate(d4%cn(mref, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      call set_refcn(d4%cn(:, isp), izp)
+   end do
+
+   allocate(d4%q(mref, mol%nid))
+   allocate(d4%aiw(23, mref, mol%nid))
+   select case(ref_charge)
+   case default
+      call fatal_error(error, "Unsupported option for reference charges")
+      return
+   case(d4_ref%eeq)
+      do isp = 1, mol%nid
+         izp = mol%num(isp)
+         call set_refq_eeq(d4%q(:, isp), izp)
+         call set_refalpha_eeq(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
+      end do
+   case(d4_ref%gfn2)
+      do isp = 1, mol%nid
+         izp = mol%num(isp)
+         call set_refq_gfn2(d4%q(:, isp), izp)
+         call set_refalpha_gfn2(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
+      end do
+   end select
+
+   allocate(d4%ngw(mref, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      call set_refgw(d4%ngw(:, isp), izp)
+   end do
+
+   allocate(d4%c6(mref, mref, mol%nid, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      do jsp = 1, isp
+         jzp = mol%num(jsp)
+         do iref = 1, d4%ref(isp)
+            do jref = 1, d4%ref(jsp)
+               aiw(:) = d4%aiw(:, iref, isp) * d4%aiw(:, jref, jsp)
+               c6 = thopi * trapzd(aiw)
+               d4%c6(jref, iref, jsp, isp) = c6
+               d4%c6(iref, jref, isp, jsp) = c6
+            end do
+         end do
+      end do
+   end do
+
+end subroutine new_d4s_model_with_checks
+
+!> Create new dispersion model from molecular structure input without
+!> checking for supported elements (old/compatibility version)
+subroutine new_d4s_model_no_checks(d4, mol, ga, gc, ref)
+   !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_no_checks
+
+   !> Instance of the dispersion model
+   type(d4s_model), intent(out) :: d4
+
+   !> Molecular structure data
+   class(structure_type), intent(in) :: mol
+
+   !> Charge scaling height
+   real(wp), intent(in), optional :: ga
+
+   !> Charge scaling steepness
+   real(wp), intent(in), optional :: gc
+
+   !> Reference charge selection
+   integer, intent(in), optional :: ref
+
+   integer :: isp, izp, iref, jsp, jzp, jref
+   integer :: mref, ref_charge
+   real(wp) :: aiw(23), c6
+   real(wp), parameter :: thopi = 3.0_wp/pi
+
+   d4%ncoup = mol%nat
+
+   if (present(ref)) then
+      ref_charge = ref
+   else
+      ref_charge = d4_ref%eeq
+   end if
+
+   if (present(ga)) then
+      d4%ga = ga
+   else
+      d4%ga = ga_default
+   end if
+
+   if (present(gc)) then
+      d4%gc = gc
+   else
+      d4%gc = gc_default
+   end if
+
+   allocate(d4%wf(mol%nid, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      do jsp = 1, mol%nid
+         jzp = mol%num(jsp)
+         d4%wf(isp, jsp) = get_wfpair_val(izp, jzp)
+      end do 
+   end do
+
+   allocate(d4%rcov(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%rcov(isp) = get_covalent_rad(izp)
+   end do
+
+   allocate(d4%en(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%en(isp) = get_electronegativity(izp)
+   end do
+
+   allocate(d4%zeff(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%zeff(isp) = get_effective_charge(izp)
+   end do
+
+   allocate(d4%eta(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%eta(isp) = get_hardness(izp)
+   end do
+
+   allocate(d4%r4r2(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%r4r2(isp) = get_r4r2_val(izp)
+   end do
+
+   allocate(d4%ref(mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      d4%ref(isp) = get_nref(izp)
+   end do
+
+   mref = maxval(d4%ref)
+   allocate(d4%cn(mref, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      call set_refcn(d4%cn(:, isp), izp)
+   end do
+
+   allocate(d4%q(mref, mol%nid))
+   allocate(d4%aiw(23, mref, mol%nid))
+   if (ref_charge == d4_ref%gfn2) then
+      do isp = 1, mol%nid
+         izp = mol%num(isp)
+         call set_refq_gfn2(d4%q(:, isp), izp)
+         call set_refalpha_gfn2(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
+      end do
+   else
+      if (ref_charge /= d4_ref%eeq) then
+         write(output_unit, '(a)') "[Info] Unsupported option for reference charge. Defaulting to EEQ charges."
+      end if
+      do isp = 1, mol%nid
+         izp = mol%num(isp)
+         call set_refq_eeq(d4%q(:, isp), izp)
+         call set_refalpha_eeq(d4%aiw(:, :, isp), d4%ga, d4%gc, izp)
+      end do
+   end if
+
+   allocate(d4%ngw(mref, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      call set_refgw(d4%ngw(:, isp), izp)
+   end do
+
+   allocate(d4%c6(mref, mref, mol%nid, mol%nid))
+   do isp = 1, mol%nid
+      izp = mol%num(isp)
+      do jsp = 1, isp
+         jzp = mol%num(jsp)
+         do iref = 1, d4%ref(isp)
+            do jref = 1, d4%ref(jsp)
+               aiw(:) = d4%aiw(:, iref, isp) * d4%aiw(:, jref, jsp)
+               c6 = thopi * trapzd(aiw)
+               d4%c6(jref, iref, jsp, isp) = c6
+               d4%c6(iref, jref, isp, jsp) = c6
+            end do
+         end do
+      end do
+   end do
+
+end subroutine new_d4s_model_no_checks
+
+
+!> Calculate the weights of the reference system and the derivatives w.r.t.
+!> coordination number for later use.
+subroutine weight_references(self, mol, cn, q, gwvec, gwdcn, gwdq)
+   !DEC$ ATTRIBUTES DLLEXPORT :: weight_references
+
+   !> Instance of the dispersion model
+   class(d4s_model), intent(in) :: self
+
+   !> Molecular structure data
+   class(structure_type), intent(in) :: mol
+
+   !> Coordination number of every atom
+   real(wp), intent(in) :: cn(:)
+
+   !> Partial charge of every atom
+   real(wp), intent(in) :: q(:)
+
+   !> Pairwise weighting for the atomic reference systems
+   real(wp), intent(out) :: gwvec(:, :, :)
+
+   !> derivative of the pairwise weighting function w.r.t. the coordination number
+   real(wp), intent(out), optional :: gwdcn(:, :, :)
+
+   !> derivative of the pairwise weighting function w.r.t. the charge scaling
+   real(wp), intent(out), optional :: gwdq(:, :, :)
+
+   integer :: iat, izp, iref, igw, jat, jzp
+   real(wp) :: norm, dnorm, gw, expw, expd, gwk, dgwk, wf, zi, gi, maxcn
+   
+   if (present(gwdcn) .and. present(gwdq)) then
+      gwvec(:, :, :) = 0.0_wp
+      gwdcn(:, :, :) = 0.0_wp
+      gwdq(:, :, :) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(gwvec, gwdcn, gwdq, mol, self, cn, q) &
+      !$omp private(iat, izp, iref, igw, zi, gi, jat, jzp) &
+      !$omp private(norm, dnorm, gw, expw, expd, gwk, dgwk, wf, maxcn)      
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         zi = self%zeff(izp)
+         gi = self%eta(izp) * self%gc
+
+         do jat = 1, mol%nat
+            jzp = mol%id(jat)
+
+            norm = 0.0_wp
+            dnorm = 0.0_wp
+            do iref = 1, self%ref(izp)
+               do igw = 1, self%ngw(iref, izp)
+                  wf = igw * self%wf(izp, jzp)
+                  gw = weight_cn(wf, cn(iat), self%cn(iref, izp))
+                  norm = norm + gw
+                  dnorm = dnorm + 2*wf * (self%cn(iref, izp) - cn(iat)) * gw
+               end do
+            end do
+            norm = 1.0_wp / norm
+
+            do iref = 1, self%ref(izp)
+               expw = 0.0_wp
+               expd = 0.0_wp
+               do igw = 1, self%ngw(iref, izp)
+                  wf = igw * self%wf(izp, jzp)
+                  gw = weight_cn(wf, cn(iat), self%cn(iref, izp))
+                  expw = expw + gw
+                  expd = expd + 2*wf * (self%cn(iref, izp) - cn(iat)) * gw
+               end do
+               gwk = expw * norm
+               if (is_exceptional(gwk)) then
+                  maxcn = maxval(self%cn(:self%ref(izp), izp))
+                  if (abs(maxcn - self%cn(iref, izp)) < 1e-12_wp) then
+                     gwk = 1.0_wp
+                  else
+                     gwk = 0.0_wp
+                  end if
+               end if
+               gwvec(iref, iat, jat) = gwk * zeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
+               gwdq(iref, iat, jat) = gwk * dzeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
+               
+               dgwk = norm * (expd - expw * dnorm * norm)
+               if (is_exceptional(dgwk)) then
+                  dgwk = 0.0_wp
+               end if
+               gwdcn(iref, iat, jat) = dgwk * zeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
+            end do
+
+         end do 
+      end do
+   else
+
+      gwvec(:, :, :) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(gwvec, mol, self, cn, q) &
+      !$omp private(iat, izp, iref, igw, zi, gi, jat, jzp) &
+      !$omp private(norm, gw, expw, gwk, wf, maxcn)
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         zi = self%zeff(izp)
+         gi = self%eta(izp) * self%gc
+
+         do jat = 1, mol%nat
+            jzp = mol%id(jat)
+
+            norm = 0.0_wp
+            do iref = 1, self%ref(izp)
+               do igw = 1, self%ngw(iref, izp)
+                  wf = igw * self%wf(izp, jzp)
+                  norm = norm + weight_cn(wf, cn(iat), self%cn(iref, izp))
+               end do
+            end do
+            norm = 1.0_wp / norm
+            
+            do iref = 1, self%ref(izp)
+               expw = 0.0_wp
+               do igw = 1, self%ngw(iref, izp)
+                  wf = igw * self%wf(izp, jzp)
+                  expw = expw + weight_cn(wf, cn(iat), self%cn(iref, izp))
+               end do
+               gwk = expw * norm
+               if (is_exceptional(gwk)) then
+                  maxcn = maxval(self%cn(:self%ref(izp), izp))
+                  if (abs(maxcn - self%cn(iref, izp)) < 1e-12_wp) then
+                     gwk = 1.0_wp
+                  else
+                     gwk = 0.0_wp
+                  end if
+               end if
+               gwvec(iref, iat, jat) = gwk * zeta(self%ga, gi, self%q(iref, izp)+zi, q(iat)+zi)
+            end do
+
+         end do 
+      end do
+   end if
+
+end subroutine weight_references
+
+
+!> Calculate atomic dispersion coefficients and their derivatives w.r.t.
+!> the coordination numbers and atomic partial charges.
+subroutine get_atomic_c6(self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq)
+   !DEC$ ATTRIBUTES DLLEXPORT :: get_atomic_c6
+
+   !> Instance of the dispersion model
+   class(d4s_model), intent(in) :: self
+
+   !> Molecular structure data
+   class(structure_type), intent(in) :: mol
+
+   !> Pairwise weighting function for the atomic reference systems
+   real(wp), intent(in) :: gwvec(:, :, :)
+
+   !> Derivative of the pairwise weighting function w.r.t. the coordination number
+   real(wp), intent(in), optional :: gwdcn(:, :, :)
+
+   !> Derivative of the pairwise weighting function w.r.t. the partial charge
+   real(wp), intent(in), optional :: gwdq(:, :, :)
+
+   !> C6 coefficients for all atom pairs.
+   real(wp), intent(out) :: c6(:, :)
+
+   !> Derivative of the C6 w.r.t. the coordination number
+   real(wp), intent(out), optional :: dc6dcn(:, :)
+
+   !> Derivative of the C6 w.r.t. the partial charge
+   real(wp), intent(out), optional :: dc6dq(:, :)
+
+   integer :: iat, jat, izp, jzp, iref, jref
+   real(wp) :: refc6, dc6, dc6dcni, dc6dcnj, dc6dqi, dc6dqj
+
+   if (present(gwdcn).and.present(dc6dcn) &
+      & .and.present(gwdq).and.present(dc6dq)) then
+      c6(:, :) = 0.0_wp
+      dc6dcn(:, :) = 0.0_wp
+      dc6dq(:, :) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(c6, dc6dcn, dc6dq, mol, self, gwvec, gwdcn, gwdq) &
+      !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6, dc6dqi, dc6dqj, &
+      !$omp& dc6dcni, dc6dcnj)
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         do jat = 1, iat
+            jzp = mol%id(jat)
+            dc6 = 0.0_wp
+            dc6dcni = 0.0_wp
+            dc6dcnj = 0.0_wp
+            dc6dqi = 0.0_wp
+            dc6dqj = 0.0_wp
+            do iref = 1, self%ref(izp)
+               do jref = 1, self%ref(jzp)
+                  refc6 = self%c6(iref, jref, izp, jzp)
+                  dc6 = dc6 + gwvec(iref, iat, jat) * gwvec(jref, jat, iat) * refc6
+                  dc6dcni = dc6dcni + gwdcn(iref, iat, jat) * gwvec(jref, jat, iat) * refc6
+                  dc6dcnj = dc6dcnj + gwvec(iref, iat, jat) * gwdcn(jref, jat, iat) * refc6
+                  dc6dqi = dc6dqi + gwdq(iref, iat, jat) * gwvec(jref, jat, iat) * refc6
+                  dc6dqj = dc6dqj + gwvec(iref, iat, jat) * gwdq(jref, jat, iat) * refc6
+               end do
+            end do
+            c6(iat, jat) = dc6
+            c6(jat, iat) = dc6
+            dc6dcn(iat, jat) = dc6dcni
+            dc6dcn(jat, iat) = dc6dcnj
+            dc6dq(iat, jat) = dc6dqi
+            dc6dq(jat, iat) = dc6dqj
+         end do
+      end do
+
+   else
+
+      c6(:, :) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(c6, mol, self, gwvec) &
+      !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6)
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         do jat = 1, iat
+            jzp = mol%id(jat)
+            dc6 = 0.0_wp
+            do iref = 1, self%ref(izp)
+               do jref = 1, self%ref(jzp)
+                  refc6 = self%c6(iref, jref, izp, jzp)
+                  dc6 = dc6 + gwvec(iref, iat, jat) * gwvec(jref, jat, iat) * refc6
+               end do
+            end do
+            c6(iat, jat) = dc6
+            c6(jat, iat) = dc6
+         end do
+      end do
+   end if
+
+end subroutine get_atomic_c6
+
+
+!> Calculate atomic polarizibilities and their derivatives w.r.t.
+!> the coordination numbers and atomic partial charges.
+subroutine get_polarizibilities(self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq)
+   !DEC$ ATTRIBUTES DLLEXPORT :: get_polarizibilities
+
+   !> Instance of the dispersion model
+   class(d4s_model), intent(in) :: self
+
+   !> Molecular structure data
+   class(structure_type), intent(in) :: mol
+
+   !> Pairwise weighting function for the atomic reference systems
+   real(wp), intent(in) :: gwvec(:, :, :)
+
+   !> Derivative of the pairwise weighting function w.r.t. the coordination number
+   real(wp), intent(in), optional :: gwdcn(:, :, :)
+
+   !> Derivative of the pairwise weighting function w.r.t. the partial charge
+   real(wp), intent(in), optional :: gwdq(:, :, :)
+
+   !> Static polarizibilities for all atoms.
+   real(wp), intent(out) :: alpha(:)
+
+   !> Derivative of the polarizibility w.r.t. the coordination number
+   real(wp), intent(out), optional :: dadcn(:)
+
+   !> Derivative of the polarizibility w.r.t. the partial charge
+   real(wp), intent(out), optional :: dadq(:)
+
+   integer :: iat, izp, iref
+   real(wp) :: refa, da, dadcni, dadqi
+
+   if (present(gwdcn).and.present(dadcn) &
+      & .and.present(gwdq).and.present(dadq)) then
+      alpha(:) = 0.0_wp
+      dadcn(:) = 0.0_wp
+      dadq(:) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(alpha, dadcn, dadq, mol, self, gwvec, gwdcn, gwdq) &
+      !$omp private(iat, izp, iref, refa, da, dadqi, dadcni)
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         da = 0.0_wp
+         dadcni = 0.0_wp
+         dadqi = 0.0_wp
+         do iref = 1, self%ref(izp)
+            refa = self%aiw(1, iref, izp)
+            da = da + gwvec(iref, iat, iat) * refa
+            dadcni = dadcni + gwdcn(iref, iat, iat) * refa
+            dadqi = dadqi + gwdq(iref, iat, iat) * refa
+         end do
+         alpha(iat) = da
+         dadcn(iat) = dadcni
+         dadq(iat) = dadqi
+      end do
+
+   else
+
+      alpha(:) = 0.0_wp
+
+      !$omp parallel do default(none) schedule(runtime) &
+      !$omp shared(alpha, mol, self, gwvec) private(iat, izp, iref, refa, da)
+      do iat = 1, mol%nat
+         izp = mol%id(iat)
+         da = 0.0_wp
+         do iref = 1, self%ref(izp)
+            da = da + gwvec(iref, iat, iat) * self%aiw(1, iref, izp)
+         end do
+         alpha(iat) = da
+      end do
+   end if
+
+end subroutine get_polarizibilities
+
+
+end module dftd4_model_d4s
diff --git a/python/setup.py b/src/dftd4/model/meson.build
similarity index 82%
rename from python/setup.py
rename to src/dftd4/model/meson.build
index b8c2919..230794a 100644
--- a/python/setup.py
+++ b/src/dftd4/model/meson.build
@@ -14,9 +14,9 @@
 # You should have received a copy of the Lesser GNU General Public License
 # along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
 
-from setuptools import setup
-
-setup(
-    cffi_modules=["ffibuilder.py:ffibuilder"],
-    package_data={"dftd4": ["_libdftd4*.so", "*.toml", "*.json"]},
+srcs += files(
+  'd4.f90',
+  'd4s.f90',
+  'type.f90',
+  'utils.f90',
 )
diff --git a/src/dftd4/model/type.f90 b/src/dftd4/model/type.f90
new file mode 100644
index 0000000..2baeddf
--- /dev/null
+++ b/src/dftd4/model/type.f90
@@ -0,0 +1,169 @@
+! This file is part of dftd4.
+! SPDX-Identifier: LGPL-3.0-or-later
+!
+! dftd4 is free software: you can redistribute it and/or modify it under
+! the terms of the Lesser GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
+!
+! dftd4 is distributed in the hope that it will be useful,
+! but WITHOUT ANY WARRANTY; without even the implied warranty of
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+! Lesser GNU General Public License for more details.
+!
+! You should have received a copy of the Lesser GNU General Public License
+! along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
+
+!> Definition of the abstract base dispersion model for the evaluation of C6 coefficients.
+module dftd4_model_type
+   use mctc_env, only : wp
+   use mctc_io, only : structure_type
+   implicit none
+   private
+
+   public :: dispersion_model, d4_ref
+
+
+   !> Abstract base dispersion model to evaluate C6 coefficients
+   type, abstract :: dispersion_model
+
+      !> Number of atoms coupled to by pairwise parameters
+      integer :: ncoup
+
+      !> Charge scaling height
+      real(wp) :: ga
+
+      !> Charge scaling steepness
+      real(wp) :: gc
+
+      !> Effective nuclear charges
+      real(wp), allocatable :: zeff(:)
+
+      !> Chemical hardness
+      real(wp), allocatable :: eta(:)
+
+      !> Electronegativity
+      real(wp), allocatable :: en(:)
+
+      !> Covalent radii for coordination number
+      real(wp), allocatable :: rcov(:)
+
+      !> Expectation values for C8 extrapolation
+      real(wp), allocatable :: r4r2(:)
+
+      !> Number of reference systems
+      integer, allocatable :: ref(:)
+
+      !> Number of Gaussian weights for each reference
+      integer, allocatable :: ngw(:, :)
+
+      !> Reference coordination numbers
+      real(wp), allocatable :: cn(:, :)
+
+      !> Reference partial charges
+      real(wp), allocatable :: q(:, :)
+
+      !> Reference dynamic polarizibilities
+      real(wp), allocatable :: aiw(:, :, :)
+
+      !> Reference C6 coefficients
+      real(wp), allocatable :: c6(:, :, :, :)
+
+   contains
+
+      !> Generate weights for all reference systems
+      procedure(weight_references), deferred :: weight_references
+
+      !> Evaluate C6 coefficient
+      procedure(get_atomic_c6), deferred :: get_atomic_c6
+
+      !> Evaluate atomic polarizibilities
+      procedure(get_polarizibilities), deferred :: get_polarizibilities
+
+   end type dispersion_model
+
+   abstract interface
+
+      !> Calculate the weights of the reference system and the derivatives w.r.t.
+      !> coordination number for later use.
+      subroutine weight_references(self, mol, cn, q, gwvec, gwdcn, gwdq)
+         import dispersion_model, structure_type, wp
+         !> Instance of the dispersion model
+         class(dispersion_model), intent(in) :: self
+         !> Molecular structure data
+         class(structure_type), intent(in) :: mol
+         !> Coordination number of every atom: [nat]
+         real(wp), intent(in) :: cn(:)
+         !> Partial charge of every atom: [nat]
+         real(wp), intent(in) :: q(:)
+         !> weighting for the atomic reference systems: [nref, nat, ncoup]
+         real(wp), intent(out) :: gwvec(:, :, :)
+         !> derivative of the weighting function w.r.t. the coordination number: [nref, nat, ncoup]
+         real(wp), intent(out), optional :: gwdcn(:, :, :)
+         !> derivative of the weighting function w.r.t. the charge scaling: [nref, nat, ncoup]
+         real(wp), intent(out), optional :: gwdq(:, :, :)
+      end subroutine 
+
+      !> Calculate atomic dispersion coefficients and their derivatives w.r.t.
+      !> the coordination numbers and atomic partial charges.
+      subroutine get_atomic_c6(self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq)
+         import dispersion_model, structure_type, wp
+         !> Instance of the dispersion model
+         class(dispersion_model), intent(in) :: self
+         !> Molecular structure data
+         class(structure_type), intent(in) :: mol
+         !> Weighting function for the atomic reference systems
+         real(wp), intent(in) :: gwvec(:, :, :)
+         !> Derivative of the weighting function w.r.t. the coordination number
+         real(wp), intent(in), optional :: gwdcn(:, :, :)
+         !> Derivative of the weighting function w.r.t. the partial charge
+         real(wp), intent(in), optional :: gwdq(:, :, :)
+         !> C6 coefficients for all atom pairs.
+         real(wp), intent(out) :: c6(:, :)
+         !> Derivative of the C6 w.r.t. the coordination number
+         real(wp), intent(out), optional :: dc6dcn(:, :)
+         !> Derivative of the C6 w.r.t. the partial charge
+         real(wp), intent(out), optional :: dc6dq(:, :)
+      end subroutine get_atomic_c6
+
+      !> Calculate atomic polarizibilities and their derivatives w.r.t.
+      !> the coordination numbers and atomic partial charges.
+      subroutine get_polarizibilities(self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq)
+         import dispersion_model, structure_type, wp
+         !> Instance of the dispersion model
+         class(dispersion_model), intent(in) :: self
+         !> Molecular structure data
+         class(structure_type), intent(in) :: mol
+         !> Weighting function for the atomic reference systems
+         real(wp), intent(in) :: gwvec(:, :, :)
+         !> Derivative of the weighting function w.r.t. the coordination number
+         real(wp), intent(in), optional :: gwdcn(:, :, :)
+         !> Derivative of the weighting function w.r.t. the partial charge
+         real(wp), intent(in), optional :: gwdq(:, :, :)
+         !> Static polarizibilities for all atoms.
+         real(wp), intent(out) :: alpha(:)
+         !> Derivative of the polarizibility w.r.t. the coordination number
+         real(wp), intent(out), optional :: dadcn(:)
+         !> Derivative of the polarizibility w.r.t. the partial charge
+         real(wp), intent(out), optional :: dadq(:)
+      end subroutine
+
+   end interface
+
+
+   !> Possible reference charges for D4
+   type :: enum_ref
+
+      !> Electronegativity equilibration charges
+      integer :: eeq = 1
+
+      !> GFN2-xTB Mulliken partial charges
+      integer :: gfn2 = 2
+
+   end type enum_ref
+
+   !> Actual enumerator for D4 reference charges
+   type(enum_ref), parameter :: d4_ref = enum_ref()
+   !DEC$ ATTRIBUTES DLLEXPORT :: d4_ref
+
+end module dftd4_model_type
diff --git a/src/dftd4/model/utils.f90 b/src/dftd4/model/utils.f90
new file mode 100644
index 0000000..b18a4ce
--- /dev/null
+++ b/src/dftd4/model/utils.f90
@@ -0,0 +1,124 @@
+! This file is part of dftd4.
+! SPDX-Identifier: LGPL-3.0-or-later
+!
+! dftd4 is free software: you can redistribute it and/or modify it under
+! the terms of the Lesser GNU General Public License as published by
+! the Free Software Foundation, either version 3 of the License, or
+! (at your option) any later version.
+!
+! dftd4 is distributed in the hope that it will be useful,
+! but WITHOUT ANY WARRANTY; without even the implied warranty of
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+! Lesser GNU General Public License for more details.
+!
+! You should have received a copy of the Lesser GNU General Public License
+! along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
+
+!> Utility functions for the dispersion models 
+module dftd4_model_utils
+   use ieee_arithmetic, only : ieee_is_nan
+   use mctc_env, only : wp
+   implicit none
+   
+   public :: is_exceptional, weight_cn, zeta, dzeta, trapzd
+
+contains
+
+
+!> Check whether we are dealing with an exceptional value, NaN or Inf
+elemental function is_exceptional(val)
+   real(wp), intent(in) :: val
+   logical :: is_exceptional
+   is_exceptional = ieee_is_nan(val) .or. abs(val) > huge(val)
+end function is_exceptional
+
+
+elemental function weight_cn(wf,cn,cnref) result(cngw)
+   real(wp),intent(in) :: wf, cn, cnref
+   real(wp) :: cngw
+   intrinsic :: exp
+   cngw = exp ( -wf * ( cn - cnref )**2 )
+end function weight_cn
+
+!> charge scaling function
+elemental function zeta(a, c, qref, qmod)
+   real(wp), intent(in) :: a
+   real(wp), intent(in) :: c
+   real(wp), intent(in) :: qref
+   real(wp), intent(in) :: qmod
+   real(wp) :: zeta
+
+   intrinsic :: exp
+
+   if (qmod < 0.0_wp) then
+      zeta = exp( a )
+   else
+      zeta = exp( a * ( 1.0_wp - exp( c * ( 1.0_wp - qref/qmod ) ) ) )
+   endif
+
+end function zeta
+
+!> derivative of charge scaling function w.r.t. charge
+elemental function dzeta(a, c, qref, qmod)
+   real(wp), intent(in) :: a
+   real(wp), intent(in) :: c
+   real(wp), intent(in) :: qref
+   real(wp), intent(in) :: qmod
+   real(wp) :: dzeta
+
+   intrinsic :: exp
+
+   if (qmod < 0.0_wp) then
+      dzeta = 0.0_wp
+   else
+      dzeta = - a * c * exp( c * ( 1.0_wp - qref/qmod ) ) &
+         & * zeta(a,c,qref,qmod) * qref / ( qmod**2 )
+   endif
+
+end function dzeta
+
+!> numerical Casimir--Polder integration
+pure function trapzd(pol)
+   real(wp), intent(in) :: pol(23)
+   real(wp) :: trapzd
+
+   real(wp), parameter :: freq(23) = [ &
+      & 0.000001_wp, 0.050000_wp, 0.100000_wp, &
+      & 0.200000_wp, 0.300000_wp, 0.400000_wp, &
+      & 0.500000_wp, 0.600000_wp, 0.700000_wp, &
+      & 0.800000_wp, 0.900000_wp, 1.000000_wp, &
+      & 1.200000_wp, 1.400000_wp, 1.600000_wp, &
+      & 1.800000_wp, 2.000000_wp, 2.500000_wp, &
+      & 3.000000_wp, 4.000000_wp, 5.000000_wp, &
+      & 7.500000_wp, 10.00000_wp]
+   real(wp), parameter :: weights(23) = 0.5_wp * [ &
+      &  ( freq (2) - freq (1) ),  &
+      &  ( freq (2) - freq (1) ) + ( freq (3) - freq (2) ),  &
+      &  ( freq (3) - freq (2) ) + ( freq (4) - freq (3) ),  &
+      &  ( freq (4) - freq (3) ) + ( freq (5) - freq (4) ),  &
+      &  ( freq (5) - freq (4) ) + ( freq (6) - freq (5) ),  &
+      &  ( freq (6) - freq (5) ) + ( freq (7) - freq (6) ),  &
+      &  ( freq (7) - freq (6) ) + ( freq (8) - freq (7) ),  &
+      &  ( freq (8) - freq (7) ) + ( freq (9) - freq (8) ),  &
+      &  ( freq (9) - freq (8) ) + ( freq(10) - freq (9) ),  &
+      &  ( freq(10) - freq (9) ) + ( freq(11) - freq(10) ),  &
+      &  ( freq(11) - freq(10) ) + ( freq(12) - freq(11) ),  &
+      &  ( freq(12) - freq(11) ) + ( freq(13) - freq(12) ),  &
+      &  ( freq(13) - freq(12) ) + ( freq(14) - freq(13) ),  &
+      &  ( freq(14) - freq(13) ) + ( freq(15) - freq(14) ),  &
+      &  ( freq(15) - freq(14) ) + ( freq(16) - freq(15) ),  &
+      &  ( freq(16) - freq(15) ) + ( freq(17) - freq(16) ),  &
+      &  ( freq(17) - freq(16) ) + ( freq(18) - freq(17) ),  &
+      &  ( freq(18) - freq(17) ) + ( freq(19) - freq(18) ),  &
+      &  ( freq(19) - freq(18) ) + ( freq(20) - freq(19) ),  &
+      &  ( freq(20) - freq(19) ) + ( freq(21) - freq(20) ),  &
+      &  ( freq(21) - freq(20) ) + ( freq(22) - freq(21) ),  &
+      &  ( freq(22) - freq(21) ) + ( freq(23) - freq(22) ),  &
+      &  ( freq(23) - freq(22) ) ]
+
+   trapzd = sum(pol*weights)
+
+end function trapzd
+
+
+end module dftd4_model_utils
diff --git a/src/dftd4/ncoord.f90 b/src/dftd4/ncoord.f90
index 410c5e6..727cdda 100644
--- a/src/dftd4/ncoord.f90
+++ b/src/dftd4/ncoord.f90
@@ -21,7 +21,7 @@ module dftd4_ncoord
    implicit none
    private
 
-   public :: get_coordination_number
+   public :: get_coordination_number, add_coordination_number_derivs
 
 
    !> Steepness of counting function
@@ -168,13 +168,15 @@ subroutine ncoord_derf(mol, trans, cutoff, rcov, en, cn, dcndr, dcndL)
    dcndL(:, :, :) = 0.0_wp
    cutoff2 = cutoff**2
 
-   !$omp parallel do default(none) reduction(+:cn, dcndr, dcndL) &
+   !$omp parallel do schedule(runtime) default(none) &
+   !$omp reduction(+:cn, dcndr, dcndL) &
    !$omp shared(mol, trans, cutoff2, rcov, en) &
    !$omp private(jat, itr, izp, jzp, r2, rij, r1, rc, countf, countd, sigma, den)
    do iat = 1, mol%nat
       izp = mol%id(iat)
       do jat = 1, iat
          jzp = mol%id(jat)
+
          den = k4*exp(-(abs(en(izp)-en(jzp)) + k5)**2/k6)
 
          do itr = 1, size(trans, dim=2)
@@ -212,6 +214,72 @@ subroutine ncoord_derf(mol, trans, cutoff, rcov, en, cn, dcndr, dcndL)
 end subroutine ncoord_derf
 
 
+subroutine add_coordination_number_derivs(mol, trans, cutoff, rcov, en, dEdcn, gradient, sigma)
+
+   !> Molecular structure data
+   type(structure_type), intent(in) :: mol
+
+   !> Lattice points
+   real(wp), intent(in) :: trans(:, :)
+
+   !> Real space cutoff
+   real(wp), intent(in) :: cutoff
+
+   !> Covalent radius
+   real(wp), intent(in) :: rcov(:)
+
+   !> Electronegativity
+   real(wp), intent(in) :: en(:)
+
+   !> Derivative of expression with respect to the coordination number
+   real(wp), intent(in) :: dEdcn(:)
+
+   !> Derivative of the CN with respect to the Cartesian coordinates
+   real(wp), intent(inout) :: gradient(:, :)
+
+   !> Derivative of the CN with respect to strain deformations
+   real(wp), intent(inout) :: sigma(:, :)
+
+   integer :: iat, jat, izp, jzp, itr
+   real(wp) :: r2, r1, rc, rij(3), countd(3), ds(3, 3), cutoff2, den
+
+   cutoff2 = cutoff**2
+
+   !$omp parallel do schedule(runtime) default(none) &
+   !$omp reduction(+:gradient, sigma) &
+   !$omp shared(mol, trans, cutoff2, rcov, en, dEdcn) &
+   !$omp private(iat, jat, itr, izp, jzp, r2, rij, r1, rc, countd, ds, den)
+   do iat = 1, mol%nat
+      izp = mol%id(iat)
+      do jat = 1, iat
+         jzp = mol%id(jat)
+
+         den = k4*exp(-(abs(en(izp)-en(jzp)) + k5)**2/k6)
+
+         do itr = 1, size(trans, dim=2)
+            rij = mol%xyz(:, iat) - (mol%xyz(:, jat) + trans(:, itr))
+            r2 = sum(rij**2)
+            if (r2 > cutoff2 .or. r2 < 1.0e-12_wp) cycle
+            r1 = sqrt(r2)
+
+            rc = rcov(izp) + rcov(jzp)
+
+            countd = den*derf_count(kcn, r1, rc) * rij/r1
+
+            gradient(:, iat) = gradient(:, iat) + countd * (dEdcn(iat) + dEdcn(jat))
+            gradient(:, jat) = gradient(:, jat) - countd * (dEdcn(iat) + dEdcn(jat))
+
+            ds = spread(countd, 1, 3) * spread(rij, 2, 3)
+
+            sigma(:, :) = sigma(:, :) &
+               & + ds * (dEdcn(iat) + merge(dEdcn(jat), 0.0_wp, jat /= iat))
+         end do
+      end do
+   end do
+
+end subroutine add_coordination_number_derivs
+
+
 !> Error function counting function for coordination number contributions.
 pure function erf_count(k, r, r0) result(count)
 
diff --git a/src/dftd4/numdiff.f90 b/src/dftd4/numdiff.f90
index 922af79..17c2ed5 100644
--- a/src/dftd4/numdiff.f90
+++ b/src/dftd4/numdiff.f90
@@ -19,7 +19,7 @@ module dftd4_numdiff
    use dftd4_cutoff, only : realspace_cutoff
    use dftd4_damping, only : damping_param
    use dftd4_disp, only : get_dispersion
-   use dftd4_model, only : d4_model
+   use dftd4_model, only : dispersion_model
    use mctc_env, only : wp
    use mctc_io, only : structure_type
    implicit none
@@ -39,7 +39,7 @@ subroutine get_dispersion_hessian(mol, disp, param, cutoff, hessian)
    class(structure_type), intent(in) :: mol
 
    !> Dispersion model
-   class(d4_model), intent(in) :: disp
+   class(dispersion_model), intent(in) :: disp
 
    !> Damping parameters
    class(damping_param), intent(in) :: param
diff --git a/src/dftd4/output.f90 b/src/dftd4/output.f90
index afd8cf7..bbac071 100644
--- a/src/dftd4/output.f90
+++ b/src/dftd4/output.f90
@@ -21,7 +21,7 @@ module dftd4_output
    use mctc_io_math, only : matinv_3x3
    use dftd4_damping, only : damping_param
    use dftd4_damping_rational, only : rational_damping_param
-   use dftd4_model, only : d4_model
+   use dftd4_model, only : dispersion_model
    use dftd4_version, only : get_dftd4_version
    implicit none
    private
@@ -45,7 +45,7 @@ subroutine ascii_atomic_radii(unit, mol, disp)
    class(structure_type), intent(in) :: mol
 
    !> Dispersion model
-   class(d4_model), intent(in) :: disp
+   class(dispersion_model), intent(in) :: disp
 
    integer :: isp
 
@@ -78,7 +78,7 @@ subroutine ascii_atomic_references(unit, mol, disp)
    class(structure_type), intent(in) :: mol
 
    !> Dispersion model
-   class(d4_model), intent(in) :: disp
+   class(dispersion_model), intent(in) :: disp
 
    integer :: isp, iref, mref
 
@@ -127,7 +127,7 @@ subroutine ascii_system_properties(unit, mol, disp, cn, q, c6)
    class(structure_type), intent(in) :: mol
 
    !> Dispersion model
-   class(d4_model), intent(in) :: disp
+   class(dispersion_model), intent(in) :: disp
 
    !> Coordination numbers
    real(wp), intent(in) :: cn(:)
@@ -291,8 +291,11 @@ subroutine ascii_damping_param(unit, param, method)
       if (present(method)) then
          write(unit, '(a, "-")', advance="no") method
       end if
-      write(unit, '(a)') &
-         & trim(merge("D4-ATM", "D4    ", abs(param%s9) > 0))
+      if (abs(param%s9) > 0) then
+         write(unit, '(a)') "D4-ATM"
+      else
+         write(unit, '(a)') "D4"
+      end if
       write(unit, '(21("-"))')
       write(unit, '(a4, t10, f10.4)') &
          & "s6", param%s6, &
diff --git a/src/dftd4/param.f90 b/src/dftd4/param.f90
index c94cb35..a08c8e2 100644
--- a/src/dftd4/param.f90
+++ b/src/dftd4/param.f90
@@ -36,7 +36,7 @@ module dftd4_param
          & p_b3p, p_b1pw, p_b3pw, p_o3lyp, p_revpbe0, p_revpbe38, &
          & p_pbe0, p_pwp1, p_pw1pw, p_mpw1pw, p_mpw1lyp, p_pw6b95, &
          & p_tpssh, p_tpss0, p_x3lyp, p_m06l, p_m06, p_b97d, &
-         & p_wb97, p_wb97x, p_b97m, p_wb97m, p_camb3lyp, p_lcblyp, &
+         & p_wb97, p_wb97x_2008, p_b97m, p_wb97m, p_camb3lyp, p_lcblyp, &
          & p_lh07tsvwn, p_lh07ssvwn, p_lh12ctssirpw92, p_lh12ctssifpw92, &
          & p_lh14tcalpbe, p_lh20t, p_b2plyp, p_b2gpplyp, p_mpw2plyp, p_pwpb95, &
          & p_dsdblyp, p_dsdpbe, p_dsdpbeb95, p_dsdpbep86, p_dsdsvwn, &
@@ -47,9 +47,10 @@ module dftd4_param
          & p_revpbe0dh, p_revtpss0, p_revdsdpbep86, p_revdsdpbe, &
          & p_revdsdblyp, p_revdodpbep86, p_am05, p_hse12, p_hse12s, &
          & p_r2scanh, p_r2scan0, p_r2scan50, p_r2scan_3c, p_camqtp01, &
-         & p_lcwpbe, p_lcwpbeh, p_wb97x_rev, p_wb97m_rev, p_wb97x_3c, &         
-         & p_wr2scan, p_r2scan0_dh, p_r2scan_cidh, p_r2scan_qidh, p_r2scan0_2, &
-         & p_pr2scan50, p_pr2scan69, p_kpr2scan50, p_wpr2scan50, p_last
+         & p_lcwpbe, p_lcwpbeh, p_wb97x_rev, p_wb97m_rev, &
+         & p_wb97x_3c, p_wr2scan, p_r2scan0_dh, p_r2scan_cidh, &
+         & p_r2scan_qidh, p_r2scan0_2, p_pr2scan50, p_pr2scan69, &
+         & p_kpr2scan50, p_wpr2scan50, p_wb97x, p_last
    end enum
    integer, parameter :: df_enum = kind(p_invalid)
 
@@ -222,7 +223,11 @@ subroutine get_functionals(funcs)
    funcs(p_wb97m_rev) = new_funcgroup([character(len=20) :: 'wb97m-rev', &
       & 'ωb97m-rev', 'omegab97m-rev', 'wb97m_rev', 'ωb97m_rev', 'omegab97m_rev'])
    funcs(p_wb97) = new_funcgroup([character(len=20) :: 'wb97', 'ωb97', 'omegab97'])
-   funcs(p_wb97x) = new_funcgroup([character(len=20) :: 'wb97x', 'ωb97x', 'omegab97x'])
+   funcs(p_wb97x_2008) = new_funcgroup([character(len=20) :: 'wb97x_2008', &
+      & 'ωb97x_2008', 'omegab97x_2008', 'wb97x-2008', 'ωb97x-2008', &
+      & 'omegab97x-2008'])
+   funcs(p_wb97x) = new_funcgroup([character(len=20) :: 'wb97x', 'ωb97x', &
+      & 'omegab97x'])
    funcs(p_wb97x_rev) = new_funcgroup([character(len=20) :: 'wb97x-rev', &
       & 'ωb97x-rev', 'omegab97x-rev', 'wb97x_rev', 'ωb97x_rev', 'omegab97x_rev'])
    funcs(p_wb97x_3c) = new_funcgroup([character(len=20) :: 'wb97x-3c', &
@@ -269,7 +274,7 @@ subroutine get_rational_damping_id(id, param, s9)
    logical :: mbd
 
    mbd = .true.
-   if (present(s9)) mbd = s9 /= 0.0_wp
+   if (present(s9)) mbd = abs(s9) > epsilon(s9)
 
    if (mbd) then
       call get_d4eeq_bjatm_parameter(id, param, s9)
@@ -671,12 +676,15 @@ subroutine get_d4eeq_bjatm_parameter(dfnum, param, s9)
       param = dftd_param ( & ! (SAW190103)
          &  s6=1.0000_wp, s8=6.55792598_wp, a1=0.76666802_wp, a2=8.36027334_wp )
       !  Fitset: MD= -0.12779 MAD= 0.36152 RMSD= 0.49991
-   case(p_wb97x)
+   case(p_wb97x_2008)
       param = dftd_param ( & ! (SAW190103)
          &  s6=1.0000_wp, s8=-0.07519516_wp, a1=0.45094893_wp, a2=6.78425255_wp )
       !  S22x5: MD= 0.05 MAD= 0.16 RMSD= 0.22
       !  S66x8: MD= 0.06 MAD= 0.16 RMSD= 0.21
       !  NCI10: MD= 0.08 MAD= 0.15 RMSD= 0.25
+   case(p_wb97x)
+      param = dftd_param ( & ! (10.1002/jcc.26411)
+         &  s6=1.0000_wp, s8=0.5093_wp, a1=0.0662_wp, a2=5.4487_wp )
    case(p_wb97x_rev)
       param = dftd_param ( & ! (10.1063/5.0133026)
          &  s6=1.0000_wp, s8=0.4485_wp, a1=0.3306_wp, a2=4.279_wp )
@@ -1022,7 +1030,10 @@ pure function get_functional_id(df) result(num)
       num = p_wb97m_rev
    case('wb97', 'ωb97', 'omegab97', 'hyb_gga_xc_wb97')
       num = p_wb97
-   case('wb97x', 'ωb97x', 'omegab97x', 'hyb_gga_xc_wb97x')
+   case('wb97x-2008', 'ωb97x-2008', 'omegab97x-2008', 'hyb_gga_xc_wb97x', &
+      & 'wb97x_2008', 'ωb97x_2008', 'omegab97x_2008')
+      num = p_wb97x_2008
+   case('wb97x', 'ωb97x', 'omegab97x', 'hyb_gga_xc_wb97x_v')
       num = p_wb97x
    case('wb97x-rev', 'ωb97x-rev', 'omegab97x-rev', 'wb97x_rev', 'ωb97x_rev', &
       & 'omegab97x_rev') ! D4 re-parametrization
diff --git a/src/dftd4/reference.f90 b/src/dftd4/reference.f90
index aa67200..78cd2a1 100644
--- a/src/dftd4/reference.f90
+++ b/src/dftd4/reference.f90
@@ -334,7 +334,7 @@ pure subroutine set_refalpha_gfn2_sym(alpha, ga, gc, sym)
    !> Element symbol
    character(len=*), intent(in) :: sym
 
-   call set_refalpha_eeq(alpha, ga, gc, to_number(sym))
+   call set_refalpha_gfn2(alpha, ga, gc, to_number(sym))
 
 end subroutine set_refalpha_gfn2_sym
 
diff --git a/src/dftd4/reference.inc b/src/dftd4/reference.inc
index 978d88f..889f932 100644
--- a/src/dftd4/reference.inc
+++ b/src/dftd4/reference.inc
@@ -1721,28 +1721,28 @@
      &        2.2184260_wp,     1.5421450_wp,     1.1337000_wp,     0.6865730_wp,   &
      &        0.4605190_wp,     0.2197990_wp,     0.1294090_wp              /
 ! REF ScF3  - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1906
-      data refq    (4, 21) /      1.02910987985129 /
-      data refh    (4, 21) /     -0.34303662000000 /
-      data gffq    (4, 21) /      1.19800000000000 /
-      data gffh    (4, 21) /     -0.39900000000000 /
-      data dftq    (4, 21) /      1.19800000000000 /
-      data dfth    (4, 21) /     -0.39900000000000 /
-      data pbcq    (4, 21) /      0.78700000000000 /
-      data pbch    (4, 21) /     -0.26200000000000 /
-      data clsq    (4, 21) /      0.78700000000000 /
-      data clsh    (4, 21) /     -0.26200000000000 /
-      data hcount  (4, 21) /      1.50000000000000 /
-      data ascale  (4, 21) /      1.00000000000000 /
-      data refcovcn(4, 21) /      3.83500000000000 /
-      data refcn   (4, 21) /      6.69400000000000 /
+      data refq    (4, 21) /      1.02910987985129_wp /
+      data refh    (4, 21) /     -0.34303662000000_wp /
+      data gffq    (4, 21) /      1.19800000000000_wp /
+      data gffh    (4, 21) /     -0.39900000000000_wp /
+      data dftq    (4, 21) /      1.19800000000000_wp /
+      data dfth    (4, 21) /     -0.39900000000000_wp /
+      data pbcq    (4, 21) /      0.78700000000000_wp /
+      data pbch    (4, 21) /     -0.26200000000000_wp /
+      data clsq    (4, 21) /      0.78700000000000_wp /
+      data clsh    (4, 21) /     -0.26200000000000_wp /
+      data hcount  (4, 21) /      1.50000000000000_wp /
+      data ascale  (4, 21) /      1.00000000000000_wp /
+      data refcovcn(4, 21) /      3.83500000000000_wp /
+      data refcn   (4, 21) /      6.69400000000000_wp /
       data refsys (4, 21) /   11 /
       data alphaiw(:,4, 21) /                                            &
-     &       25.7885393,    25.5284322,    24.8018061,    22.4847968,   &
-     &       19.8432092,    17.4046425,    15.3140809,    13.5610822,   &
-     &       12.0932363,    10.8561131,     9.8039073,     8.9004931,   &
-     &        7.4345994,     6.3020196,     5.4061411,     4.6844025,   &
-     &        4.0943751,     3.0185882,     2.3095039,     1.4697240,   &
-     &        1.0145692,     0.5013176,     0.2990179              /
+     &       25.7885393_wp,    25.5284322_wp,    24.8018061_wp,    22.4847968_wp,   &
+     &       19.8432092_wp,    17.4046425_wp,    15.3140809_wp,    13.5610822_wp,   &
+     &       12.0932363_wp,    10.8561131_wp,     9.8039073_wp,     8.9004931_wp,   &
+     &        7.4345994_wp,     6.3020196_wp,     5.4061411_wp,     4.6844025_wp,   &
+     &        4.0943751_wp,     3.0185882_wp,     2.3095039_wp,     1.4697240_wp,   &
+     &        1.0145692_wp,     0.5013176_wp,     0.2990179_wp              /
       data refn(21) / 4 /
 ! REF Ti  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1906
       data refq    (1, 22) /     -0.00000000032847_wp /
@@ -4191,7 +4191,7 @@
      &        2.5762480_wp,     1.8666410_wp,     1.4298640_wp,     0.9275130_wp,   &
      &        0.6530570_wp,     0.3316710_wp,     0.1992050_wp              /
       data refn(53) / 2 /
-! REF 1e  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1906
+! REF Xe  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1906
       data refq    (1, 54) /     -0.00000000000000_wp /
       data refh    (1, 54) /      0.00000000000000_wp /
       data gffq    (1, 54) /      0.00000000000000_wp /
@@ -8660,30 +8660,6 @@
      &        3.4323326_wp,     2.5724899_wp,     2.0125562_wp,     1.3479270_wp,   &
      &        0.9794339_wp,     0.5389514_wp,     0.3469517_wp              /
       data refn(114) / 1 /
-! REF LvH2  - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1906
-      data refq    (1,116) /      0.04481663412472_wp /
-      data refh    (1,116) /     -0.02240831706236_wp /
-      data gffq    (1,116) /      0.04481663412472_wp /
-      data gffh    (1,116) /     -0.02240831706236_wp /
-      data dftq    (1,116) /      0.04481663412472_wp /
-      data dfth    (1,116) /     -0.02240831706236_wp /
-      data pbcq    (1,116) /      0.04481663412472_wp /
-      data pbch    (1,116) /     -0.02240831706236_wp /
-      data clsq    (1,116) /      0.04481663412472_wp /
-      data clsh    (1,116) /     -0.02240831706236_wp /
-      data hcount  (1,116) /      2.00000000000000_wp /
-      data ascale  (1,116) /      1.00000000000000_wp /
-      data refcovcn(1,116) /      1.74812370366573_wp /
-      data refcn   (1,116) /      1.98131399263162_wp /
-      data refsys (1,116) /    1 /
-      data alphaiw(:,1,116) /                                            &
-     &       62.5965347_wp,    59.9793469_wp,    54.2098284_wp,    41.6476762_wp,   &
-     &       31.8504866_wp,    24.9639388_wp,    20.1291251_wp,    16.6500840_wp,   &
-     &       14.0715476_wp,    12.1054557_wp,    10.5676443_wp,     9.3376437_wp,   &
-     &        7.5027755_wp,     6.2067008_wp,     5.2468060_wp,     4.5100150_wp,   &
-     &        3.9287041_wp,     2.9084035_wp,     2.2561760_wp,     1.4921393_wp,   &
-     &        1.0737727_wp,     0.5817618_wp,     0.3715195_wp              /
-      data refn(115) / 1 /
 ! REF McH - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1906
       data refq    (1,115) /      0.10991065534975_wp /
       data refh    (1,115) /     -0.10991065534975_wp /
@@ -8707,6 +8683,30 @@
      &        6.8482249_wp,     5.7186423_wp,     4.8669543_wp,     4.2042872_wp,   &
      &        3.6761256_wp,     2.7387147_wp,     2.1335072_wp,     1.4195987_wp,   &
      &        1.0262708_wp,     0.5601697_wp,     0.3590984_wp              /
+      data refn(115) / 1 /
+! REF LvH2  - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1906
+      data refq    (1,116) /      0.04481663412472_wp /
+      data refh    (1,116) /     -0.02240831706236_wp /
+      data gffq    (1,116) /      0.04481663412472_wp /
+      data gffh    (1,116) /     -0.02240831706236_wp /
+      data dftq    (1,116) /      0.04481663412472_wp /
+      data dfth    (1,116) /     -0.02240831706236_wp /
+      data pbcq    (1,116) /      0.04481663412472_wp /
+      data pbch    (1,116) /     -0.02240831706236_wp /
+      data clsq    (1,116) /      0.04481663412472_wp /
+      data clsh    (1,116) /     -0.02240831706236_wp /
+      data hcount  (1,116) /      2.00000000000000_wp /
+      data ascale  (1,116) /      1.00000000000000_wp /
+      data refcovcn(1,116) /      1.74812370366573_wp /
+      data refcn   (1,116) /      1.98131399263162_wp /
+      data refsys (1,116) /    1 /
+      data alphaiw(:,1,116) /                                            &
+     &       62.5965347_wp,    59.9793469_wp,    54.2098284_wp,    41.6476762_wp,   &
+     &       31.8504866_wp,    24.9639388_wp,    20.1291251_wp,    16.6500840_wp,   &
+     &       14.0715476_wp,    12.1054557_wp,    10.5676443_wp,     9.3376437_wp,   &
+     &        7.5027755_wp,     6.2067008_wp,     5.2468060_wp,     4.5100150_wp,   &
+     &        3.9287041_wp,     2.9084035_wp,     2.2561760_wp,     1.4921393_wp,   &
+     &        1.0737727_wp,     0.5817618_wp,     0.3715195_wp              /
       data refn(116) / 1 /
 ! REF TsH - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1906
       data refq    (1,117) /      0.07044735360796_wp /
diff --git a/test/api/example.c b/test/api/example.c
index c76feba..d95b66c 100644
--- a/test/api/example.c
+++ b/test/api/example.c
@@ -176,7 +176,39 @@ int test_example(void)
         goto err;
     }
     dftd4_delete(param);
+    dftd4_delete(disp);
+
+    // D4S - r2SCAN-3c
+    disp = dftd4_custom_d4s_model(error, mol, 2.0, 1.0);
+    if (dftd4_check_error(error)) {
+        goto err;
+    }
+    if (!disp) {
+        goto err;
+    }
+
+    param = dftd4_load_rational_damping(error, "r2scan_3c", true);
+    if (dftd4_check_error(error)) {
+        goto err;
+    }
+    if (!param) {
+        goto err;
+    }
 
+    dftd4_get_dispersion(error, mol, disp, param, &energy, NULL, NULL);
+    if (dftd4_check_error(error)) {
+        goto err;
+    }
+
+    dftd4_get_dispersion(error, mol, disp, param, &energy, gradient, sigma);
+    if (dftd4_check_error(error)) {
+        goto err;
+    }
+    dftd4_get_numerical_hessian(error, mol, disp, param, hessian);
+    if (dftd4_check_error(error)) {
+        goto err;
+    }
+    dftd4_delete(param);
     dftd4_delete(disp);
     dftd4_delete(mol);
     dftd4_delete(error);
diff --git a/test/unit/meson.build b/test/unit/meson.build
index ab5e84a..ebffcb8 100644
--- a/test/unit/meson.build
+++ b/test/unit/meson.build
@@ -17,6 +17,7 @@
 # Create mstore as subproject for testing
 mstore_dep = dependency(
   'mstore',
+  version: '>=0.3.0',
   fallback: ['mstore', 'mstore_dep'],
   default_options: ['default_library=static'],
   required: not meson.is_subproject(),
diff --git a/test/unit/test_dftd4.f90 b/test/unit/test_dftd4.f90
index 927f575..50b7e57 100644
--- a/test/unit/test_dftd4.f90
+++ b/test/unit/test_dftd4.f90
@@ -41,30 +41,49 @@ subroutine collect_dftd4(testsuite)
 
    testsuite = [ &
       & new_unittest("PBE-D4", test_pbed4_mb01), &
+      & new_unittest("PBE-D4S", test_pbed4s_mb01), &
       & new_unittest("B97-D4", test_b97d4_mb02), &
+      & new_unittest("B97-D4S", test_b97d4s_mb02), &
       & new_unittest("TPSS-D4", test_tpssd4_mb03), &
+      & new_unittest("TPSS-D4S", test_tpssd4s_mb03), &
       & new_unittest("PWPB95-D4", test_pwpb95d4_mb04), &
+      & new_unittest("PWPB95-D4S", test_pwpb95d4s_mb04), &
       & new_unittest("B2PLYP-D4", test_b2plypd4_mb05), &
+      & new_unittest("B2PLYP-D4S", test_b2plypd4s_mb05), &
       & new_unittest("PW6B95-D4", test_pw6b95d4_mb06), &
+      & new_unittest("PW6B95-D4S", test_pw6b95d4s_mb06), &
       & new_unittest("OLYP-D4", test_olypd4_mb07), &
+      & new_unittest("OLYP-D4S", test_olypd4s_mb07), &
       & new_unittest("PBE0-D4", test_pbe0d4_mb08), &
+      & new_unittest("PBE0-D4S", test_pbe0d4s_mb08), &
       & new_unittest("RPBE-D4-ATM", test_rpbed4atm_mb09), &
+      & new_unittest("RPBE-D4S-ATM", test_rpbed4satm_mb09), &
       & new_unittest("B2GPPLYP-D4-ATM", test_b2gpplypd4atm_mb10), &
+      & new_unittest("B2GPPLYP-D4S-ATM", test_b2gpplypd4satm_mb10), &
       & new_unittest("LH14t-calPBE-D4-ATM", test_lh14tcalpbed4atm_mb11), &
+      & new_unittest("LH14t-calPBE-D4S-ATM", test_lh14tcalpbed4satm_mb11), &
       & new_unittest("B1B95-D4-ATM", test_b1b95d4atm_mb12), &
+      & new_unittest("B1B95-D4S-ATM", test_b1b95d4satm_mb12), &
       & new_unittest("M06L-D4-ATM", test_m06ld4atm_mb13), &
+      & new_unittest("M06L-D4S-ATM", test_m06ld4satm_mb13), &
       & new_unittest("TPSSh-D4-ATM", test_tpsshd4atm_mb14), &
-      & new_unittest("TPSSh-D4-ATM-AmF3", test_tpsshd4atm_amf3), &
+      & new_unittest("TPSSh-D4S-ATM", test_tpsshd4satm_mb14), &
       & new_unittest("HF-D4-ATM", test_hfd4atm_mb15), &
+      & new_unittest("HF-D4S-ATM", test_hfd4satm_mb15), &
       & new_unittest("CAM-B3LYP-D4-ATM", test_camb3lypd4atm_mb16), &
+      & new_unittest("CAM-B3LYP-D4S-ATM", test_camb3lypd4satm_mb16), &
       & new_unittest("r2SCAN-3c", test_r2scan3c_mb01), &
-      & new_unittest("Actinides", test_actinides) &
+      & new_unittest("r2SCAN-3c-D4S", test_r2scan3c_d4s_mb01), &
+      & new_unittest("TPSSh-D4-ATM-AmF3", test_tpsshd4atm_amf3), &
+      & new_unittest("TPSSh-D4S-ATM-AmF3", test_tpsshd4satm_amf3), &
+      & new_unittest("Actinides-D4", test_actinides_d4), &
+      & new_unittest("Actinides-D4S", test_actinides_d4s) &
       & ]
 
 end subroutine collect_dftd4
 
 
-subroutine test_dftd4_gen(error, mol, param, ref, ga, gc)
+subroutine test_dftd4_gen(error, mol, d4, param, ref)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -72,33 +91,29 @@ subroutine test_dftd4_gen(error, mol, param, ref, ga, gc)
    !> Molecular structure data
    type(structure_type), intent(in) :: mol
 
+   !> Dispersion model
+   class(dispersion_model), intent(in) :: d4
+
    !> Damping parameters
    class(damping_param), intent(in) :: param
 
    !> Expected dispersion energy
    real(wp), intent(in) :: ref
 
-   !> Charge scaling height
-   real(wp), intent(in), optional :: ga
-
-   !> Charge scaling steepness
-   real(wp), intent(in), optional :: gc
-
-   type(d4_model) :: d4
    real(wp) :: energy
 
-   call new_d4_model(d4, mol, ga=ga, gc=gc)
    call get_dispersion(mol, d4, param, realspace_cutoff(), energy)
 
    call check(error, energy, ref, thr=thr)
    if (allocated(error)) then
+      call test_failed(error, "Dispersion energy does not match")
       print*,energy
    end if
 
 end subroutine test_dftd4_gen
 
 
-subroutine test_numgrad(error, mol, param)
+subroutine test_numgrad(error, mol, d4, param)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -106,17 +121,18 @@ subroutine test_numgrad(error, mol, param)
    !> Molecular structure data
    type(structure_type), intent(inout) :: mol
 
+   !> Dispersion model
+   class(dispersion_model), intent(in) :: d4
+
    !> Damping parameters
    class(damping_param), intent(in) :: param
 
    integer :: iat, ic
-   type(d4_model) :: d4
    real(wp) :: energy, er, el, sigma(3, 3)
    real(wp), allocatable :: gradient(:, :), numgrad(:, :)
    real(wp), parameter :: step = 1.0e-6_wp
 
    allocate(gradient(3, mol%nat), numgrad(3, mol%nat))
-   call new_d4_model(d4, mol)
 
    do iat = 1, mol%nat
       do ic = 1, 3
@@ -139,7 +155,7 @@ subroutine test_numgrad(error, mol, param)
 end subroutine test_numgrad
 
 
-subroutine test_numsigma(error, mol, param)
+subroutine test_numsigma(error, mol, d4, param)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -147,19 +163,20 @@ subroutine test_numsigma(error, mol, param)
    !> Molecular structure data
    type(structure_type), intent(inout) :: mol
 
+   !> Dispersion model
+   class(dispersion_model), intent(in) :: d4
+
    !> Damping parameters
    class(damping_param), intent(in) :: param
 
    integer :: ic, jc
-   type(d4_model) :: d4
    real(wp) :: energy, er, el, sigma(3, 3), eps(3, 3), numsigma(3, 3)
    real(wp), allocatable :: gradient(:, :), xyz(:, :)
    real(wp), parameter :: unity(3, 3) = reshape(&
-      & [1, 0, 0, 0, 1, 0, 0, 0, 1], shape(unity))
+      & [1, 0, 0, 0, 1, 0, 0, 0, 1], [3, 3])
    real(wp), parameter :: step = 1.0e-6_wp
 
    allocate(gradient(3, mol%nat), xyz(3, mol%nat))
-   call new_d4_model(d4, mol)
 
    eps(:, :) = unity
    xyz(:, :) = mol%xyz
@@ -193,15 +210,33 @@ subroutine test_pbed4_mb01(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 0.95948085_wp, a1 = 0.38574991_wp, a2 = 4.80688534_wp)
 
    call get_structure(mol, "MB16-43", "01")
-   call test_dftd4_gen(error, mol, param, -1.8578752883363366E-002_wp)
+   call new_d4_model(d4, mol)
+   call test_dftd4_gen(error, mol, d4, param, -1.8578752883363366E-002_wp)
 
 end subroutine test_pbed4_mb01
 
+subroutine test_pbed4s_mb01(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 0.95948085_wp, a1 = 0.38574991_wp, a2 = 4.80688534_wp)
+
+   call get_structure(mol, "MB16-43", "01")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_gen(error, mol, d4s, param, -1.9870451633183694E-002_wp)
+
+end subroutine test_pbed4s_mb01
 
 subroutine test_b97d4_mb02(error)
 
@@ -209,15 +244,33 @@ subroutine test_b97d4_mb02(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 1.69460052_wp, a1 = 0.28904684_wp, a2 = 4.13407323_wp)
 
    call get_structure(mol, "MB16-43", "02")
-   call test_dftd4_gen(error, mol, param, -8.9181168937810723E-002_wp)
+   call new_d4_model(d4, mol)
+   call test_dftd4_gen(error, mol, d4, param, -8.9181168937810723E-002_wp)
 
 end subroutine test_b97d4_mb02
 
+subroutine test_b97d4s_mb02(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 1.69460052_wp, a1 = 0.28904684_wp, a2 = 4.13407323_wp)
+
+   call get_structure(mol, "MB16-43", "02")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_gen(error, mol, d4s, param, -0.10354699373838475_wp)
+
+end subroutine test_b97d4s_mb02
 
 subroutine test_tpssd4_mb03(error)
 
@@ -225,15 +278,33 @@ subroutine test_tpssd4_mb03(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 1.91130849_wp, a1 = 0.43332851_wp, a2 = 4.56986797_wp)
 
    call get_structure(mol, "MB16-43", "03")
-   call test_dftd4_gen(error, mol, param, -2.4695638764787930E-002_wp)
+   call new_d4_model(d4, mol)
+   call test_dftd4_gen(error, mol, d4, param, -2.4695638764787930E-002_wp)
 
 end subroutine test_tpssd4_mb03
 
+subroutine test_tpssd4s_mb03(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 1.91130849_wp, a1 = 0.43332851_wp, a2 = 4.56986797_wp)
+
+   call get_structure(mol, "MB16-43", "03")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_gen(error, mol, d4s, param, -2.9321970435591389E-002_wp)
+
+end subroutine test_tpssd4s_mb03
 
 subroutine test_pwpb95d4_mb04(error)
 
@@ -241,15 +312,33 @@ subroutine test_pwpb95d4_mb04(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 0.82_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = -0.34639127_wp, a1 = 0.41080636_wp, a2 = 3.83878274_wp)
 
    call get_structure(mol, "MB16-43", "04")
-   call test_dftd4_gen(error, mol, param, -9.5128100471706181E-003_wp)
+   call new_d4_model(d4, mol)
+   call test_dftd4_gen(error, mol, d4, param, -9.5128100471706181E-003_wp)
 
 end subroutine test_pwpb95d4_mb04
 
+subroutine test_pwpb95d4s_mb04(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 0.82_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = -0.34639127_wp, a1 = 0.41080636_wp, a2 = 3.83878274_wp)
+
+   call get_structure(mol, "MB16-43", "04")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_gen(error, mol, d4s, param, -1.0003412660121589E-002_wp)
+
+end subroutine test_pwpb95d4s_mb04
 
 subroutine test_b2plypd4_mb05(error)
 
@@ -257,15 +346,33 @@ subroutine test_b2plypd4_mb05(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 0.64_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 1.15117773_wp, a1 = 0.42666167_wp, a2 = 4.73635790_wp)
 
    call get_structure(mol, "MB16-43", "05")
-   call test_numgrad(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_numgrad(error, mol, d4, param)
 
 end subroutine test_b2plypd4_mb05
 
+subroutine test_b2plypd4s_mb05(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 0.64_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 1.15117773_wp, a1 = 0.42666167_wp, a2 = 4.73635790_wp)
+
+   call get_structure(mol, "MB16-43", "05")
+   call new_d4s_model(d4s, mol)
+   call test_numgrad(error, mol, d4s, param)
+
+end subroutine test_b2plypd4s_mb05
 
 subroutine test_pw6b95d4_mb06(error)
 
@@ -273,15 +380,33 @@ subroutine test_pw6b95d4_mb06(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = -0.31629935_wp, a1 = 0.03999357_wp, a2 = 5.83690254_wp)
 
    call get_structure(mol, "MB16-43", "06")
-   call test_numgrad(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_numgrad(error, mol, d4, param)
 
 end subroutine test_pw6b95d4_mb06
 
+subroutine test_pw6b95d4s_mb06(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = -0.31629935_wp, a1 = 0.03999357_wp, a2 = 5.83690254_wp)
+
+   call get_structure(mol, "MB16-43", "06")
+   call new_d4s_model(d4s, mol)
+   call test_numgrad(error, mol, d4s, param)
+
+end subroutine test_pw6b95d4s_mb06
 
 subroutine test_olypd4_mb07(error)
 
@@ -289,15 +414,34 @@ subroutine test_olypd4_mb07(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 2.74836820_wp, a1 = 0.60184498_wp, a2 = 2.53292167_wp)
 
    call get_structure(mol, "MB16-43", "07")
-   call test_numgrad(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_numgrad(error, mol, d4, param)
 
 end subroutine test_olypd4_mb07
 
+subroutine test_olypd4s_mb07(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 2.74836820_wp, a1 = 0.60184498_wp, a2 = 2.53292167_wp)
+
+   call get_structure(mol, "MB16-43", "07")
+   call new_d4s_model(d4s, mol)
+   call test_numgrad(error, mol, d4s, param)
+
+end subroutine test_olypd4s_mb07
+
 
 subroutine test_pbe0d4_mb08(error)
 
@@ -305,15 +449,34 @@ subroutine test_pbe0d4_mb08(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 1.20065498_wp, a1 = 0.40085597_wp, a2 = 5.02928789_wp)
 
    call get_structure(mol, "MB16-43", "08")
-   call test_numsigma(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_numsigma(error, mol, d4, param)
 
 end subroutine test_pbe0d4_mb08
 
+subroutine test_pbe0d4s_mb08(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 1.20065498_wp, a1 = 0.40085597_wp, a2 = 5.02928789_wp)
+
+   call get_structure(mol, "MB16-43", "08")
+   call new_d4s_model(d4s, mol)
+   call test_numsigma(error, mol, d4s, param)
+
+end subroutine test_pbe0d4s_mb08
+
 
 subroutine test_rpbed4atm_mb09(error)
 
@@ -321,15 +484,34 @@ subroutine test_rpbed4atm_mb09(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
       & s8 = 1.31183787_wp, a1 = 0.46169493_wp, a2 = 3.15711757_wp)
 
    call get_structure(mol, "MB16-43", "09")
-   call test_dftd4_gen(error, mol, param, -4.5140422485299259E-002_wp)
+   call new_d4_model(d4, mol)
+   call test_dftd4_gen(error, mol, d4, param, -4.5140422485299259E-002_wp)
 
 end subroutine test_rpbed4atm_mb09
 
+subroutine test_rpbed4satm_mb09(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
+      & s8 = 1.31183787_wp, a1 = 0.46169493_wp, a2 = 3.15711757_wp)
+
+   call get_structure(mol, "MB16-43", "09")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_gen(error, mol, d4s, param, -4.7626123029052128E-002_wp)
+
+end subroutine test_rpbed4satm_mb09
+
 
 subroutine test_b2gpplypd4atm_mb10(error)
 
@@ -337,15 +519,33 @@ subroutine test_b2gpplypd4atm_mb10(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 0.56_wp, s9 = 1.0_wp, alp = 16.0_wp, &
       & s8 = 0.94633372_wp, a1 = 0.42907301_wp, a2 = 5.18802602_wp)
 
    call get_structure(mol, "MB16-43", "10")
-   call test_dftd4_gen(error, mol, param, -9.6812427202205668E-003_wp)
+   call new_d4_model(d4, mol)
+   call test_dftd4_gen(error, mol, d4, param, -9.6812427202205668E-003_wp)
 
 end subroutine test_b2gpplypd4atm_mb10
 
+subroutine test_b2gpplypd4satm_mb10(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 0.56_wp, s9 = 1.0_wp, alp = 16.0_wp, &
+      & s8 = 0.94633372_wp, a1 = 0.42907301_wp, a2 = 5.18802602_wp)
+
+   call get_structure(mol, "MB16-43", "10")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_gen(error, mol, d4s, param, -1.1490632914927183E-002_wp)
+
+end subroutine test_b2gpplypd4satm_mb10
 
 subroutine test_lh14tcalpbed4atm_mb11(error)
 
@@ -353,15 +553,33 @@ subroutine test_lh14tcalpbed4atm_mb11(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
       & s8 = 1.27677253_wp, a1 = 0.38128670_wp, a2 = 4.91698883_wp)
 
    call get_structure(mol, "MB16-43", "11")
-   call test_dftd4_gen(error, mol, param, -1.7460015867914524E-002_wp)
+   call new_d4_model(d4, mol)
+   call test_dftd4_gen(error, mol, d4, param, -1.7460015867914524E-002_wp)
 
 end subroutine test_lh14tcalpbed4atm_mb11
 
+subroutine test_lh14tcalpbed4satm_mb11(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
+      & s8 = 1.27677253_wp, a1 = 0.38128670_wp, a2 = 4.91698883_wp)
+
+   call get_structure(mol, "MB16-43", "11")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_gen(error, mol, d4s, param, -2.0329508047867848E-002_wp)
+
+end subroutine test_lh14tcalpbed4satm_mb11
 
 subroutine test_b1b95d4atm_mb12(error)
 
@@ -369,15 +587,34 @@ subroutine test_b1b95d4atm_mb12(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
       & s8 = 1.27701162_wp, a1 = 0.40554715_wp, a2 = 4.63323074_wp)
 
    call get_structure(mol, "MB16-43", "12")
-   call test_dftd4_gen(error, mol, param, -2.5712178361964221E-002_wp)
+   call new_d4_model(d4, mol)
+   call test_dftd4_gen(error, mol, d4, param, -2.5712178361964221E-002_wp)
 
 end subroutine test_b1b95d4atm_mb12
 
+subroutine test_b1b95d4satm_mb12(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
+      & s8 = 1.27701162_wp, a1 = 0.40554715_wp, a2 = 4.63323074_wp)
+
+   call get_structure(mol, "MB16-43", "12")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_gen(error, mol, d4s, param, -2.6528352555725724E-002_wp)
+
+end subroutine test_b1b95d4satm_mb12
+
 
 subroutine test_m06ld4atm_mb13(error)
 
@@ -385,15 +622,33 @@ subroutine test_m06ld4atm_mb13(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
       & s8 = 0.59493760_wp, a1 = 0.71422359_wp, a2 = 6.35314182_wp)
 
    call get_structure(mol, "MB16-43", "13")
-   call test_numgrad(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_numgrad(error, mol, d4, param)
 
 end subroutine test_m06ld4atm_mb13
 
+subroutine test_m06ld4satm_mb13(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
+      & s8 = 0.59493760_wp, a1 = 0.71422359_wp, a2 = 6.35314182_wp)
+
+   call get_structure(mol, "MB16-43", "13")
+   call new_d4s_model(d4s, mol)
+   call test_numgrad(error, mol, d4s, param)
+
+end subroutine test_m06ld4satm_mb13
 
 subroutine test_tpsshd4atm_mb14(error)
 
@@ -401,65 +656,67 @@ subroutine test_tpsshd4atm_mb14(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
       & s8 = 1.85897750_wp, a1 = 0.44286966_wp, a2 = 4.60230534_wp)
 
    call get_structure(mol, "MB16-43", "14")
-   call test_numgrad(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_numgrad(error, mol, d4, param)
 
 end subroutine test_tpsshd4atm_mb14
 
-
-subroutine test_tpsshd4atm_amf3(error)
+subroutine test_tpsshd4satm_mb14(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4s_model) :: d4s
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
       & s8 = 1.85897750_wp, a1 = 0.44286966_wp, a2 = 4.60230534_wp)
 
-   real(wp), parameter :: ref = -2.4882226918209061E-003_wp
-
-   integer, parameter :: nat = 4
-   integer, parameter :: num(nat) = [95, 9, 9, 9]
-   real(wp), parameter :: xyz(3, nat) = reshape([ &
-      & -1.13163973200000_wp, -2.17446990100000_wp, +1.10012477100000_wp, &
-      & -4.66377948900000_wp, -3.12947883400000_wp, -0.36987606800000_wp, &
-      & -0.19032564300000_wp, +1.36339950600000_wp, -0.36521789300000_wp, &
-      & +1.46283310800000_wp, -4.75734549200000_wp, -0.36503081000000_wp],&
-      & [3, nat])
+   call get_structure(mol, "MB16-43", "14")
+   call new_d4s_model(d4s, mol)
+   call test_numgrad(error, mol, d4s, param)
 
-   call new(mol, num, xyz)
+end subroutine test_tpsshd4satm_mb14
 
-   call test_dftd4_gen(error, mol, param, ref)
-   if (allocated(error)) return
+subroutine test_hfd4atm_mb15(error)
 
-   call test_numgrad(error, mol, param)
-   if (allocated(error)) return
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
 
-   call test_numsigma(error, mol, param)
+   type(structure_type) :: mol
+   type(d4_model) :: d4
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
+      & s8 = 1.61679827_wp, a1 = 0.44959224_wp, a2 = 3.35743605_wp)
 
-end subroutine test_tpsshd4atm_amf3
+   call get_structure(mol, "MB16-43", "15")
+   call new_d4_model(d4, mol)
+   call test_numgrad(error, mol, d4, param)
 
+end subroutine test_hfd4atm_mb15
 
-subroutine test_hfd4atm_mb15(error)
+subroutine test_hfd4satm_mb15(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4s_model) :: d4s
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
       & s8 = 1.61679827_wp, a1 = 0.44959224_wp, a2 = 3.35743605_wp)
 
    call get_structure(mol, "MB16-43", "15")
-   call test_numgrad(error, mol, param)
-
-end subroutine test_hfd4atm_mb15
+   call new_d4s_model(d4s, mol)
+   call test_numgrad(error, mol, d4s, param)
 
+end subroutine test_hfd4satm_mb15
 
 subroutine test_camb3lypd4atm_mb16(error)
 
@@ -467,15 +724,33 @@ subroutine test_camb3lypd4atm_mb16(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
       & s8 = 1.74407961_wp, a1 = 0.40137870_wp, a2 = 5.18731225_wp)
 
    call get_structure(mol, "MB16-43", "16")
-   call test_numsigma(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_numsigma(error, mol, d4, param)
 
 end subroutine test_camb3lypd4atm_mb16
 
+subroutine test_camb3lypd4satm_mb16(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
+      & s8 = 1.74407961_wp, a1 = 0.40137870_wp, a2 = 5.18731225_wp)
+
+   call get_structure(mol, "MB16-43", "16")
+   call new_d4s_model(d4s, mol)
+   call test_numsigma(error, mol, d4s, param)
+
+end subroutine test_camb3lypd4satm_mb16
 
 subroutine test_r2scan3c_mb01(error)
 
@@ -483,6 +758,7 @@ subroutine test_r2scan3c_mb01(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.00_wp, s9 = 2.00_wp, alp = 16.0_wp, &
       & s8 = 0.00_wp, a1 = 0.42_wp, a2 = 5.65_wp)
@@ -490,17 +766,108 @@ subroutine test_r2scan3c_mb01(error)
    real(wp), parameter :: ref = -5.7825025556386862E-003_wp
 
    call get_structure(mol, "MB16-43", "01")
-   call test_dftd4_gen(error, mol, param, ref, ga=2.0_wp, gc=1.0_wp)
+   call new_d4_model(d4, mol, ga=2.0_wp, gc=1.0_wp)
+   call test_dftd4_gen(error, mol, d4, param, ref)
 
 end subroutine test_r2scan3c_mb01
 
+subroutine test_r2scan3c_d4s_mb01(error)
 
-subroutine test_actinides(error)
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.00_wp, s9 = 2.00_wp, alp = 16.0_wp, &
+      & s8 = 0.00_wp, a1 = 0.42_wp, a2 = 5.65_wp)
+   
+   real(wp), parameter :: ref = -6.1176284425895639E-003_wp
+
+   call get_structure(mol, "MB16-43", "01")
+   call new_d4s_model(d4s, mol, ga=2.0_wp, gc=1.0_wp)
+   call test_dftd4_gen(error, mol, d4s, param, ref)
+
+end subroutine test_r2scan3c_d4s_mb01
+
+
+subroutine test_tpsshd4atm_amf3(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
+      & s8 = 1.85897750_wp, a1 = 0.44286966_wp, a2 = 4.60230534_wp)
+
+   real(wp), parameter :: ref = -2.4882226918209061E-003_wp
+
+   integer, parameter :: nat = 4
+   integer, parameter :: num(nat) = [95, 9, 9, 9]
+   real(wp), parameter :: xyz(3, nat) = reshape([ &
+      & -1.13163973200000_wp, -2.17446990100000_wp, +1.10012477100000_wp, &
+      & -4.66377948900000_wp, -3.12947883400000_wp, -0.36987606800000_wp, &
+      & -0.19032564300000_wp, +1.36339950600000_wp, -0.36521789300000_wp, &
+      & +1.46283310800000_wp, -4.75734549200000_wp, -0.36503081000000_wp],&
+      & [3, nat])
+
+   call new(mol, num, xyz)
+   call new_d4_model(d4, mol)
+
+   call test_dftd4_gen(error, mol, d4, param, ref)
+   if (allocated(error)) return
+
+   call test_numgrad(error, mol, d4, param)
+   if (allocated(error)) return
+
+   call test_numsigma(error, mol, d4, param)
+
+end subroutine test_tpsshd4atm_amf3
+
+subroutine test_tpsshd4satm_amf3(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
+      & s8 = 1.85897750_wp, a1 = 0.44286966_wp, a2 = 4.60230534_wp)
+
+   real(wp), parameter :: ref = -2.5523952752362009E-003_wp
+
+   integer, parameter :: nat = 4
+   integer, parameter :: num(nat) = [95, 9, 9, 9]
+   real(wp), parameter :: xyz(3, nat) = reshape([ &
+      & -1.13163973200000_wp, -2.17446990100000_wp, +1.10012477100000_wp, &
+      & -4.66377948900000_wp, -3.12947883400000_wp, -0.36987606800000_wp, &
+      & -0.19032564300000_wp, +1.36339950600000_wp, -0.36521789300000_wp, &
+      & +1.46283310800000_wp, -4.75734549200000_wp, -0.36503081000000_wp],&
+      & [3, nat])
+
+   call new(mol, num, xyz)
+   call new_d4s_model(d4s, mol)
+
+   call test_dftd4_gen(error, mol, d4s, param, ref)
+   if (allocated(error)) return
+
+   call test_numgrad(error, mol, d4s, param)
+   if (allocated(error)) return
+
+   call test_numsigma(error, mol, d4s, param)
+
+end subroutine test_tpsshd4satm_amf3
+
+subroutine test_actinides_d4(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 0.95948085_wp, a1 = 0.38574991_wp, a2 = 4.80688534_wp)
@@ -531,9 +898,52 @@ subroutine test_actinides(error)
       & [3, nat])
 
    call new(mol, num, xyz)
-   call test_dftd4_gen(error, mol, param, ref)
+   call new_d4_model(d4, mol)
+   call test_dftd4_gen(error, mol, d4, param, ref)
+
+end subroutine test_actinides_d4
+
+subroutine test_actinides_d4s(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 0.95948085_wp, a1 = 0.38574991_wp, a2 = 4.80688534_wp)
+
+   real(wp), parameter :: ref = -0.18578133252612403_wp
+   
+   integer, parameter :: nat = 17
+   integer, parameter :: num(nat) = [&
+      & 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103]
+   real(wp), parameter :: xyz(3, nat) = reshape([ &
+      & 0.98692316414074_wp, 6.12727238368797_wp,-6.67861597188102_wp, &
+      & 3.63898862390869_wp, 5.12109301182962_wp, 3.01908613326278_wp, &
+      & 5.14503571563551_wp,-3.97172984617710_wp, 3.82011791828867_wp, &
+      & 6.71986847575494_wp, 1.71382138402812_wp, 3.92749159076307_wp, &
+      & 4.13783589704826_wp,-2.10695793491818_wp, 0.19753203068899_wp, &
+      & 8.97685097698326_wp,-3.08813636191844_wp,-4.45568615593938_wp, &
+      & 12.5486412940776_wp,-1.77128765259458_wp, 0.59261498922861_wp, &
+      & 7.82051475868325_wp,-3.97159756604558_wp,-0.53637703616916_wp, &
+      &-0.43444574624893_wp,-1.69696511583960_wp,-1.65898182093050_wp, &
+      &-4.71270645149099_wp,-0.11534827468942_wp, 2.84863373521297_wp, &
+      &-2.52061680335614_wp, 1.82937752749537_wp,-2.10366982879172_wp, &
+      & 0.13551154616576_wp, 7.99805359235043_wp,-1.55508522619903_wp, &
+      & 3.91594542499717_wp,-1.72975169129597_wp,-5.07944366756113_wp, &
+      &-1.03393930231679_wp, 4.69307230054046_wp, 0.02656940927472_wp, &
+      & 6.20675384557240_wp, 4.24490721493632_wp,-0.71004195169885_wp, &
+      & 7.04586341131562_wp, 5.20053667939076_wp,-7.51972863675876_wp, &
+      & 2.01082807362334_wp, 1.34838807211157_wp,-4.70482633508447_wp],&
+      & [3, nat])
+
+   call new(mol, num, xyz)
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_gen(error, mol, d4s, param, ref)
 
-end subroutine test_actinides
+end subroutine test_actinides_d4s
 
 
 end module test_dftd4
diff --git a/test/unit/test_model.f90 b/test/unit/test_model.f90
index 5a456cf..0fa246c 100644
--- a/test/unit/test_model.f90
+++ b/test/unit/test_model.f90
@@ -24,7 +24,9 @@ module test_model
    use dftd4_cutoff, only : get_lattice_points
    use dftd4_data, only : get_covalent_rad
    use dftd4_ncoord, only : get_coordination_number
-   use dftd4_model
+   use dftd4_model, only : dispersion_model, d4_ref
+   use dftd4_model_d4, only : d4_model, new_d4_model
+   use dftd4_model_d4s, only : d4s_model, new_d4s_model
    implicit none
    private
 
@@ -44,21 +46,27 @@ subroutine collect_model(testsuite)
    type(unittest_type), allocatable, intent(out) :: testsuite(:)
 
    testsuite = [ &
-      & new_unittest("gw-mb01", test_gw_mb01), &
-      & new_unittest("gw-mb02", test_gw_mb02), &
-      & new_unittest("gw-mb03", test_gw_mb03), &
-      & new_unittest("dgw-mb04", test_dgw_mb04), &
-      & new_unittest("dgw-mb05", test_dgw_mb05), &
-      & new_unittest("dgw-mb06", test_dgw_mb06), &
-      & new_unittest("gw-gfn2", test_gw_mb07), &
-      & new_unittest("dgw-gfn2", test_dgw_mb08), &
-      & new_unittest("model-error", test_model_error, should_fail=.true.) &
+      & new_unittest("gw-D4-mb01", test_gw_d4_mb01), &
+      & new_unittest("gw-D4S-mb01", test_gw_d4s_mb01), &
+      & new_unittest("gw-D4-mb02", test_gw_d4_mb02), &
+      & new_unittest("gw-D4-mb03", test_gw_d4_mb03), &
+      & new_unittest("dgw_D4-mb04", test_dgw_d4_mb04), &
+      & new_unittest("dgw_D4S-mb04", test_dgw_d4s_mb04), &
+      & new_unittest("dgw_D4-mb05", test_dgw_d4_mb05), &
+      & new_unittest("dgw_D4S-mb05", test_dgw_d4s_mb05), &
+      & new_unittest("dgw_D4-mb06", test_dgw_d4_mb06), &
+      & new_unittest("dgw_D4S-mb06", test_dgw_d4s_mb06), &
+      & new_unittest("gw-D4-gfn2", test_gw_d4_mb07), &
+      & new_unittest("dgw-D4-gfn2", test_dgw_d4_mb08), &
+      & new_unittest("dgw-D4S-gfn2", test_dgw_d4s_mb08), &
+      & new_unittest("model-D4-error", test_d4_model_error, should_fail=.true.), &
+      & new_unittest("model-D4S-error", test_d4s_model_error, should_fail=.true.) &
       & ]
 
 end subroutine collect_model
 
 
-subroutine test_gw_gen(error, mol, ref, with_cn, with_q)
+subroutine test_gw_gen(error, mol, d4, ref, with_cn, with_q, qat)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -66,20 +74,26 @@ subroutine test_gw_gen(error, mol, ref, with_cn, with_q)
    !> Molecular structure data
    type(structure_type) :: mol
 
+   !> Dispersion model
+   class(dispersion_model), intent(in) :: d4
+
    !> Reference Gaussian weights
-   real(wp), intent(in) :: ref(:, :)
+   real(wp), intent(in) :: ref(:, :, :)
 
+   !> Calculate coordination number
    logical, intent(in) :: with_cn
+
+   !> Calculate atomic charges
    logical, intent(in) :: with_q
 
-   type(d4_model) :: d4
-   real(wp), allocatable :: cn(:), q(:), gwvec(:, :)
+   !> Atomic charges
+   real(wp), optional, intent(in) :: qat(:)
+
+   real(wp), allocatable :: cn(:), q(:), gwvec(:, :, :)
    real(wp), parameter :: cutoff = 30.0_wp
    real(wp), allocatable :: lattr(:, :)
 
-   call new_d4_model(error, d4, mol)
-
-   allocate(cn(mol%nat), q(mol%nat), gwvec(maxval(d4%ref), mol%nat))
+   allocate(cn(mol%nat), q(mol%nat), gwvec(maxval(d4%ref), mol%nat, d4%ncoup))
    cn(:) = 0.0_wp
    q(:) = 0.0_wp
 
@@ -88,11 +102,14 @@ subroutine test_gw_gen(error, mol, ref, with_cn, with_q)
       call get_coordination_number(mol, lattr, cutoff, d4%rcov, d4%en, cn)
    end if
    if (with_q) then
-      call get_charges(mol, q)
+      if(present(qat)) then
+         q(:) = qat
+      else
+         call get_charges(mol, q)
+      end if
    end if
 
    call d4%weight_references(mol, cn, q, gwvec)
-
    if (any(abs(gwvec - ref) > thr2)) then
       call test_failed(error, "Gaussian weights do not match")
       where(abs(gwvec) < thr) gwvec = 0.0_wp
@@ -102,7 +119,7 @@ subroutine test_gw_gen(error, mol, ref, with_cn, with_q)
 end subroutine test_gw_gen
 
 
-subroutine test_dgw_gen(error, mol, with_cn, with_q)
+subroutine test_dgw_gen(error, mol, d4, with_cn, with_q, qat)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -110,23 +127,30 @@ subroutine test_dgw_gen(error, mol, with_cn, with_q)
    !> Molecular structure data
    type(structure_type) :: mol
 
+   !> Dispersion model
+   class(dispersion_model), intent(in) :: d4
+
+   !> Calculate coordination number
    logical, intent(in) :: with_cn
+
+   !> Calculate atomic charges
    logical, intent(in) :: with_q
 
-   integer :: iat, mref
-   type(d4_model) :: d4
-   real(wp), allocatable :: cn(:), q(:), gwvec(:, :), gwdcn(:, :), gwdq(:, :)
-   real(wp), allocatable :: gwr(:, :), gwl(:, :), numdcn(:, :), numdq(:, :)
+   !> Atomic charges
+   real(wp), optional, intent(in) :: qat(:)
+
+   integer :: iat, mref, ncoup
+   real(wp), allocatable :: cn(:), q(:), gwvec(:, :, :), gwdcn(:, :, :), gwdq(:, :, :)
+   real(wp), allocatable :: gwr(:, :, :), gwl(:, :, :), numdcn(:, :, :), numdq(:, :, :)
    real(wp), parameter :: cutoff = 30.0_wp, lattr(3, 1) = 0.0_wp
    real(wp), parameter :: step = 1.0e-6_wp
 
-   call new_d4_model(d4, mol)
-
    mref = maxval(d4%ref)
-   allocate(cn(mol%nat), q(mol%nat), gwvec(mref, mol%nat), &
-      & gwdcn(mref, mol%nat), gwdq(mref, mol%nat), &
-      & gwr(mref, mol%nat), gwl(mref, mol%nat), &
-      & numdcn(mref, mol%nat), numdq(mref, mol%nat))
+   ncoup = d4%ncoup
+   allocate(cn(mol%nat), q(mol%nat), gwvec(mref, mol%nat, ncoup), &
+      & gwdcn(mref, mol%nat, ncoup), gwdq(mref, mol%nat, ncoup), &
+      & gwr(mref, mol%nat, ncoup), gwl(mref, mol%nat, ncoup), &
+      & numdcn(mref, mol%nat, ncoup), numdq(mref, mol%nat, ncoup))
    cn(:) = 0.0_wp
    q(:) = 0.0_wp
 
@@ -134,7 +158,11 @@ subroutine test_dgw_gen(error, mol, with_cn, with_q)
       call get_coordination_number(mol, lattr, cutoff, d4%rcov, d4%en, cn)
    end if
    if (with_q) then
-      call get_charges(mol, q)
+      if(present(qat)) then
+         q(:) = qat
+      else
+         call get_charges(mol, q)
+      end if
    end if
 
    if (with_cn) then
@@ -144,9 +172,9 @@ subroutine test_dgw_gen(error, mol, with_cn, with_q)
          cn(iat) = cn(iat) - 2*step
          call d4%weight_references(mol, cn, q, gwl)
          cn(iat) = cn(iat) + step
-         gwdcn(:, :) = 0.5_wp*(gwr - gwl)/step
-         numdcn(:, iat) = gwdcn(:, iat)
-         gwdcn(:, iat) = 0.0_wp
+         gwdcn(:, :, :) = 0.5_wp*(gwr - gwl)/step
+         numdcn(:, iat, :) = gwdcn(:, iat, :)
+         gwdcn(:, iat, :) = 0.0_wp 
          if (any(abs(gwdcn) > thr)) then
             call test_failed(error, "Unexpected non-zero gradient element found")
             exit
@@ -162,9 +190,9 @@ subroutine test_dgw_gen(error, mol, with_cn, with_q)
          q(iat) = q(iat) - 2*step
          call d4%weight_references(mol, cn, q, gwl)
          q(iat) = q(iat) + step
-         gwdq(:, :) = 0.5_wp*(gwr - gwl)/step
-         numdq(:, iat) = gwdq(:, iat)
-         gwdq(:, iat) = 0.0_wp
+         gwdq(:, :, :) = 0.5_wp*(gwr - gwl)/step
+         numdq(:, iat, :) = gwdq(:, iat, :)
+         gwdq(:, iat, :) = 0.0_wp
          if (any(abs(gwdq) > thr)) then
             call test_failed(error, "Unexpected non-zero gradient element found")
             exit
@@ -196,13 +224,14 @@ subroutine test_dgw_gen(error, mol, with_cn, with_q)
 end subroutine test_dgw_gen
 
 
-subroutine test_gw_mb01(error)
+subroutine test_gw_d4_mb01(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
-   real(wp), parameter :: ref(5, 16) = reshape([&
+   type(d4_model) :: d4
+   real(wp), parameter :: ref(5, 16, 1) = reshape([&
       & 1.2088234202205E-11_wp, 1.0375924114812E+00_wp, 2.4445602531076E-09_wp, &
       & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 5.5306460372092E-03_wp, &
       & 9.9446935396279E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
@@ -229,21 +258,475 @@ subroutine test_gw_mb01(error)
       & 1.2720379452861E-05_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
       & 1.4066048552144E-05_wp, 6.8494819902320E-01_wp, 0.0000000000000E+00_wp, &
       & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.9574616732692E-10_wp, &
-      & 1.0064486114128E+00_wp, 0.0000000000000E+00_wp], shape(ref))
+      & 1.0064486114128E+00_wp, 0.0000000000000E+00_wp], &
+      & [5, 16, 1])
 
    call get_structure(mol, "MB16-43", "01")
-   call test_gw_gen(error, mol, ref, with_cn=.true., with_q=.false.)
+   call new_d4_model(error, d4, mol)
+   if (allocated(error)) then 
+      call test_failed(error, "D4 model could not be created")
+      return
+   end if
+   call test_gw_gen(error, mol, d4, ref, with_cn=.true., with_q=.false.)
 
-end subroutine test_gw_mb01
+end subroutine test_gw_d4_mb01
 
+subroutine test_gw_d4s_mb01(error)
 
-subroutine test_gw_mb02(error)
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   real(wp), parameter :: ref(5, 16, 16) = reshape([&
+      & 2.3131592204844E-01_wp, 5.4031280728148E-01_wp, 2.6137589903151E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 5.1809010783127E-01_wp, &
+      & 4.8190989216873E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 8.4636699292911E-02_wp, 2.8916075663289E-01_wp, &
+      & 1.2624087141442E-01_wp, 4.0965002951526E-01_wp, 0.0000000000000E+00_wp, &
+      & 3.3462728435151E-01_wp, 6.6537271564849E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 6.1876633063175E-01_wp, &
+      & 3.4063351416268E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 5.5278384311783E-01_wp, 4.4721615688217E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 3.2486444154312E-01_wp, 6.7513555845688E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 7.5533304743754E-02_wp, &
+      & 2.8014049695601E-01_wp, 1.4158516457382E-01_wp, 4.0913000753423E-01_wp, &
+      & 0.0000000000000E+00_wp, 7.5382669995544E-03_wp, 5.6004612639252E-02_wp, &
+      & 2.5449767768026E-01_wp, 3.7693011028422E-01_wp, 8.5938011138013E-02_wp, &
+      & 5.7538171652020E-01_wp, 4.2461828347980E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 5.5284405139333E-01_wp, &
+      & 4.4715594860667E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 4.9408119795623E-01_wp, 4.9442431983631E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 1.0184875449037E-03_wp, 1.1949848707631E-02_wp, 7.6197788846927E-02_wp, &
+      & 2.6107757645099E-01_wp, 5.2942068197745E-01_wp, 1.6601987730686E-02_wp, &
+      & 8.4375771909016E-02_wp, 2.4112060689684E-01_wp, 3.7174716102808E-01_wp, &
+      & 1.8680908647673E-01_wp, 4.6453010724907E-03_wp, 4.0443789086525E-02_wp, &
+      & 2.3923007812319E-01_wp, 4.1892702798575E-01_wp, 6.3157269210764E-02_wp, &
+      & 1.3398605819820E-02_wp, 7.0902968576691E-02_wp, 2.5998769707888E-01_wp, &
+      & 6.6186984945544E-01_wp, 0.0000000000000E+00_wp, 5.5310440465207E-02_wp, &
+      & 8.7883262647393E-01_wp, 1.0298872576581E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 4.1485451554553E-02_wp, 9.5851454844545E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 6.7032432969941E-05_wp, 1.0329252259896E-01_wp, 3.9006942107954E-01_wp, &
+      & 3.6487976107888E-01_wp, 0.0000000000000E+00_wp, 2.9607006073691E-03_wp, &
+      & 9.9703929939263E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 7.5207498914890E-02_wp, 8.2630508485236E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 6.6472988033016E-02_wp, 9.3352701196698E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.5170748238388E-03_wp, &
+      & 9.9748292517616E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.1199100233663E-05_wp, 6.1735949348506E-02_wp, &
+      & 5.2547467287298E-01_wp, 2.3534849766078E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.1545009180054E-08_wp, 4.8156324470167E-03_wp, &
+      & 6.8119098700326E-01_wp, 9.8640706987545E-08_wp, 9.0609306620312E-02_wp, &
+      & 9.0939069337969E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 6.6527647187693E-02_wp, 9.3347235281231E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 5.0319522106180E-03_wp, 9.7236235992780E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.0833572554318E-11_wp, 3.0735372456843E-06_wp, 8.7114485461151E-03_wp, &
+      & 8.5918441677693E-01_wp, 1.0676321498807E-09_wp, 4.8559648922814E-05_wp, &
+      & 4.5302763715688E-02_wp, 8.3289153450766E-01_wp, 1.2364799599275E-02_wp, &
+      & 0.0000000000000E+00_wp, 4.8553772734271E-10_wp, 1.2356257410943E-03_wp, &
+      & 6.8399234763729E-01_wp, 5.1995420254894E-09_wp, 1.2027896985957E-11_wp, &
+      & 5.7304401546169E-07_wp, 2.4468959606775E-03_wp, 1.0040005130011E+00_wp, &
+      & 0.0000000000000E+00_wp, 8.8802202146486E-02_wp, 8.0146979806795E-01_wp, &
+      & 1.4628116593891E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.2198992510853E-02_wp, 9.7780100748915E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 3.1404764970412E-06_wp, &
+      & 6.3956931077352E-02_wp, 4.7846317290481E-01_wp, 2.9468368515225E-01_wp, &
+      & 0.0000000000000E+00_wp, 9.4397261326925E-04_wp, 9.9905602738673E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 4.4395780891660E-02_wp, 8.5383545436310E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 3.9032141252572E-02_wp, &
+      & 9.6096785874743E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 7.7726046635812E-04_wp, 9.9922273953364E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 5.6167960886507E-07_wp, 2.9078967459651E-02_wp, 6.1859560324107E-01_wp, &
+      & 1.5104287585421E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 8.6218571603764E-13_wp, 3.1641253888564E-04_wp, 6.8471161857811E-01_wp, &
+      & 2.0919541563050E-11_wp, 5.6611833802765E-02_wp, 9.4338816619724E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 3.9070615176354E-02_wp, 9.6092938482365E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.2874045548253E-05_wp, &
+      & 9.7726740456727E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.3913444097198E-09_wp, 6.3616927572147E-04_wp, 8.6706543647995E-01_wp, &
+      & 0.0000000000000E+00_wp, 1.9173135281474E-07_wp, 8.9543641410655E-03_wp, &
+      & 8.7950766885962E-01_wp, 1.2071886445160E-03_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 3.9522919456175E-05_wp, 6.8492827950137E-01_wp, &
+      & 2.3393071766261E-13_wp, 0.0000000000000E+00_wp, 1.3854678522329E-13_wp, &
+      & 4.1660837709814E-06_wp, 1.0064444444547E+00_wp, 0.0000000000000E+00_wp, &
+      & 5.5310440465207E-02_wp, 8.7883262647393E-01_wp, 1.0298872576581E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 4.1485451554553E-02_wp, &
+      & 9.5851454844545E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 6.7032432969941E-05_wp, 1.0329252259896E-01_wp, &
+      & 3.9006942107954E-01_wp, 3.6487976107888E-01_wp, 0.0000000000000E+00_wp, &
+      & 2.9607006073691E-03_wp, 9.9703929939263E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 7.5207498914890E-02_wp, &
+      & 8.2630508485236E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 6.6472988033016E-02_wp, 9.3352701196698E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.5170748238388E-03_wp, 9.9748292517616E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.1199100233663E-05_wp, &
+      & 6.1735949348506E-02_wp, 5.2547467287298E-01_wp, 2.3534849766078E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.1545009180054E-08_wp, &
+      & 4.8156324470167E-03_wp, 6.8119098700326E-01_wp, 9.8640706987545E-08_wp, &
+      & 9.0609306620312E-02_wp, 9.0939069337969E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 6.6527647187693E-02_wp, &
+      & 9.3347235281231E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 5.0319522106180E-03_wp, 9.7236235992780E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.0833572554318E-11_wp, 3.0735372456843E-06_wp, &
+      & 8.7114485461151E-03_wp, 8.5918441677693E-01_wp, 1.0676321498807E-09_wp, &
+      & 4.8559648922814E-05_wp, 4.5302763715688E-02_wp, 8.3289153450766E-01_wp, &
+      & 1.2364799599275E-02_wp, 0.0000000000000E+00_wp, 4.8553772734271E-10_wp, &
+      & 1.2356257410943E-03_wp, 6.8399234763729E-01_wp, 5.1995420254894E-09_wp, &
+      & 1.2027896985957E-11_wp, 5.7304401546169E-07_wp, 2.4468959606775E-03_wp, &
+      & 1.0040005130011E+00_wp, 0.0000000000000E+00_wp, 6.0951918468791E-02_wp, &
+      & 8.6529295743687E-01_wp, 1.1079756841654E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.3336298784774E-02_wp, 9.8666370121523E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 3.1404764970412E-06_wp, 6.3956931077352E-02_wp, 4.7846317290481E-01_wp, &
+      & 2.9468368515225E-01_wp, 0.0000000000000E+00_wp, 3.7174949263315E-04_wp, &
+      & 9.9962825050737E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 4.4395780891660E-02_wp, 8.5383545436310E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.5290254001583E-02_wp, 9.7470974599842E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.9822583135455E-04_wp, &
+      & 9.9970177416865E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 5.6167960886507E-07_wp, 2.9078967459651E-02_wp, &
+      & 6.1859560324107E-01_wp, 1.5104287585421E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 4.9771287942905E-14_wp, 1.3962072360858E-04_wp, &
+      & 6.8484995485525E-01_wp, 1.6516463249478E-12_wp, 3.8575470395886E-02_wp, &
+      & 9.6142452960411E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.5318540756121E-02_wp, 9.7468145924388E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 1.2874045548253E-05_wp, 9.7726740456727E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.6273317494726E-10_wp, 2.3773118630915E-04_wp, &
+      & 8.6745414891661E-01_wp, 0.0000000000000E+00_wp, 2.3703664758231E-08_wp, &
+      & 4.8024934491719E-03_wp, 8.8424901114203E-01_wp, 4.9697715237582E-04_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.4066048552144E-05_wp, &
+      & 6.8494819902320E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.3920190449891E-06_wp, 1.0064472192320E+00_wp, &
+      & 0.0000000000000E+00_wp, 5.5310440465207E-02_wp, 8.7883262647393E-01_wp, &
+      & 1.0298872576581E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 4.1485451554553E-02_wp, 9.5851454844545E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 6.7032432969941E-05_wp, &
+      & 1.0329252259896E-01_wp, 3.9006942107954E-01_wp, 3.6487976107888E-01_wp, &
+      & 0.0000000000000E+00_wp, 2.9607006073691E-03_wp, 9.9703929939263E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 7.5207498914890E-02_wp, 8.2630508485236E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 6.6472988033016E-02_wp, &
+      & 9.3352701196698E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.5170748238388E-03_wp, 9.9748292517616E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.1199100233663E-05_wp, 6.1735949348506E-02_wp, 5.2547467287298E-01_wp, &
+      & 2.3534849766078E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 1.1545009180054E-08_wp, 4.8156324470167E-03_wp, 6.8119098700326E-01_wp, &
+      & 9.8640706987545E-08_wp, 9.0609306620312E-02_wp, 9.0939069337969E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 6.6527647187693E-02_wp, 9.3347235281231E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 5.0319522106180E-03_wp, &
+      & 9.7236235992780E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.0833572554318E-11_wp, &
+      & 3.0735372456843E-06_wp, 8.7114485461151E-03_wp, 8.5918441677693E-01_wp, &
+      & 1.0676321498807E-09_wp, 4.8559648922814E-05_wp, 4.5302763715688E-02_wp, &
+      & 8.3289153450766E-01_wp, 1.2364799599275E-02_wp, 0.0000000000000E+00_wp, &
+      & 4.8553772734271E-10_wp, 1.2356257410943E-03_wp, 6.8399234763729E-01_wp, &
+      & 5.1995420254894E-09_wp, 1.2027896985957E-11_wp, 5.7304401546169E-07_wp, &
+      & 2.4468959606775E-03_wp, 1.0040005130011E+00_wp, 0.0000000000000E+00_wp, &
+      & 5.5310440465207E-02_wp, 8.7883262647393E-01_wp, 1.0298872576581E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 4.1485451554553E-02_wp, &
+      & 9.5851454844545E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 6.7032432969941E-05_wp, 1.0329252259896E-01_wp, &
+      & 3.9006942107954E-01_wp, 3.6487976107888E-01_wp, 0.0000000000000E+00_wp, &
+      & 2.9607006073691E-03_wp, 9.9703929939263E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 7.5207498914890E-02_wp, &
+      & 8.2630508485236E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 6.6472988033016E-02_wp, 9.3352701196698E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.5170748238388E-03_wp, 9.9748292517616E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.1199100233663E-05_wp, &
+      & 6.1735949348506E-02_wp, 5.2547467287298E-01_wp, 2.3534849766078E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.1545009180054E-08_wp, &
+      & 4.8156324470167E-03_wp, 6.8119098700326E-01_wp, 9.8640706987545E-08_wp, &
+      & 9.0609306620312E-02_wp, 9.0939069337969E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 6.6527647187693E-02_wp, &
+      & 9.3347235281231E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 5.0319522106180E-03_wp, 9.7236235992780E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.0833572554318E-11_wp, 3.0735372456843E-06_wp, &
+      & 8.7114485461151E-03_wp, 8.5918441677693E-01_wp, 1.0676321498807E-09_wp, &
+      & 4.8559648922814E-05_wp, 4.5302763715688E-02_wp, 8.3289153450766E-01_wp, &
+      & 1.2364799599275E-02_wp, 0.0000000000000E+00_wp, 4.8553772734271E-10_wp, &
+      & 1.2356257410943E-03_wp, 6.8399234763729E-01_wp, 5.1995420254894E-09_wp, &
+      & 1.2027896985957E-11_wp, 5.7304401546169E-07_wp, 2.4468959606775E-03_wp, &
+      & 1.0040005130011E+00_wp, 0.0000000000000E+00_wp, 8.8802202146486E-02_wp, &
+      & 8.0146979806795E-01_wp, 1.4628116593891E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.2198992510853E-02_wp, 9.7780100748915E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 3.1404764970412E-06_wp, 6.3956931077352E-02_wp, 4.7846317290481E-01_wp, &
+      & 2.9468368515225E-01_wp, 0.0000000000000E+00_wp, 9.4397261326925E-04_wp, &
+      & 9.9905602738673E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 4.4395780891660E-02_wp, 8.5383545436310E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 3.9032141252572E-02_wp, 9.6096785874743E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 7.7726046635812E-04_wp, &
+      & 9.9922273953364E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 5.6167960886507E-07_wp, 2.9078967459651E-02_wp, &
+      & 6.1859560324107E-01_wp, 1.5104287585421E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 8.6218571603764E-13_wp, 3.1641253888564E-04_wp, &
+      & 6.8471161857811E-01_wp, 2.0919541563050E-11_wp, 5.6611833802765E-02_wp, &
+      & 9.4338816619724E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 3.9070615176354E-02_wp, 9.6092938482365E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 1.2874045548253E-05_wp, 9.7726740456727E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.3913444097198E-09_wp, 6.3616927572147E-04_wp, &
+      & 8.6706543647995E-01_wp, 0.0000000000000E+00_wp, 1.9173135281474E-07_wp, &
+      & 8.9543641410655E-03_wp, 8.7950766885962E-01_wp, 1.2071886445160E-03_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 3.9522919456175E-05_wp, &
+      & 6.8492827950137E-01_wp, 2.3393071766261E-13_wp, 0.0000000000000E+00_wp, &
+      & 1.3854678522329E-13_wp, 4.1660837709814E-06_wp, 1.0064444444547E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.1619449180297E-01_wp, 7.4292303143376E-01_wp, &
+      & 1.7688691875381E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 4.5511447319703E-02_wp, 9.5448855268030E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 9.2508392559746E-06_wp, &
+      & 7.5824069699182E-02_wp, 4.4951921574350E-01_wp, 3.1887288951654E-01_wp, &
+      & 0.0000000000000E+00_wp, 3.5066919289813E-03_wp, 9.9649330807102E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 4.4395780891660E-02_wp, 8.5383545436310E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 7.1925482699841E-02_wp, &
+      & 9.2807451730016E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.9954258724411E-03_wp, 9.9700457412756E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.0238008000468E-06_wp, 3.8055054539114E-02_wp, 5.9074525520210E-01_wp, &
+      & 1.7718982934717E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 3.4151558259365E-08_wp, 6.5639826011158E-03_wp, 6.7982280802516E-01_wp, &
+      & 2.5898101368240E-07_wp, 9.7140202686718E-02_wp, 9.0285979731328E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 7.1982878187917E-02_wp, 9.2801712181208E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.1772574193346E-03_wp, &
+      & 9.7612947599990E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 3.5689039339356E-13_wp, &
+      & 3.8192206935584E-07_wp, 4.0712983354820E-03_wp, 8.6371381723556E-01_wp, &
+      & 3.5979138804999E-11_wp, 9.7693789150509E-06_wp, 2.8536546460626E-02_wp, &
+      & 8.5530890313171E-01_wp, 6.3404470879011E-03_wp, 0.0000000000000E+00_wp, &
+      & 1.7396779713960E-09_wp, 1.8302935084816E-03_wp, 6.8352702270097E-01_wp, &
+      & 1.6312609722908E-08_wp, 0.0000000000000E+00_wp, 7.9041698936705E-09_wp, &
+      & 4.0780312005162E-04_wp, 1.0060406958243E+00_wp, 0.0000000000000E+00_wp, &
+      & 5.5310440465207E-02_wp, 8.7883262647393E-01_wp, 1.0298872576581E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 4.1485451554553E-02_wp, &
+      & 9.5851454844545E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 6.7032432969941E-05_wp, 1.0329252259896E-01_wp, &
+      & 3.9006942107954E-01_wp, 3.6487976107888E-01_wp, 0.0000000000000E+00_wp, &
+      & 2.9607006073691E-03_wp, 9.9703929939263E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 7.5207498914890E-02_wp, &
+      & 8.2630508485236E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 6.6472988033016E-02_wp, 9.3352701196698E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.5170748238388E-03_wp, 9.9748292517616E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.1199100233663E-05_wp, &
+      & 6.1735949348506E-02_wp, 5.2547467287298E-01_wp, 2.3534849766078E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.1545009180054E-08_wp, &
+      & 4.8156324470167E-03_wp, 6.8119098700326E-01_wp, 9.8640706987545E-08_wp, &
+      & 9.0609306620312E-02_wp, 9.0939069337969E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 6.6527647187693E-02_wp, &
+      & 9.3347235281231E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 5.0319522106180E-03_wp, 9.7236235992780E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.0833572554318E-11_wp, 3.0735372456843E-06_wp, &
+      & 8.7114485461151E-03_wp, 8.5918441677693E-01_wp, 1.0676321498807E-09_wp, &
+      & 4.8559648922814E-05_wp, 4.5302763715688E-02_wp, 8.3289153450766E-01_wp, &
+      & 1.2364799599275E-02_wp, 0.0000000000000E+00_wp, 4.8553772734271E-10_wp, &
+      & 1.2356257410943E-03_wp, 6.8399234763729E-01_wp, 5.1995420254894E-09_wp, &
+      & 1.2027896985957E-11_wp, 5.7304401546169E-07_wp, 2.4468959606775E-03_wp, &
+      & 1.0040005130011E+00_wp, 0.0000000000000E+00_wp, 5.5310440465207E-02_wp, &
+      & 8.7883262647393E-01_wp, 1.0298872576581E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 4.1485451554553E-02_wp, 9.5851454844545E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 6.7032432969941E-05_wp, 1.0329252259896E-01_wp, 3.9006942107954E-01_wp, &
+      & 3.6487976107888E-01_wp, 0.0000000000000E+00_wp, 2.9607006073691E-03_wp, &
+      & 9.9703929939263E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 7.5207498914890E-02_wp, 8.2630508485236E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 6.6472988033016E-02_wp, 9.3352701196698E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.5170748238388E-03_wp, &
+      & 9.9748292517616E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.1199100233663E-05_wp, 6.1735949348506E-02_wp, &
+      & 5.2547467287298E-01_wp, 2.3534849766078E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.1545009180054E-08_wp, 4.8156324470167E-03_wp, &
+      & 6.8119098700326E-01_wp, 9.8640706987545E-08_wp, 9.0609306620312E-02_wp, &
+      & 9.0939069337969E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 6.6527647187693E-02_wp, 9.3347235281231E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 5.0319522106180E-03_wp, 9.7236235992780E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.0833572554318E-11_wp, 3.0735372456843E-06_wp, 8.7114485461151E-03_wp, &
+      & 8.5918441677693E-01_wp, 1.0676321498807E-09_wp, 4.8559648922814E-05_wp, &
+      & 4.5302763715688E-02_wp, 8.3289153450766E-01_wp, 1.2364799599275E-02_wp, &
+      & 0.0000000000000E+00_wp, 4.8553772734271E-10_wp, 1.2356257410943E-03_wp, &
+      & 6.8399234763729E-01_wp, 5.1995420254894E-09_wp, 1.2027896985957E-11_wp, &
+      & 5.7304401546169E-07_wp, 2.4468959606775E-03_wp, 1.0040005130011E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.7836181363501E-01_wp, 6.2456202118140E-01_wp, &
+      & 2.3160354638897E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 8.7002281543997E-02_wp, 9.1299771845600E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 3.1404764970412E-06_wp, &
+      & 6.3956931077352E-02_wp, 4.7846317290481E-01_wp, 2.9468368515225E-01_wp, &
+      & 0.0000000000000E+00_wp, 1.1450448372045E-02_wp, 9.8854955162796E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 4.4395780891660E-02_wp, 8.5383545436310E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.2478649046186E-01_wp, &
+      & 8.7521350953814E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.0110955182316E-02_wp, 9.8988904481768E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 5.6167960886507E-07_wp, 2.9078967459651E-02_wp, 6.1859560324107E-01_wp, &
+      & 1.5104287585421E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 1.0080902930002E-08_wp, 4.6325621083875E-03_wp, 6.8133424494767E-01_wp, &
+      & 8.7425251232161E-08_wp, 1.5789095742186E-01_wp, 8.4210904257814E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 1.2486469344048E-01_wp, 8.7513530655952E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.2874045548253E-05_wp, &
+      & 9.7726740456727E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.7281235340132E-12_wp, &
+      & 1.0839801911001E-06_wp, 5.9583550692028E-03_wp, 8.6187217041940E-01_wp, &
+      & 1.9632749283518E-10_wp, 2.1818061591790E-05_wp, 3.6017036179768E-02_wp, &
+      & 8.4547474113294E-01_wp, 8.8694849144924E-03_wp, 0.0000000000000E+00_wp, &
+      & 4.1393746281189E-10_wp, 1.1763869822125E-03_wp, 6.8403870138130E-01_wp, &
+      & 4.5070023665802E-09_wp, 0.0000000000000E+00_wp, 2.8208391560596E-10_wp, &
+      & 1.0107828306943E-04_wp, 1.0063475070808E+00_wp, 0.0000000000000E+00_wp, &
+      & 1.5052252044350E-01_wp, 6.7503900878048E-01_wp, 2.0966764053284E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.4123874345618E-01_wp, &
+      & 8.5876125654382E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 3.2995570594716E-04_wp, 1.3239836014058E-01_wp, &
+      & 3.3638195237351E-01_wp, 4.0116925621724E-01_wp, 0.0000000000000E+00_wp, &
+      & 2.7738482922597E-02_wp, 9.7226151707740E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.2379486544581E-01_wp, &
+      & 7.8289211602208E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.8811788794004E-01_wp, 8.1188211205996E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.5107682180162E-02_wp, 9.7489231781984E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.3960579256771E-04_wp, &
+      & 9.0196670358265E-02_wp, 4.5739781308729E-01_wp, 2.9149367395236E-01_wp, &
+      & 0.0000000000000E+00_wp, 5.8317983398498E-12_wp, 1.3182770972301E-06_wp, &
+      & 1.8538244187819E-02_wp, 6.7044774462985E-01_wp, 6.6838194641483E-06_wp, &
+      & 2.2640318425337E-01_wp, 7.7359681574663E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.8821108711455E-01_wp, &
+      & 8.1178891288545E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.0126387421950E-02_wp, 9.6738367035521E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.9953637089135E-12_wp, 9.2422656035061E-08_wp, 2.2493337765938E-04_wp, &
+      & 4.1001518442525E-02_wp, 8.2747340204614E-01_wp, 1.1163506217946E-06_wp, &
+      & 1.2540172388574E-03_wp, 1.0999576750594E-01_wp, 7.3478924996110E-01_wp, &
+      & 4.5973534870136E-02_wp, 1.7733574164893E-13_wp, 1.2868664921572E-07_wp, &
+      & 6.8690163375128E-03_wp, 6.7958369863349E-01_wp, 7.7071301908717E-07_wp, &
+      & 2.5715775485838E-07_wp, 1.6957699914291E-04_wp, 2.6115927712490E-02_wp, &
+      & 9.8015581415428E-01_wp, 0.0000000000000E+00_wp, 1.5052252044350E-01_wp, &
+      & 6.7503900878048E-01_wp, 2.0966764053284E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.4123874345618E-01_wp, 8.5876125654382E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 3.2995570594716E-04_wp, 1.3239836014058E-01_wp, 3.3638195237351E-01_wp, &
+      & 4.0116925621724E-01_wp, 0.0000000000000E+00_wp, 2.7738482922597E-02_wp, &
+      & 9.7226151707740E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.2379486544581E-01_wp, 7.8289211602208E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 1.8811788794004E-01_wp, 8.1188211205996E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.5107682180162E-02_wp, &
+      & 9.7489231781984E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.3960579256771E-04_wp, 9.0196670358265E-02_wp, &
+      & 4.5739781308729E-01_wp, 2.9149367395236E-01_wp, 0.0000000000000E+00_wp, &
+      & 5.8317983398498E-12_wp, 1.3182770972301E-06_wp, 1.8538244187819E-02_wp, &
+      & 6.7044774462985E-01_wp, 6.6838194641483E-06_wp, 2.2640318425337E-01_wp, &
+      & 7.7359681574663E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 1.8821108711455E-01_wp, 8.1178891288545E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 1.0126387421950E-02_wp, 9.6738367035521E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.9953637089135E-12_wp, &
+      & 9.2422656035061E-08_wp, 2.2493337765938E-04_wp, 4.1001518442525E-02_wp, &
+      & 8.2747340204614E-01_wp, 1.1163506217946E-06_wp, 1.2540172388574E-03_wp, &
+      & 1.0999576750594E-01_wp, 7.3478924996110E-01_wp, 4.5973534870136E-02_wp, &
+      & 1.7733574164893E-13_wp, 1.2868664921572E-07_wp, 6.8690163375128E-03_wp, &
+      & 6.7958369863349E-01_wp, 7.7071301908717E-07_wp, 2.5715775485838E-07_wp, &
+      & 1.6957699914291E-04_wp, 2.6115927712490E-02_wp, 9.8015581415428E-01_wp, &
+      & 0.0000000000000E+00_wp, 1.1619449180297E-01_wp, 7.4292303143376E-01_wp, &
+      & 1.7688691875381E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 4.5511447319703E-02_wp, 9.5448855268030E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 9.2508392559746E-06_wp, &
+      & 7.5824069699182E-02_wp, 4.4951921574350E-01_wp, 3.1887288951654E-01_wp, &
+      & 0.0000000000000E+00_wp, 3.5066919289813E-03_wp, 9.9649330807102E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 4.4395780891660E-02_wp, 8.5383545436310E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 7.1925482699841E-02_wp, &
+      & 9.2807451730016E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.9954258724411E-03_wp, 9.9700457412756E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.0238008000468E-06_wp, 3.8055054539114E-02_wp, 5.9074525520210E-01_wp, &
+      & 1.7718982934717E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 3.4151558259365E-08_wp, 6.5639826011158E-03_wp, 6.7982280802516E-01_wp, &
+      & 2.5898101368240E-07_wp, 9.7140202686718E-02_wp, 9.0285979731328E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 7.1982878187917E-02_wp, 9.2801712181208E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.1772574193346E-03_wp, &
+      & 9.7612947599990E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 3.5689039339356E-13_wp, &
+      & 3.8192206935584E-07_wp, 4.0712983354820E-03_wp, 8.6371381723556E-01_wp, &
+      & 3.5979138804999E-11_wp, 9.7693789150509E-06_wp, 2.8536546460626E-02_wp, &
+      & 8.5530890313171E-01_wp, 6.3404470879011E-03_wp, 0.0000000000000E+00_wp, &
+      & 1.7396779713960E-09_wp, 1.8302935084816E-03_wp, 6.8352702270097E-01_wp, &
+      & 1.6312609722908E-08_wp, 0.0000000000000E+00_wp, 7.9041698936705E-09_wp, &
+      & 4.0780312005162E-04_wp, 1.0060406958243E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.1174800276996E-01_wp, 5.6964871898640E-01_wp, 2.5219928685690E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.4403797218710E-01_wp, &
+      & 7.5596202781290E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 4.8890988223564E-04_wp, 1.4079823595826E-01_wp, &
+      & 3.2239231943401E-01_wp, 4.0957756984420E-01_wp, 0.0000000000000E+00_wp, &
+      & 7.5862834744969E-02_wp, 9.2413716525503E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.5224097067826E-01_wp, &
+      & 7.5747542917585E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 2.9773509090075E-01_wp, 7.0226490909925E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 7.0607838000571E-02_wp, 9.2939216199943E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.2189803166994E-04_wp, &
+      & 9.8892646451660E-02_wp, 4.3831806676090E-01_wp, 3.0633584406942E-01_wp, &
+      & 0.0000000000000E+00_wp, 1.0892600979524E-09_wp, 1.9452547146752E-05_wp, &
+      & 3.9425621360989E-02_wp, 6.5404367987276E-01_wp, 7.3196915833069E-05_wp, &
+      & 3.3779631811082E-01_wp, 6.6220368188918E-01_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 2.9783635509721E-01_wp, &
+      & 7.0216364490279E-01_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 0.0000000000000E+00_wp, 9.6336440102884E-03_wp, 9.6786521862972E-01_wp, &
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
+      & 2.4358117918347E-08_wp, 2.1339725696048E-05_wp, 3.5282099660186E-03_wp, &
+      & 1.0654366986150E-01_wp, 7.6039718337984E-01_wp, 9.5562006186987E-05_wp, &
+      & 9.4981643353880E-03_wp, 1.7700942131591E-01_wp, 6.0914264505196E-01_wp, &
+      & 9.7809437645041E-02_wp, 6.8362324068111E-11_wp, 3.0917858879577E-06_wp, &
+      & 1.8135933744590E-02_wp, 6.7075660296166E-01_wp, 1.3284665444268E-05_wp, &
+      & 2.8388831053016E-13_wp, 6.7329811561295E-08_wp, 9.9935157277430E-04_wp, &
+      & 1.0054489358913E+00_wp, 0.0000000000000E+00_wp], &
+      & [5, 16, 16])
+
+   call get_structure(mol, "MB16-43", "01")
+   call new_d4s_model(error, d4s, mol)
+   if (allocated(error)) then 
+      call test_failed(error, "D4S model could not be created")
+      return
+   end if
+   call test_gw_gen(error, mol, d4s, ref, with_cn=.true., with_q=.false.)
+
+end subroutine test_gw_d4s_mb01
+
+
+subroutine test_gw_d4_mb02(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
-   real(wp), parameter :: ref(5, 16) = reshape([&
+   type(d4_model) :: d4
+   real(wp), parameter :: ref(5, 16, 1) = reshape([&
       & 8.1529926850468E-01_wp, 2.2414425700956E-03_wp, 0.0000000000000E+00_wp, &
       & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 1.0229633690838E+00_wp, &
       & 2.0291440612814E-03_wp, 4.4863013350169E-10_wp, 0.0000000000000E+00_wp, &
@@ -270,21 +753,28 @@ subroutine test_gw_mb02(error)
       & 0.0000000000000E+00_wp, 7.4607907232618E-01_wp, 2.0511405541139E-03_wp, &
       & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
       & 1.0523038058719E+00_wp, 2.0872155477415E-03_wp, 4.6145584504737E-10_wp, &
-      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp], shape(ref))
+      & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp], &
+      & [5, 16, 1])
 
    call get_structure(mol, "MB16-43", "02")
-   call test_gw_gen(error, mol, ref, with_cn=.false., with_q=.true.)
+   call new_d4_model(error, d4, mol)
+   if (allocated(error)) then 
+      call test_failed(error, "D4 model could not be created")
+      return
+   end if
+   call test_gw_gen(error, mol, d4, ref, with_cn=.false., with_q=.true.)
 
-end subroutine test_gw_mb02
+end subroutine test_gw_d4_mb02
 
 
-subroutine test_gw_mb03(error)
+subroutine test_gw_d4_mb03(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
-   real(wp), parameter :: ref(7, 16) = reshape([&
+   type(d4_model) :: d4
+   real(wp), parameter :: ref(7, 16, 1) = reshape([&
       & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 3.9504240794198E-09_wp, &
       & 1.0097386820563E-02_wp, 9.3220073517801E-01_wp, 2.5639475147259E-02_wp, &
       & 0.0000000000000E+00_wp, 1.4797717135069E-11_wp, 1.9052325554662E-04_wp, &
@@ -322,54 +812,132 @@ subroutine test_gw_mb03(error)
       & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
       & 2.8478831017041E-04_wp, 9.0297474706410E-01_wp, 0.0000000000000E+00_wp, &
       & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
-      & 0.0000000000000E+00_wp], shape(ref))
+      & 0.0000000000000E+00_wp], &
+      & [7, 16, 1])
 
    call get_structure(mol, "MB16-43", "03")
-   call test_gw_gen(error, mol, ref, with_cn=.true., with_q=.true.)
+   call new_d4_model(error, d4, mol)
+   if (allocated(error)) then 
+      call test_failed(error, "D4 model could not be created")
+      return
+   end if
+   call test_gw_gen(error, mol, d4, ref, with_cn=.true., with_q=.true.)
 
-end subroutine test_gw_mb03
+end subroutine test_gw_d4_mb03
 
 
-subroutine test_dgw_mb04(error)
+subroutine test_dgw_d4_mb04(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
 
    call get_structure(mol, "MB16-43", "04")
-   call test_dgw_gen(error, mol, with_cn=.true., with_q=.false.)
+   call new_d4_model(error, d4, mol)
+   if (allocated(error)) then 
+      call test_failed(error, "D4 model could not be created")
+      return
+   end if
+   call test_dgw_gen(error, mol, d4, with_cn=.true., with_q=.false.)
 
-end subroutine test_dgw_mb04
+end subroutine test_dgw_d4_mb04
 
 
-subroutine test_dgw_mb05(error)
+subroutine test_dgw_d4s_mb04(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4s_model) :: d4s
+
+   call get_structure(mol, "MB16-43", "04")
+   call new_d4s_model(error, d4s, mol)
+   if (allocated(error)) then 
+      call test_failed(error, "D4S model could not be created")
+      return
+   end if
+   call test_dgw_gen(error, mol, d4s, with_cn=.true., with_q=.false.)
+
+end subroutine test_dgw_d4s_mb04
+
+
+subroutine test_dgw_d4_mb05(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4_model) :: d4
+
+   call get_structure(mol, "MB16-43", "05")
+   call new_d4_model(error, d4, mol)
+   if (allocated(error)) then 
+      call test_failed(error, "D4 model could not be created")
+      return
+   end if
+   call test_dgw_gen(error, mol, d4, with_cn=.false., with_q=.true.)
+
+end subroutine test_dgw_d4_mb05
+
+subroutine test_dgw_d4s_mb05(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
 
    call get_structure(mol, "MB16-43", "05")
-   call test_dgw_gen(error, mol, with_cn=.false., with_q=.true.)
+   call new_d4s_model(error, d4s, mol)
+   if (allocated(error)) then 
+      call test_failed(error, "D4S model could not be created")
+      return
+   end if
+   call test_dgw_gen(error, mol, d4s, with_cn=.false., with_q=.true.)
+
+end subroutine test_dgw_d4s_mb05
+
+subroutine test_dgw_d4_mb06(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
 
-end subroutine test_dgw_mb05
+   type(structure_type) :: mol
+   type(d4_model) :: d4
 
+   call get_structure(mol, "MB16-43", "06")
+   call new_d4_model(error, d4, mol)
+   if (allocated(error)) then 
+      call test_failed(error, "D4 model could not be created")
+      return
+   end if
+   call test_dgw_gen(error, mol, d4, with_cn=.true., with_q=.true.)
 
-subroutine test_dgw_mb06(error)
+end subroutine test_dgw_d4_mb06
+
+subroutine test_dgw_d4s_mb06(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4s_model) :: d4s
 
    call get_structure(mol, "MB16-43", "06")
-   call test_dgw_gen(error, mol, with_cn=.true., with_q=.true.)
+   call new_d4s_model(error, d4s, mol)
+   if (allocated(error)) then 
+      call test_failed(error, "D4S model could not be created")
+      return
+   end if
+   call test_dgw_gen(error, mol, d4s, with_cn=.true., with_q=.true.)
 
-end subroutine test_dgw_mb06
+end subroutine test_dgw_d4s_mb06
 
 
-subroutine test_gw_mb07(error)
+subroutine test_gw_d4_mb07(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -381,7 +949,7 @@ subroutine test_gw_mb07(error)
       & 8.34803229863654E-2_wp,-3.62667644019899E-1_wp, 3.64142434058147E-1_wp, &
       & 3.34644499696670E-1_wp,-4.69889877462762E-1_wp,-1.89224201365947E-1_wp, &
       & 4.53790045287620E-1_wp]
-   real(wp), parameter :: ref(7, 16) = reshape([&
+   real(wp), parameter :: ref(7, 16, 1) = reshape([&
       & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 4.0693983485343E-09_wp, &
       & 4.1016483181479E-02_wp, 1.0950348404655E+00_wp, 0.0000000000000E+00_wp, &
       & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 8.2493063323491E-08_wp, &
@@ -419,35 +987,24 @@ subroutine test_gw_mb07(error)
       & 9.9022177224599E-01_wp, 3.7155688096309E-02_wp, 0.0000000000000E+00_wp, &
       & 7.0488497407158E-06_wp, 3.5717430467401E-01_wp, 0.0000000000000E+00_wp, &
       & 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, 0.0000000000000E+00_wp, &
-      & 0.0000000000000E+00_wp], shape(ref))
+      & 0.0000000000000E+00_wp], &
+      & [7, 16, 1])
 
    type(structure_type) :: mol
    type(d4_model) :: d4
-   real(wp), allocatable :: cn(:), gwvec(:, :)
-   real(wp), parameter :: cutoff = 30.0_wp
-   real(wp), allocatable :: lattr(:, :)
 
    call get_structure(mol, "MB16-43", "06")
-   call new_d4_model(d4, mol, ref=d4_ref%gfn2)
-
-   allocate(cn(mol%nat), gwvec(maxval(d4%ref), mol%nat))
-   cn(:) = 0.0_wp
-
-   call get_lattice_points(mol%periodic, mol%lattice, cutoff, lattr)
-   call get_coordination_number(mol, lattr, cutoff, d4%rcov, d4%en, cn)
-
-   call d4%weight_references(mol, cn, qat, gwvec)
-
-   if (any(abs(gwvec - ref) > thr2)) then
-      call test_failed(error, "Gaussian weights do not match")
-      where(abs(gwvec) < thr) gwvec = 0.0_wp
-      print'(3(es20.13,"_wp,"), " &")', gwvec
+   call new_d4_model(error, d4, mol, ref=d4_ref%gfn2)
+   if (allocated(error)) then 
+      call test_failed(error, "D4 model could not be created")
+      return
    end if
+   call test_gw_gen(error, mol, d4, ref, with_cn=.true., with_q=.true., qat=qat)
 
-end subroutine test_gw_mb07
+end subroutine test_gw_d4_mb07
 
 
-subroutine test_dgw_mb08(error)
+subroutine test_dgw_d4_mb08(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -461,82 +1018,46 @@ subroutine test_dgw_mb08(error)
       &-3.05981814182260E-1_wp]
 
    type(structure_type) :: mol
-   integer :: iat, mref
    type(d4_model) :: d4
-   real(wp), allocatable :: cn(:), q(:), gwvec(:, :), gwdcn(:, :), gwdq(:, :)
-   real(wp), allocatable :: gwr(:, :), gwl(:, :), numdcn(:, :), numdq(:, :)
-   real(wp), parameter :: cutoff = 30.0_wp, lattr(3, 1) = 0.0_wp
-   real(wp), parameter :: step = 1.0e-6_wp
 
    call get_structure(mol, "MB16-43", "08")
-   call new_d4_model(d4, mol, ref=d4_ref%gfn2)
+   call new_d4_model(error, d4, mol, ref=d4_ref%gfn2)
+   if (allocated(error)) then 
+      call test_failed(error, "D4 model could not be created")
+      return
+   end if
+   call test_dgw_gen(error, mol, d4, with_cn=.true., with_q=.true., qat=qat)
 
-   mref = maxval(d4%ref)
-   allocate(cn(mol%nat), q(mol%nat), gwvec(mref, mol%nat), &
-      & gwdcn(mref, mol%nat), gwdq(mref, mol%nat), &
-      & gwr(mref, mol%nat), gwl(mref, mol%nat), &
-      & numdcn(mref, mol%nat), numdq(mref, mol%nat))
-   cn(:) = 0.0_wp
-   q(:) = qat
-
-   call get_coordination_number(mol, lattr, cutoff, d4%rcov, d4%en, cn)
-
-   do iat = 1, mol%nat
-      cn(iat) = cn(iat) + step
-      call d4%weight_references(mol, cn, q, gwr)
-      cn(iat) = cn(iat) - 2*step
-      call d4%weight_references(mol, cn, q, gwl)
-      cn(iat) = cn(iat) + step
-      gwdcn(:, :) = 0.5_wp*(gwr - gwl)/step
-      numdcn(:, iat) = gwdcn(:, iat)
-      gwdcn(:, iat) = 0.0_wp
-      if (any(abs(gwdcn) > thr)) then
-         call test_failed(error, "Unexpected non-zero gradient element found")
-         exit
-      end if
-   end do
-   if (allocated(error)) return
-
-   do iat = 1, mol%nat
-      q(iat) = q(iat) + step
-      call d4%weight_references(mol, cn, q, gwr)
-      q(iat) = q(iat) - 2*step
-      call d4%weight_references(mol, cn, q, gwl)
-      q(iat) = q(iat) + step
-      gwdq(:, :) = 0.5_wp*(gwr - gwl)/step
-      numdq(:, iat) = gwdq(:, iat)
-      gwdq(:, iat) = 0.0_wp
-      if (any(abs(gwdq) > thr)) then
-         call test_failed(error, "Unexpected non-zero gradient element found")
-         exit
-      end if
-   end do
-   if (allocated(error)) return
+end subroutine test_dgw_d4_mb08
 
-   call d4%weight_references(mol, cn, q, gwvec, gwdcn, gwdq)
+subroutine test_dgw_d4s_mb08(error)
 
-   if (any(abs(gwdcn - numdcn) > thr2)) then
-      call test_failed(error, "Gaussian weights derivatives do not match")
-      print'(3es21.14)', gwdcn
-      print'("---")'
-      print'(3es21.14)', numdcn
-      print'("---")'
-      print'(3es21.14)', gwdcn - numdcn
-   end if
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
 
-   if (any(abs(gwdq - numdq) > thr2)) then
-      call test_failed(error, "Gaussian weights derivatives do not match")
-      print'(3es21.14)', gwdq
-      print'("---")'
-      print'(3es21.14)', numdq
-      print'("---")'
-      print'(3es21.14)', gwdq - numdq
+   real(wp), parameter :: qat(16) = [&
+      &-2.05667914412001E-1_wp,-3.99554326663093E-1_wp, 3.29243862111419E-1_wp, &
+      &-3.11738256025803E-1_wp, 3.58849862618190E-2_wp, 3.21889825709581E-1_wp, &
+      & 4.14746199807777E-2_wp, 2.95730046338104E-2_wp,-5.06348926564523E-1_wp, &
+      & 3.43067357217139E-1_wp, 6.88375720293390E-1_wp, 7.03350634832100E-2_wp, &
+      &-9.62426987152087E-2_wp,-1.32210876939567E-1_wp, 9.79003738112971E-2_wp, &
+      &-3.05981814182260E-1_wp]
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+
+   call get_structure(mol, "MB16-43", "08")
+   call new_d4s_model(error, d4s, mol, ref=d4_ref%gfn2)
+   if (allocated(error)) then 
+      call test_failed(error, "D4 model could not be created")
+      return
    end if
+   call test_dgw_gen(error, mol, d4s, with_cn=.true., with_q=.true., qat=qat)
 
-end subroutine test_dgw_mb08
+end subroutine test_dgw_d4s_mb08
 
 
-subroutine test_model_error(error)
+subroutine test_d4_model_error(error)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -548,11 +1069,30 @@ subroutine test_model_error(error)
    character(len=*), parameter :: sym(nat) = [character(len=4) :: "Rf", "Db"]
    real(wp), parameter :: xyz(3, nat) = reshape([&
       & 0.0_wp, 0.0_wp, 0.0_wp, 0.0_wp, 0.0_wp, 0.0_wp],&
-      & shape(xyz))
+      & [3, nat])
 
    call new(mol, sym, xyz)
    call new_d4_model(error, d4, mol)
   
-end subroutine test_model_error
+end subroutine test_d4_model_error
+
+subroutine test_d4s_model_error(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+
+   integer, parameter :: nat = 2
+   character(len=*), parameter :: sym(nat) = [character(len=4) :: "H", "Db"]
+   real(wp), parameter :: xyz(3, nat) = reshape([&
+      & 0.0_wp, 0.0_wp, 0.0_wp, 0.0_wp, 0.0_wp, 0.0_wp],&
+      & [3, nat])
+
+   call new(mol, sym, xyz)
+   call new_d4s_model(error, d4s, mol)
+  
+end subroutine test_d4s_model_error
 
 end module test_model
diff --git a/test/unit/test_ncoord.f90 b/test/unit/test_ncoord.f90
index 2ef1295..6e45991 100644
--- a/test/unit/test_ncoord.f90
+++ b/test/unit/test_ncoord.f90
@@ -152,7 +152,7 @@ subroutine test_numsigma(error, mol)
    real(wp), allocatable :: lattr(:, :), trans(:, :)
    real(wp), parameter :: cutoff = 20.0_wp
    real(wp), parameter :: unity(3, 3) = reshape(&
-      & [1, 0, 0, 0, 1, 0, 0, 0, 1], shape(unity))
+      & [1, 0, 0, 0, 1, 0, 0, 0, 1], [3, 3])
    real(wp), parameter :: step = 1.0e-6_wp
 
    allocate(rcov(mol%nid), en(mol%nid), cn(mol%nat), cnr(mol%nat), cnl(mol%nat), &
diff --git a/test/unit/test_pairwise.f90 b/test/unit/test_pairwise.f90
index 0fd4858..c10a2d0 100644
--- a/test/unit/test_pairwise.f90
+++ b/test/unit/test_pairwise.f90
@@ -44,14 +44,17 @@ subroutine collect_pairwise(testsuite)
 
    testsuite = [ &
       & new_unittest("PBE-D4", test_pbed4_mb01), &
+      & new_unittest("PBE-D4S", test_pbed4s_mb01), &
       & new_unittest("B97-D4", test_b97d4_mb02), &
-      & new_unittest("TPSS-D4", test_tpssd4_ammonia) &
+      & new_unittest("B97-D4S", test_b97d4s_mb02), &
+      & new_unittest("TPSS-D4", test_tpssd4_ammonia), &
+      & new_unittest("TPSS-D4S", test_tpssd4s_ammonia) &
       & ]
 
 end subroutine collect_pairwise
 
 
-subroutine test_dftd4_pairwise(error, mol, param)
+subroutine test_dftd4_pairwise(error, mol, d4, param)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -59,15 +62,17 @@ subroutine test_dftd4_pairwise(error, mol, param)
    !> Molecular structure data
    type(structure_type), intent(in) :: mol
 
+   !> Dispersion model
+   class(dispersion_model), intent(in) :: d4
+
    !> Damping parameters
    class(damping_param), intent(in) :: param
 
-   type(d4_model) :: d4
    real(wp) :: energy
    real(wp), allocatable :: energy2(:, :), energy3(:, :)
 
    allocate(energy2(mol%nat, mol%nat), energy3(mol%nat, mol%nat))
-   call new_d4_model(d4, mol)
+
    call get_dispersion(mol, d4, param, cutoff, energy)
    call get_pairwise_dispersion(mol, d4, param, cutoff, energy2, energy3)
 
@@ -85,15 +90,34 @@ subroutine test_pbed4_mb01(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 0.95948085_wp, a1 = 0.38574991_wp, a2 = 4.80688534_wp)
 
    call get_structure(mol, "MB16-43", "01")
-   call test_dftd4_pairwise(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_dftd4_pairwise(error, mol, d4, param)
 
 end subroutine test_pbed4_mb01
 
+subroutine test_pbed4s_mb01(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 0.95948085_wp, a1 = 0.38574991_wp, a2 = 4.80688534_wp)
+
+   call get_structure(mol, "MB16-43", "01")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_pairwise(error, mol, d4s, param)
+
+end subroutine test_pbed4s_mb01
+
 
 subroutine test_b97d4_mb02(error)
 
@@ -101,15 +125,34 @@ subroutine test_b97d4_mb02(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
       & s8 = 1.69460052_wp, a1 = 0.28904684_wp, a2 = 4.13407323_wp)
 
    call get_structure(mol, "MB16-43", "02")
-   call test_dftd4_pairwise(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_dftd4_pairwise(error, mol, d4, param)
 
 end subroutine test_b97d4_mb02
 
+subroutine test_b97d4s_mb02(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
+      & s8 = 1.69460052_wp, a1 = 0.28904684_wp, a2 = 4.13407323_wp)
+
+   call get_structure(mol, "MB16-43", "02")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_pairwise(error, mol, d4s, param)
+
+end subroutine test_b97d4s_mb02
+
 
 subroutine test_tpssd4_ammonia(error)
 
@@ -117,14 +160,33 @@ subroutine test_tpssd4_ammonia(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
       & s8 = 1.76596355_wp, a1 = 0.42822303_wp, a2 = 4.54257102_wp )
 
    call get_structure(mol, "X23", "ammonia")
-   call test_dftd4_pairwise(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_dftd4_pairwise(error, mol, d4, param)
 
 end subroutine test_tpssd4_ammonia
 
+subroutine test_tpssd4s_ammonia(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 1.0_wp, alp = 16.0_wp, &
+      & s8 = 1.76596355_wp, a1 = 0.42822303_wp, a2 = 4.54257102_wp )
+
+   call get_structure(mol, "X23", "ammonia")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_pairwise(error, mol, d4s, param)
+
+end subroutine test_tpssd4s_ammonia
+
 
 end module test_pairwise
diff --git a/test/unit/test_param.f90 b/test/unit/test_param.f90
index e927d7a..6347a92 100644
--- a/test/unit/test_param.f90
+++ b/test/unit/test_param.f90
@@ -89,7 +89,7 @@ subroutine test_rational_damping(error)
       & 'r2scan', 'b1lyp', 'b3-lyp', 'bh-lyp', 'b1p', 'b3p', 'b1pw', 'b3pw', &
       & 'o3-lyp', 'revpbe0', 'revpbe38', 'pbe0', 'pwp1', 'pw1pw', 'mpw1pw', &
       & 'mpw1lyp', 'pw6b95', 'tpssh', 'tpss0', 'x3-lyp', 'm06l', 'm06', &
-      & 'wb97', 'wb97x', 'cam-b3lyp', 'lc-blyp', 'lh07tsvwn', 'lh07ssvwn', &
+      & 'wb97', 'wb97x_2008', 'cam-b3lyp', 'lc-blyp', 'lh07tsvwn', 'lh07ssvwn', &
       & 'lh12ctssirpw92', 'lh12ctssifpw92', 'lh14tcalpbe', 'lh20t', &
       & 'b2plyp', 'b2gpplyp', 'mpw2plyp', 'pwpb95', 'dsdblyp', 'dsdpbe', &
       & 'dsdpbeb95', 'dsdpbep86', 'dsdsvwn', 'dodblyp', 'dodpbe', 'dodpbeb95', &
@@ -143,7 +143,7 @@ subroutine test_rational_damping(error)
       &-2.67802208375706E-2_wp,-2.39612790751360E-2_wp,-2.54023462353336E-2_wp, &  
       &-2.44710136053936E-2_wp,-2.74280989349169E-2_wp,-2.92749846421858E-1_wp, &
       &-4.75432573533092E-2_wp,-8.87276590259854E-2_wp,-8.87276590259854E-2_wp, &
-      &-5.90626128920443E-2_wp]
+      &-5.90626128920443E-2_wp,-1.49262251668830E-1_wp]
    class(damping_param), allocatable :: param
    type(structure_type) :: mol
    integer :: ii
@@ -175,7 +175,7 @@ subroutine test_libxc_names(error)
       & 'mn12sx', 'cam-b3lyp', 'cam-qtp01', 'lc-blyp', 'lc-wpbe', 'lc-wpbeh', &
       & 'b2plyp', 'b2gpplyp', 'b1b95', 'mpwb1k', 'mpw1b95', 'hse03', 'hse06', &
       & 'hse12', 'hse12s', 'hsesol', 'glyp', 'revtpssh', 'b97m', 'wb97m', &
-      & 'wb97', 'wb97x']
+      & 'wb97', 'wb97x_2008', 'wb97x']
 
    character(len=*), parameter :: libxc_names(*) = [character(len=40)::&
       & 'gga_x_am05:gga_c_am05', 'gga_x_b88:gga_c_lyp', 'gga_x_b88:gga_c_pbe', &
@@ -204,7 +204,7 @@ subroutine test_libxc_names(error)
       & 'hyb_gga_xc_hse12', 'hyb_gga_xc_hse12s', 'hyb_gga_xc_hse_sol', &
       & 'gga_x_g96:gga_c_lyp', 'hyb_mgga_xc_revtpssh', &
       & 'mgga_xc_b97m_v', 'hyb_mgga_xc_wb97m_v', 'hyb_gga_xc_wb97', &
-      & 'hyb_gga_xc_wb97x']
+      & 'hyb_gga_xc_wb97x', 'hyb_gga_xc_wb97x_v']
    
    integer :: i, id, id2
    
diff --git a/test/unit/test_periodic.f90 b/test/unit/test_periodic.f90
index 7e168f6..d7de6b3 100644
--- a/test/unit/test_periodic.f90
+++ b/test/unit/test_periodic.f90
@@ -44,15 +44,19 @@ subroutine collect_periodic(testsuite)
 
    testsuite = [ &
       & new_unittest("PBE-D4", test_pbed4_acetic), &
+      & new_unittest("PBE-D4S", test_pbed4s_acetic), &
       & new_unittest("BLYP-D4", test_blypd4_adaman), &
+      & new_unittest("BLYP-D4S", test_blypd4s_adaman), &
       & new_unittest("TPSS-D4", test_tpssd4_ammonia), &
-      & new_unittest("SCAN-D4", test_scand4_anthracene) &
+      & new_unittest("TPSS-D4S", test_tpssd4s_ammonia), &
+      & new_unittest("SCAN-D4", test_scand4_anthracene), &
+      & new_unittest("SCAN-D4S", test_scand4s_anthracene) &
       & ]
 
 end subroutine collect_periodic
 
 
-subroutine test_dftd4_gen(error, mol, param, ref)
+subroutine test_dftd4_gen(error, mol, d4, param, ref)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -60,16 +64,17 @@ subroutine test_dftd4_gen(error, mol, param, ref)
    !> Molecular structure data
    type(structure_type), intent(in) :: mol
 
+   !> Dispersion model
+   class(dispersion_model), intent(in) :: d4
+
    !> Damping parameters
    class(damping_param), intent(in) :: param
 
    !> Expected dispersion energy
    real(wp), intent(in) :: ref
 
-   type(d4_model) :: d4
    real(wp) :: energy
 
-   call new_d4_model(d4, mol)
    call get_dispersion(mol, d4, param, cutoff, energy)
 
    call check(error, energy, ref, thr=thr)
@@ -80,7 +85,7 @@ subroutine test_dftd4_gen(error, mol, param, ref)
 end subroutine test_dftd4_gen
 
 
-subroutine test_numgrad(error, mol, param)
+subroutine test_numgrad(error, mol, d4, param)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -88,17 +93,18 @@ subroutine test_numgrad(error, mol, param)
    !> Molecular structure data
    type(structure_type), intent(inout) :: mol
 
+   !> Dispersion model
+   class(dispersion_model), intent(in) :: d4
+
    !> Damping parameters
    class(damping_param), intent(in) :: param
 
    integer :: iat, ic
-   type(d4_model) :: d4
    real(wp) :: energy, er, el, sigma(3, 3)
    real(wp), allocatable :: gradient(:, :), numgrad(:, :)
    real(wp), parameter :: step = 1.0e-6_wp
 
    allocate(gradient(3, mol%nat), numgrad(3, mol%nat))
-   call new_d4_model(d4, mol)
 
    do iat = 1, mol%nat
       do ic = 1, 3
@@ -121,7 +127,7 @@ subroutine test_numgrad(error, mol, param)
 end subroutine test_numgrad
 
 
-subroutine test_numsigma(error, mol, param)
+subroutine test_numsigma(error, mol, d4, param)
 
    !> Error handling
    type(error_type), allocatable, intent(out) :: error
@@ -129,19 +135,20 @@ subroutine test_numsigma(error, mol, param)
    !> Molecular structure data
    type(structure_type), intent(inout) :: mol
 
+   !> Dispersion model
+   class(dispersion_model), intent(in) :: d4
+
    !> Damping parameters
    class(damping_param), intent(in) :: param
 
    integer :: ic, jc
-   type(d4_model) :: d4
    real(wp) :: energy, er, el, sigma(3, 3), eps(3, 3), numsigma(3, 3), lattice(3, 3)
    real(wp), allocatable :: gradient(:, :), xyz(:, :)
    real(wp), parameter :: unity(3, 3) = reshape(&
-      & [1, 0, 0, 0, 1, 0, 0, 0, 1], shape(unity))
+      & [1, 0, 0, 0, 1, 0, 0, 0, 1], [3, 3])
    real(wp), parameter :: step = 1.0e-7_wp
 
    allocate(gradient(3, mol%nat), xyz(3, mol%nat))
-   call new_d4_model(d4, mol)
 
    eps(:, :) = unity
    xyz(:, :) = mol%xyz
@@ -179,15 +186,34 @@ subroutine test_pbed4_acetic(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 0.95948085_wp, a1 = 0.38574991_wp, a2 = 4.80688534_wp )
 
    call get_structure(mol, "X23", "acetic")
-   call test_dftd4_gen(error, mol, param, -6.6969773229895183E-002_wp)
+   call new_d4_model(d4, mol)
+   call test_dftd4_gen(error, mol, d4, param, -6.6969773229895183E-002_wp)
 
 end subroutine test_pbed4_acetic
 
+subroutine test_pbed4s_acetic(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 0.95948085_wp, a1 = 0.38574991_wp, a2 = 4.80688534_wp )
+
+   call get_structure(mol, "X23", "acetic")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_gen(error, mol, d4s, param, -6.8611894281210548E-002_wp)
+
+end subroutine test_pbed4s_acetic
+
 
 subroutine test_blypd4_adaman(error)
 
@@ -195,15 +221,34 @@ subroutine test_blypd4_adaman(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 2.34076671_wp, a1 = 0.44488865_wp, a2 = 4.09330090_wp )
 
    call get_structure(mol, "X23", "adaman")
-   call test_dftd4_gen(error, mol, param, -0.23629687693703993_wp)
+   call new_d4_model(d4, mol)
+   call test_dftd4_gen(error, mol, d4, param, -0.23629687693703993_wp)
 
 end subroutine test_blypd4_adaman
 
+subroutine test_blypd4s_adaman(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 2.34076671_wp, a1 = 0.44488865_wp, a2 = 4.09330090_wp )
+
+   call get_structure(mol, "X23", "adaman")
+   call new_d4s_model(d4s, mol)
+   call test_dftd4_gen(error, mol, d4s, param, -0.25250595410032312_wp)
+
+end subroutine test_blypd4s_adaman
+
 
 subroutine test_tpssd4_ammonia(error)
 
@@ -211,15 +256,34 @@ subroutine test_tpssd4_ammonia(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 1.76596355_wp, a1 = 0.42822303_wp, a2 = 4.54257102_wp )
 
    call get_structure(mol, "X23", "ammonia")
-   call test_numgrad(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_numgrad(error, mol, d4, param)
 
 end subroutine test_tpssd4_ammonia
 
+subroutine test_tpssd4s_ammonia(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 1.76596355_wp, a1 = 0.42822303_wp, a2 = 4.54257102_wp )
+
+   call get_structure(mol, "X23", "ammonia")
+   call new_d4s_model(d4s, mol)
+   call test_numgrad(error, mol, d4s, param)
+
+end subroutine test_tpssd4s_ammonia
+
 
 subroutine test_scand4_anthracene(error)
 
@@ -227,14 +291,32 @@ subroutine test_scand4_anthracene(error)
    type(error_type), allocatable, intent(out) :: error
 
    type(structure_type) :: mol
+   type(d4_model) :: d4
    type(rational_damping_param) :: param = rational_damping_param(&
       & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
       & s8 = 1.46126056_wp, a1 = 0.62930855_wp, a2 = 6.31284039_wp )
 
    call get_structure(mol, "X23", "anthracene")
-   call test_numsigma(error, mol, param)
+   call new_d4_model(d4, mol)
+   call test_numsigma(error, mol, d4, param)
 
 end subroutine test_scand4_anthracene
 
+subroutine test_scand4s_anthracene(error)
+
+   !> Error handling
+   type(error_type), allocatable, intent(out) :: error
+
+   type(structure_type) :: mol
+   type(d4s_model) :: d4s
+   type(rational_damping_param) :: param = rational_damping_param(&
+      & s6 = 1.0_wp, s9 = 0.0_wp, alp = 16.0_wp, &
+      & s8 = 1.46126056_wp, a1 = 0.62930855_wp, a2 = 6.31284039_wp )
+
+   call get_structure(mol, "X23", "anthracene")
+   call new_d4s_model(d4s, mol)
+   call test_numsigma(error, mol, d4s, param)
+
+end subroutine test_scand4s_anthracene
 
 end module test_periodic
