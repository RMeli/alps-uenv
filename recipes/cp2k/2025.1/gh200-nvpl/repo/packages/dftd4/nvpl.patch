diff --git a/CMakeLists.txt b/CMakeLists.txt
index dd87742..bc6c815 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,7 +14,7 @@
 # You should have received a copy of the Lesser GNU General Public License
 # along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
 
-cmake_minimum_required(VERSION 3.14)
+cmake_minimum_required(VERSION 3.18)
 
 project(
   "dftd4"
@@ -33,14 +33,8 @@ if(NOT TARGET "OpenMP::OpenMP_Fortran" AND WITH_OpenMP)
   find_package("OpenMP" REQUIRED)
 endif()
 
-if(WITH_ILP64 AND BLAS_LIBRARIES)
-  message(STATUS "Using LAPACK/BLAS ILP64 interface")
-elseif(WITH_ILP64)
-  message(FATAL_ERROR "ILP64 support needs BLAS_LIBRARIES")
-endif()
-
-if(NOT TARGET "BLAS::BLAS")
-  find_package("custom-blas" REQUIRED)
+if(NOT TARGET "dftd4::BLAS")
+  find_package("dftd4-blas" REQUIRED)
 endif()
 
 # Collect subprojects
diff --git a/config/CMakeLists.txt b/config/CMakeLists.txt
index af2c8c1..85ea080 100644
--- a/config/CMakeLists.txt
+++ b/config/CMakeLists.txt
@@ -20,6 +20,9 @@ option(WITH_API "Enable support for C API via iso_c_binding module" TRUE)
 option(WITH_OpenMP "Enable support for shared memory parallelisation with OpenMP" TRUE)
 option(WITH_ILP64 "Enable support for ILP64 BLAS/LAPACK calls" FALSE)
 option(WITH_API_V2 "Enable the compatibility layer for the dftd4 2.5.x API" FALSE)
+
+set(DFTD4_BLAS "${BLA_VENDOR}" CACHE STRING "BLAS vendor")
+
 if(NOT DEFINED "${PROJECT_NAME}-dependeny-method")
   set(
     "${PROJECT_NAME}-dependency-method"
@@ -47,8 +50,7 @@ if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
     FORCE
   )
   message(
-    STATUS
-    "Setting build type to '${CMAKE_BUILD_TYPE}' as none was specified."
+    STATUS    "Setting build type to '${CMAKE_BUILD_TYPE}' as none was specified."
   )
 endif()
 
diff --git a/config/cmake/Findcustom-blas.cmake b/config/cmake/Findcustom-blas.cmake
deleted file mode 100644
index f09e1bf..0000000
--- a/config/cmake/Findcustom-blas.cmake
+++ /dev/null
@@ -1,28 +0,0 @@
-# This file is part of dftd4.
-# SPDX-Identifier: LGPL-3.0-or-later
-#
-# dftd4 is free software: you can redistribute it and/or modify it under
-# the terms of the GNU Lesser General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# dftd4 is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU Lesser General Public License for more details.
-#
-# You should have received a copy of the GNU Lesser General Public License
-# along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
-
-if(NOT BLAS_FOUND)
-  if("${BLA_VENDOR}" MATCHES "^Intel" OR DEFINED ENV{MKLROOT})
-    # C must be enabled to use MKL
-    # https://cmake.org/cmake/help/v3.14/module/FindBLAS.html#result-variables
-    enable_language("C")
-  endif()
-  find_package("BLAS" REQUIRED)
-  if(NOT TARGET "BLAS::BLAS")
-    add_library("BLAS::BLAS" INTERFACE IMPORTED)
-    target_link_libraries("BLAS::BLAS" INTERFACE "${BLAS_LIBRARIES}")
-  endif()
-endif()
diff --git a/config/cmake/Finddftd4-blas.cmake b/config/cmake/Finddftd4-blas.cmake
new file mode 100644
index 0000000..45c6a4d
--- /dev/null
+++ b/config/cmake/Finddftd4-blas.cmake
@@ -0,0 +1,56 @@
+# This file is part of dftd4.
+# SPDX-Identifier: LGPL-3.0-or-later
+#
+# dftd4 is free software: you can redistribute it and/or modify it under
+# the terms of the GNU Lesser General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# dftd4 is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public License
+# along with dftd4.  If not, see <https://www.gnu.org/licenses/>.
+
+if ((DFTD4_BLAS MATCHES ^Intel) OR (DEFINED ENV{MKLROOT}))
+  enable_language("C")
+endif()
+
+if(WITH_ILP64)
+  message(STATUS "Using LAPACK/BLAS ILP64 interface")
+  set(BLA_SIZEOF_INTEGER 8)
+  set(_nvpl_int "_ilp64")
+else()
+  set(BLA_SIZEOF_INTEGER 4)
+  set(_nvpl_int "_lp64")
+endif()
+
+if(NOT DFTD4_BLAS_FOUND)
+  if(DFTD4_BLAS STREQUAL "NVPL")
+    find_package("nvpl_blas" REQUIRED)
+    set(DFTD4_BLAS_FOUND TRUE)
+
+    if((BLA_THREAD STREQUAL "OMP") OR (BLA_THREAD STREQUAL "ANY"))
+      set(_nvpl_thread "_omp")
+    else()
+      set(_nvpl_thread "_seq")
+    endif()
+
+    add_library("dftd4::BLAS" INTERFACE IMPORTED GLOBAL)
+    target_link_libraries("dftd4::BLAS" INTERFACE "nvpl::blas${_nvpl_int}${_nvpl_thread}")
+  else()
+    set(BLA_VENDOR "${DFTD4_BLAS}")
+    find_package("BLAS" REQUIRED)
+    set(DFTD4_BLAS_FOUND ${BLAS_FOUND})
+  
+    if(NOT TARGET "dftd4::BLAS")
+      add_library("dftd4::BLAS" INTERFACE IMPORTED GLOBAL)
+      target_link_libraries("dftd4::BLAS" INTERFACE "BLAS::BLAS")
+    endif()
+  endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(dftd4-blas DEFAULT_MSG DFTD4_BLAS_FOUND)
diff --git a/config/meson.build b/config/meson.build
index 1ba25ee..d4ea3cd 100644
--- a/config/meson.build
+++ b/config/meson.build
@@ -88,19 +88,19 @@ if lapack_vendor == 'mkl'
   lib_deps += mkl_dep
 
 elif lapack_vendor == 'mkl-rt'
-  mkl_dep = fc.find_library('mkl_rt')
+  mkl_dep = cc.find_library('mkl_rt')
   lib_deps += mkl_dep
 
 elif lapack_vendor == 'openblas'
   openblas_dep = dependency( ilp64 ? 'openblas64' : 'openblas', required: false)
   if not openblas_dep.found()
-    openblas_dep = fc.find_library( ilp64 ? 'openblas64' : 'openblas')
+    openblas_dep = cc.find_library( ilp64 ? 'openblas64' : 'openblas')
   endif
   lib_deps += openblas_dep
   if not fc.links('external dsytrs; call dsytrs(); end', dependencies: openblas_dep)
     lapack_dep = dependency(ilp64 ? 'lapack64' : 'lapack', required: false)
     if not lapack_dep.found()
-      lapack_dep = fc.find_library(ilp64 ? 'lapack64' : 'lapack')
+      lapack_dep = cc.find_library(ilp64 ? 'lapack64' : 'lapack')
     endif
     lib_deps += lapack_dep
   endif
@@ -111,17 +111,17 @@ elif lapack_vendor == 'custom'
   if libs[0].startswith('-L')
     foreach lib: libs
       if lib != libs[0]
-        custom_deps += fc.find_library(lib, dirs: libs[0].substring(2))
+        custom_deps += cc.find_library(lib, dirs: libs[0].substring(2))
       endif
     endforeach
   else
     foreach lib: libs
-      custom_deps += fc.find_library(lib)
+      custom_deps += cc.find_library(lib)
     endforeach
   endif
-  if (not fc.links('external dsytrs; call dsytrs(); end', dependencies: [custom_deps,omp_dep]))
+  if (not fc.links('external dsytrs; call dsytrs(); end', dependencies: (get_option('openmp') ? [custom_deps, omp_dep] : [custom_deps])))
     error('Custom LAPACK libraries do not link')
-  elif (not fc.links('external dsytrs; call dgemm(); end', dependencies: [custom_deps,omp_dep]))
+  elif (not fc.links('external dsytrs; call dgemm(); end', dependencies: (get_option('openmp') ? [custom_deps, omp_dep] : [custom_deps])))
     error('Custom BLAS libraries do not link')
   endif
   lib_deps += custom_deps
@@ -129,12 +129,12 @@ elif lapack_vendor == 'custom'
 else
   lapack_dep = dependency(ilp64 ? 'lapack64' : 'lapack', required: false)
   if not lapack_dep.found()
-    lapack_dep = fc.find_library(ilp64 ? 'lapack64' : 'lapack')
+    lapack_dep = cc.find_library(ilp64 ? 'lapack64' : 'lapack')
   endif
   lib_deps += lapack_dep
-  blas_dep = fc.find_library(ilp64 ? 'blas64' : 'blas', required: false)
+  blas_dep = cc.find_library(ilp64 ? 'blas64' : 'blas', required: false)
   if not blas_dep.found()
-    blas_dep = fc.find_library(ilp64 ? 'blas64' : 'blas')
+    blas_dep = cc.find_library(ilp64 ? 'blas64' : 'blas')
   endif
   lib_deps += blas_dep
 endif
@@ -151,6 +151,7 @@ lib_deps += mctc_dep
 # Create the electrostatic library as subproject
 multicharge_dep = dependency(
   'multicharge',
+  version: '>=0.3.0',
   fallback: ['multicharge', 'multicharge_dep'],
   default_options: ['default_library=static'],
 )
diff --git a/config/template.cmake b/config/template.cmake
index 8b5141d..cb70378 100644
--- a/config/template.cmake
+++ b/config/template.cmake
@@ -19,8 +19,9 @@ if(NOT TARGET "@PROJECT_NAME@::@PROJECT_NAME@")
     find_dependency("OpenMP")
   endif()
 
-  if(NOT TARGET "BLAS::BLAS")
-    find_dependency("BLAS")
+  set(DFTD4_BLAS "@DFTD4_BLAS@")
+  if(NOT TARGET "dftd4::BLAS")
+    find_dependency("dftd4-blas")
   endif()
 
   if(NOT TARGET "mctc-lib::mctc-lib")
