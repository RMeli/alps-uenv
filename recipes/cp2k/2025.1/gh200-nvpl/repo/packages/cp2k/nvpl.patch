diff --git a/CMakeLists.txt b/CMakeLists.txt
index 77dba2e757..65a37548cc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,7 +5,7 @@
 #!   SPDX-License-Identifier: GPL-2.0-or-later                                                     !
 #!-------------------------------------------------------------------------------------------------!
 
-cmake_minimum_required(VERSION 3.22)
+cmake_minimum_required(VERSION 3.24)
 
 # include our cmake snippets
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
@@ -50,7 +50,8 @@ endif()
 # set language and standard
 set(CMAKE_CXX_STANDARD 14)
 set(CMAKE_C_STANDARD 11)
-
+set(CMAKE_HIP_STANDARD 14)
+set(CMAKE_CUDA_STANDARD 14)
 # remove NDEBUG flag
 string(REPLACE "-DNDEBUG" "" CMAKE_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE})
 string(REPLACE "-DNDEBUG" "" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
@@ -96,40 +97,63 @@ option(CMAKE_POSITION_INDEPENDENT_CODE "Enable position independent code" ON)
 option(CP2K_ENABLE_CONSISTENCY_CHECKS
        "Check that the list of compiled files and files contained in src match"
        OFF)
-option(CP2K_DEBUG_MODE "Enable several additional options for debugging cp2k."
-       OFF)
 option(CP2K_USE_DFTD4 "Enable dispersion coorections DFTD4" OFF)
+option(CP2K_USE_DEEPMD "Enable DeePMD" OFF)
 option(CP2K_USE_SIRIUS "Enable plane wave dft calculations with sirius" OFF)
 option(CP2K_USE_FFTW3 "Use fftw3 for the calculating fast fourier transforms"
        ON)
 option(CP2K_USE_MPI "Enable MPI support" ON)
 option(CP2K_USE_ELPA "Enable elpa support" OFF)
-option(CP2K_USE_PEXSI "Enable pexsi support" OFF)
-option(CP2K_USE_SUPERLU "Enable superlu support" OFF)
 option(CP2K_USE_COSMA "COSMA is a drop in replacement of scalapack dgemm" OFF)
 option(CP2K_USE_LIBINT2 "Enable libint2 support" OFF)
 option(CP2K_USE_PLUMED "Enable plumed2 support" OFF)
 option(CP2K_USE_VORI "Enable libvori support" OFF)
-option(CP2K_USE_PEXSI "Enable pexsi support" OFF)
-option(CP2K_USE_QUIP "Enable quip support" OFF)
 option(CP2K_USE_SPGLIB "Enable spglib support" OFF)
 option(CP2K_USE_LIBXC "Enable libxc support" OFF)
 option(CP2K_USE_LIBTORCH "Enable libtorch support" OFF)
 option(CP2K_USE_STATIC_BLAS "Link against static version of BLAS/LAPACK" OFF)
 option(CP2K_USE_SPLA
        "Use SPLA offloading gemm feature to the GPU if it is beneficial. " OFF)
-option(CP2K_USE_METIS "enable metis library support" OFF)
 option(
   CP2K_USE_DLAF
   "Use DLA-Future for Cholesky decompositions and the solution of eigenvalue problems"
   OFF)
-option(CP2K_USE_LIBXSMM "Use libxsmm for small gemms" OFF)
-# option(CP2K_USE_LIBGRPP "Use libgrpp" OFF)
+option(CP2K_USE_GRPP "Enable libgrpp support" OFF)
+option(CP2K_USE_TREXIO "Enable trexio support" OFF)
+option(CP2K_USE_HDF5 "Enable HDF5 support" OFF)
+option(CP2K_USE_LIBSMEAGOL "Enable libsmeagol support" OFF)
 option(BUILD_SHARED_LIBS "Build cp2k shared library" ON)
 option(
   CP2K_USE_FFTW3_WITH_MKL
-  "MKL has its own compatible implementation of the fftw. This option when ON will use the original implementation of the fftw library"
+  "MKL has its own compatible implementation of the fftw library. This option, when ON, will use the separate and original fftw library."
   OFF)
+
+cmake_dependent_option(CP2K_USE_LIBXSMM "Use libxsmm for small gemms" OFF
+                       "NOT CP2K_USE_ACCEL MATCHES \"OPENCL\"" ON)
+
+cmake_dependent_option(CP2K_USE_LIBVDWXC "Enable libvdwxc support WITH SIRIUS"
+                       ON "CP2K_USE_SIRIUS" OFF)
+
+cmake_dependent_option(
+  CP2K_DBCSR_USE_CPU_ONLY "Disable the DBCSR accelerated backend" OFF
+  "NOT CP2K_USE_ACCEL MATCHES \"OPENCL\"" OFF)
+
+cmake_dependent_option(
+  CP2K_ENABLE_DBM_GPU "Disable the dbm accelerated backend (mostly GPU)." ON
+  "CP2K_USE_ACCEL" OFF)
+
+cmake_dependent_option(
+  CP2K_ENABLE_GRID_GPU "Disable acceleration for grid related functions." ON
+  "CP2K_USE_ACCEL MATCHES \"HIP|CUDA\"" OFF)
+
+cmake_dependent_option(
+  CP2K_ENABLE_PW_GPU "Disable the ffts accelerated backend (mostly GPU)." OFF
+  "CP2K_USE_ACCEL MATCHES \"HIP|CUDA\"" OFF)
+
+cmake_dependent_option(
+  CP2K_USE_UNIFIED_MEMORY "Use CPU/GPU unified memory (Mi250x onwards)" OFF
+  "CP2K_USE_ACCEL MATCHES \"HIP\"" OFF)
+
 cmake_dependent_option(CP2K_ENABLE_ELPA_OPENMP_SUPPORT
                        "Enable elpa openmp support" ON "CP2K_USE_ELPA" OFF)
 cmake_dependent_option(CP2K_ENABLE_FFTW3_OPENMP_SUPPORT
@@ -144,19 +168,28 @@ cmake_dependent_option(
   "Use Nvidia gpu accelerated eigensolver. Only active when CUDA is ON" OFF
   "CP2K_USE_ACCEL MATCHES \"CUDA\"" OFF)
 
+cmake_dependent_option(CP2K_USE_NVHPC OFF "Enable Nvidia NVHPC kit"
+                       "(NOT CP2K_USE_ACCEL MATCHES \"CUDA\")" OFF)
+
+cmake_dependent_option(
+  CP2K_USE_SPLA_GEMM_OFFLOADING ON
+  "Enable SPLA dgemm offloading (only valid with gpu support on)"
+  "(NOT CP2K_USE_ACCEL MATCHES \"NONE\") AND (CP2K_USE_SPLA)" OFF)
+
 set(CP2K_BLAS_VENDOR
     "auto"
     CACHE STRING "Blas library for computations on host")
 
-set(CP2K_SCALAPACK_VENDOR_LIST "MKL" "SCI" "GENERIC")
+set(CP2K_SCALAPACK_VENDOR_LIST "MKL" "SCI" "NVPL" "GENERIC" "auto")
 set(CP2K_SCALAPACK_VENDOR
-    "GENERIC"
+    "auto"
     CACHE STRING "scalapack vendor/generic backend")
 set_property(CACHE CP2K_SCALAPACK_VENDOR PROPERTY STRINGS
                                                   ${CP2K_SCALAPACK_VENDOR_LIST})
 
 if(NOT ${CP2K_SCALAPACK_VENDOR} IN_LIST CP2K_SCALAPACK_VENDOR_LIST)
-  message(FATAL_ERROR "Invalid scalapack vendor backend")
+  message(FATAL_ERROR "Invalid ScaLAPACK vendor backend '${CP2K_SCALAPACK_VENDOR}'"
+                      "Valid options are: ${CP2K_SCALAPACK_VENDOR_LIST}")
 endif()
 
 set(CP2K_BUILD_OPTIONS_LIST "CUSTOM" "DEFAULT" "MINIMAL" "FULL" "SERIAL")
@@ -199,18 +232,15 @@ if(${cp2k_build_options_up} STREQUAL "FULL")
   set(CP2K_USE_ELPA ON)
   set(CP2K_USE_SPGLIB ON)
   set(CP2K_USE_LIBTORCH ON)
-  set(CP2K_USE_METIS ON)
-  set(CP2K_USE_QUIP ON)
-  set(CP2K_USE_PEXSI ON)
-  set(CP2K_USE_SUPERLU ON)
-  # set(CP@K_USE_LIBGRPP ON)
+  set(CP2K_USE_HDF5 ON)
+  set(CP2K_USE_LIBGRPP ON)
+  set(CP2K_USE_TREXIO ON)
 endif()
 
 if(${cp2k_build_options_up} STREQUAL "SERIAL")
   set(CP2K_USE_FFTW3 ON)
   set(CP2K_USE_MPI OFF)
   set(CP2K_USE_SIRIUS ON)
-  set(CP2K_USE_SIRIUS ON)
   set(CP2K_USE_LIBXSMM ON)
   set(CP2K_USE_VORI ON)
   set(CP2K_USE_COSMA ON)
@@ -220,10 +250,6 @@ if(${cp2k_build_options_up} STREQUAL "SERIAL")
   set(CP2K_USE_ELPA ON)
   set(CP2K_USE_SPGLIB ON)
   set(CP2K_USE_LIBTORCH ON)
-  set(CP2K_USE_METIS ON)
-  set(CP2K_USE_QUIP ON)
-  set(CP2K_USE_PEXSI ON)
-  set(CP2K_USE_SUPERLU ON)
 endif()
 
 if(${cp2k_build_options_up} STREQUAL "DEFAULT")
@@ -238,10 +264,10 @@ if(${cp2k_build_options_up} STREQUAL "DEFAULT")
 endif()
 
 # ##############################################################################
-# # gpu related options                                                    # #
+# gpu related options
 # ##############################################################################
 
-set(CP2K_SUPPORTED_ACCELERATION_TARGETS CUDA HIP NONE)
+set(CP2K_SUPPORTED_ACCELERATION_TARGETS CUDA HIP OPENCL NONE)
 set(CP2K_SUPPORTED_CUDA_ARCHITECTURES
     K20X
     K40
@@ -277,62 +303,17 @@ set_property(
 
 set(CP2K_USE_ACCEL
     "NONE"
-    CACHE STRING "Set hardware acceleration support: CUDA, HIP")
+    CACHE STRING "Set hardware acceleration support: CUDA, HIP, OPENCL")
 
 set_property(CACHE CP2K_USE_ACCEL
              PROPERTY STRINGS ${CP2K_SUPPORTED_ACCELERATION_TARGETS})
 
-cmake_dependent_option(CP2K_USE_NVHPC OFF "Enable Nvidia NVHPC kit"
-                       "(NOT CP2K_USE_ACCEL MATCHES \"CUDA\")" OFF)
-
-cmake_dependent_option(
-  CP2K_USE_SPLA_GEMM_OFFLOADING ON
-  "Enable SPLA dgemm offloading (only valid with gpu support on)"
-  "(NOT CP2K_USE_ACCEL MATCHES \"NONE\") AND (CP2K_USE_SPLA)" OFF)
-
-# ##############################################################################
-#
-# GPU debug options
-#
-# ##############################################################################
-
-cmake_dependent_option(
-  CP2K_DISABLE_GRID_GPU
-  OFF
-  "disable the hardware accelerated backend for grid related functions. It is only effective when general gpu support is enabled."
-  "CP2K_DEBUG_MODE"
-  OFF)
-
-cmake_dependent_option(
-  CP2K_DISABLE_PW_GPU
-  OFF
-  "disable the ffts accelerated (mostly GPU) backend. It is only effective when general gpu support is enabled."
-  "CP2K_DEBUG_MODE"
-  OFF)
-cmake_dependent_option(
-  CP2K_DISABLE_DBM_GPU
-  OFF
-  "disable the dbm accelerated (mostly GPU) backend. It is only effective when general gpu support is enabled."
-  "CP2K_DEBUG_MODE"
-  OFF)
-cmake_dependent_option(
-  CP2K_DBCSR_CPU_ONLY "Use DBCSR compiled without GPU support." OFF
-  "(NOT CP2K_USE_ACCEL MATCHES \"NONE\") AND (CP2K_DEBUG_MODE)" OFF)
-
-cmake_dependent_option(
-  CP2K_USE_UNIFIED_MEMORY "Use CPU/GPU unified memory.
-  requires Mi250x or future AMD architectures to be fully functional" OFF
-  "CP2K_USE_ACCEL MATCHES \"HIP\"" OFF)
-
-cmake_dependent_option(DBCSR_USE_OPENMP "Enable openmp support in DBCSR" ON
-                       "CP2K_BUILD_DBCSR" OFF)
 # ##############################################################################
 # specific variables for the regtests. Binaries will be created with an
-# extension               #
+# extension
 # ##############################################################################
 
 set(__cp2k_ext "")
-set(__cp2k_cmake_name "")
 
 if(CP2K_USE_MPI)
   set(__cp2k_ext "psmp")
@@ -340,20 +321,6 @@ else()
   set(__cp2k_ext "ssmp")
 endif()
 
-set(__cp2k_cmake_name "local")
-
-if(CP2K_USE_ACCEL MATCHES "CUDA")
-  set(__cp2k_cmake_name "local_cuda")
-endif()
-
-if(CP2K_USE_ACCEL MATCHES "HIP")
-  set(__cp2k_cmake_name "local_hip")
-endif()
-
-if(CP2K_CMAKE_SUFFIX)
-  string(APPEND __cp2k_cmake_name "${CP2K_CMAKE_SUFFIX}")
-endif()
-
 # we can run the src consistency checks without actually searching for any
 # dependencies.
 
@@ -451,25 +418,13 @@ else()
      OR CP2K_USE_COSMA
      OR CP2K_USE_SPLA
      OR CP2K_USE_ELPA
-     OR CP2K_USE_METIS
-     OR CP2K_USE_PLUMED
-     OR CP2K_USE_PEXSI
-     OR CP2K_USE_QUIP)
+     OR CP2K_USE_PLUMED)
     message(
       WARNING
-        "SIRIUS, COSMA, SPLA, ELPA, METIS, PLUMED, PEXSI and QUIP require MPI support.\n"
+        "SIRIUS, COSMA, SPLA, and ELPA require MPI support.\n"
         "Either set -DCP2K_USE_MPI to ON or turn the following dependencies off\n\n"
         "List of dependencies with mpi support\n")
-    foreach(
-      __libs
-      sirius
-      COSMA
-      SPLA
-      ELPA
-      METIS
-      PLUMED
-      PEXSI
-      QUIP)
+    foreach(__libs sirius COSMA SPLA ELPA PLUMED)
       if(CP2K_USE_${__libs})
         message(WARNING " - ${__libs}")
       endif()
@@ -484,7 +439,7 @@ find_package(Lapack REQUIRED) # also calls find_package(BLAS)
 # SMM (Small Matrix-Matrix multiplication)
 if(CP2K_USE_LIBXSMM)
   find_package(LibXSMM REQUIRED)
-  message(STATUS "Using libxsmm for Small Matrix Multiplication")
+  message(STATUS "Using LibXSMM for Small Matrix Multiplication")
 endif()
 
 # in practice it is always for any decent configuration. But I add a flags to
@@ -513,6 +468,7 @@ endif()
 
 set(CP2K_USE_HIP OFF)
 set(CP2K_USE_CUDA OFF)
+set(CP2K_USE_OPENCL OFF)
 
 option(CP2K_USE_PW_GPU "Enable GPU in CUDA" OFF)
 if(CP2K_USE_ACCEL MATCHES "CUDA")
@@ -566,18 +522,21 @@ if(CP2K_USE_ACCEL MATCHES "CUDA")
 elseif(CP2K_USE_ACCEL MATCHES "HIP")
   enable_language(HIP)
   # Find hip
+
   find_package(hipfft REQUIRED IMPORTED CONFIG)
   find_package(hipblas REQUIRED IMPORTED CONFIG)
 
-  set(CMAKE_HIP_ARCHITECTURES gfx801 gfx900 gfx90a)
-  if(NOT CMAKE_BUILD_TYPE)
-    set(HIP_RELEASE_OPTIONS "-O3 --std=c++11")
+  if(CMAKE_HIP_PLATFORM MATCHES "nvidia")
+    find_package(CUDAToolkit)
+  endif()
+  if(NOT CMAKE_BUILD_TYPE AND (CMAKE_HIP_PLATFORM MATCHES "amd"))
+    set(CMAKE_HIP_FLAGS "-O3")
   elseif(${CMAKE_BUILD_TYPE} STREQUAL "RelWithDebInfo")
-    set(HIP_RELEASE_OPTIONS "-O2 -g --std=c++11")
+    set(CMAKE_HIP_FLAGS "-O2 -g")
   elseif(${CMAKE_BUILD_TYPE} STREQUAL "Release")
-    set(HIP_RELEASE_OPTIONS "-O3 --std=c++11")
+    set(CMAKE_HIP_FLAGS "-O3")
   elseif(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
-    set(HIP_RELEASE_OPTIONS "-O0 -g --std=c++11")
+    set(CMAKE_HIP_FLAGS "-O0 -g")
   endif()
 
   set(CMAKE_HIP_ARCHITECTURES "${CP2K_GPU_ARCH_NUMBER_${CP2K_WITH_GPU}}")
@@ -586,8 +545,8 @@ elseif(CP2K_USE_ACCEL MATCHES "HIP")
   set(CP2K_USE_PW_GPU ON)
 
   # use hardware atomic operations on Mi250X.
-  if(CMAKE_HIP_ARCGITECTURES MATCHES "gfx90a|gfx942")
-    set(HIP_RELEASE_OPTIONS "-munsafe-fp-atomics")
+  if(NOT CMAKE_HIP_PLATFORM OR (CMAKE_HIP_PLATFORM MATCHES "amd"))
+    set(CMAKE_HIP_FLAGS "${CMAKE_HIP_FLAGS} -munsafe-fp-atomics")
   endif()
 
   # add the Mi300A parameters when available
@@ -600,6 +559,10 @@ elseif(CP2K_USE_ACCEL MATCHES "HIP")
       set(CMAKE_HIP_ARCHITECTURES "gfx942:xnack+")
     endif()
   endif()
+elseif(CP2K_USE_ACCEL MATCHES "OPENCL")
+  enable_language(C)
+  find_package(OpenCL REQUIRED)
+  set(CP2K_USE_OPENCL ON)
 endif()
 
 # PACKAGE DISCOVERY (compiler configuration can impact package discovery)
@@ -613,18 +576,24 @@ if(CP2K_USE_ELPA)
 endif()
 
 if(CP2K_USE_LIBXC)
-  find_package(LibXC 7 REQUIRED)
+  find_package(Libxc 7 REQUIRED CONFIG)
 endif()
 
-# uncomment this when libgrpp cmake support is complete
-
-# if (CP2K_USE_LIBGRPP) find_package(libgrpp REQUIRED) endif()
+if(CP2K_USE_HDF5)
+  find_package(HDF5 REQUIRED COMPONENTS C Fortran)
+endif()
 
 if(CP2K_USE_COSMA)
   find_package(cosma REQUIRED)
 
-  # check that cosma::cosma_pxgemm and cosma::cosma_prefixed_pxgemm exist
-  if(NOT TARGET cosma::cosma_pxgemm OR NOT TARGET cosma::cosma_prefixed_pxgemm)
+  get_target_property(CP2K_COSMA_INCLUDE_DIRS cosma::cosma
+                      INTERFACE_INCLUDE_DIRECTORIES)
+  get_target_property(CP2K_COSMA_LINK_LIBRARIES cosma::cosma
+                      INTERFACE_LINK_LIBRARIES)
+
+  # check that cosma::cosma_pxgemm_cpp and cosma::cosma_prefixed_pxgemm exist
+  if(NOT TARGET cosma::cosma_pxgemm_cpp OR NOT TARGET
+                                           cosma::cosma_prefixed_pxgemm)
     message(
       FATAL_ERROR
         " COSMA needs to be build with scalapack offloading support. COSTA_SCALAPACK and COSMA_SCALAPACK should probably be set properly"
@@ -638,6 +607,12 @@ endif()
 
 if(CP2K_USE_DLAF)
   find_package(DLAFFortran REQUIRED)
+
+  get_target_property(CP2K_DLAF_INCLUDE_DIRS DLAF::DLAF
+                      INTERFACE_INCLUDE_DIRECTORIES)
+  get_target_property(CP2K_DLAF_LINK_LIBRARIES DLAF::dlaf.prop
+                      INTERFACE_LINK_LIBRARIES)
+  message("${CP2K_DLAF_INCLUDE_DIRS} ${CP2K_DLAF_LINK_LIBRARIES}")
 endif()
 
 # FFTW3
@@ -645,7 +620,12 @@ endif()
 # we set this variable to ON when we want fftw3 support (with or without MKL).
 set(CP2K_USE_FFTW3_ OFF)
 if(CP2K_USE_FFTW3)
-  if(NOT CP2K_BLAS_VENDOR MATCHES "MKL" OR CP2K_USE_FFTW3_WITH_MKL)
+  if(CP2K_BLAS_VENDOR MATCHES "MKL" AND NOT CP2K_USE_FFTW3_WITH_MKL)
+    message("-- Using the MKL implementation of FFTW3.")
+    set(CP2K_USE_FFTW3_MKL_ ON)
+  elseif(CP2K_BLAS_VENDOR STREQUAL "NVPL")
+    message("-- Using the NVPL implementation of FFTW3.")
+  else()
     find_package(Fftw REQUIRED)
     if(CP2K_ENABLE_FFTW3_THREADS_SUPPORT AND CP2K_ENABLE_FFTW3_OPENMP_SUPPORT)
       message(
@@ -669,19 +649,10 @@ if(CP2K_USE_FFTW3)
       )
     endif()
     set(CP2K_USE_FFTW3_ ON)
-  else()
-    message("-- Using the MKL implementation of FFTW3.")
-    set(CP2K_USE_FFTW3_MKL_ ON)
   endif()
 endif()
 
-# QUIP
-if(CP2K_USE_QUIP)
-  find_package(Quip REQUIRED)
-endif()
-
 # libint
-
 if(CP2K_USE_LIBINT2)
   find_package(Libint2 REQUIRED)
 endif()
@@ -691,6 +662,10 @@ if(CP2K_USE_SPGLIB)
   find_package(Spglib CONFIG REQUIRED)
 endif()
 
+if(CP2K_USE_LIBSMEAGOL)
+  find_package(libsmeagol REQUIRED)
+endif()
+
 if(CP2K_USE_SPLA)
   find_package(SPLA REQUIRED)
   get_target_property(SPLA_INCLUDE_DIRS SPLA::spla
@@ -710,28 +685,22 @@ endif()
 
 if(CP2K_USE_DFTD4)
   find_package(dftd4 REQUIRED)
-endif()
-
-# SIRIUS
-if(CP2K_USE_SIRIUS)
-  find_package(sirius REQUIRED)
-endif()
 
-if(CP2K_USE_SUPERLU)
-  find_package(SuperLU REQUIRED)
-endif()
-
-if(CP2K_USE_METIS)
-  find_package(Metis)
+  get_target_property(CP2K_DFTD4_LINK_LIBRARIES dftd4::dftd4
+                      INTERFACE_LINK_LIBRARIES)
+  get_target_property(CP2K_DFTD4_LIB_LINK_LIBRARIES dftd4::dftd4-lib
+                      INTERFACE_LINK_LIBRARIES)
+  get_target_property(CP2K_DFTD4_INCLUDE_DIR dftd4::dftd4-lib
+                      INTERFACE_INCLUDE_DIRECTORIES)
 endif()
 
-if(CP2K_USE_PTSCOTCH)
-  find_package(Ptscotch REQUIRED)
+if(CP2K_USE_DEEPMD)
+  find_package(DeePMD REQUIRED CONFIG)
 endif()
 
-if(CP2K_USE_PEXSI)
-  # PEXSI 1.2 uses cmake as build system
-  find_package(PEXSI REQUIRED)
+# SIRIUS
+if(CP2K_USE_SIRIUS)
+  find_package(sirius REQUIRED)
 endif()
 
 if(CP2K_USE_PLUMED)
@@ -740,6 +709,11 @@ endif()
 
 if(CP2K_USE_LIBTORCH)
   find_package(Torch REQUIRED)
+  get_target_property(CP2K_TORCH_CXX_STANDARD torch CXX_STANDARD)
+  if(${CP2K_TORCH_CXX_STANDARD} VERSION_GREATER ${CMAKE_CXX_STANDARD})
+    set(CMAKE_CXX_STANDARD ${CP2K_TORCH_CXX_STANDARD})
+    message("-- Torch setting CMAKE_CXX_STANDARD to ${CP2K_TORCH_CXX_STANDARD}")
+  endif()
 endif()
 
 if(CP2K_USE_MPI_F08 AND NOT MPI_Fortran_HAVE_F08_MODULE)
@@ -749,6 +723,10 @@ if(CP2K_USE_MPI_F08 AND NOT MPI_Fortran_HAVE_F08_MODULE)
   )
 endif()
 
+if(CP2K_USE_TREXIO)
+  find_package(TrexIO REQUIRED)
+endif()
+
 # OPTION HANDLING
 
 # make sure that the default build type is RELEASE
@@ -789,18 +767,19 @@ message(
   "--------------------------------------------------------------------\n\n")
 
 message(
-  "  - BLAS AND LAPACK\n\n"
-  "   - vendor :              ${CP2K_BLAS_VENDOR}\n"
-  "   - include directories : ${CP2K_BLAS_INCLUDE_DIR} ${LAPACK_INCLUDE_DIR}\n"
-  "   - libraries :           ${CP2K_BLAS_LINK_LIBRARIES} ${CP2K_LAPACK_LINK_LIBRARIES}\n\n"
+  "  - BLAS AND LAPACK\n"
+  "    - vendor: ${CP2K_BLAS_VENDOR}\n"
+  "    - include directories: ${CP2K_BLAS_INCLUDE_DIR} ${LAPACK_INCLUDE_DIR}\n"
+  "    - libraries: ${CP2K_BLAS_LINK_LIBRARIES} ${CP2K_LAPACK_LINK_LIBRARIES}\n\n"
 )
 
 if(CP2K_USE_MPI)
-  message("  - MPI\n" "   - include directories :  ${MPI_INCLUDE_DIRS}\n"
-          "   - libraries :           ${MPI_LIBRARIES}\n\n")
+  message("  - MPI\n" # let below line separate
+          "    - include directories:  ${MPI_INCLUDE_DIRS}\n"
+          "    - libraries: ${MPI_LIBRARIES}\n\n")
 
   if(CP2K_USE_MPI_F08)
-    message("   - MPI_08 :              ON\n")
+    message("   - MPI_08:              ON\n")
   endif()
 
   if(MPI_Fortran_HAVE_F08_MODULE AND NOT CP2K_USE_MPI_F08)
@@ -810,7 +789,7 @@ if(CP2K_USE_MPI)
   endif()
 
   message("  - SCALAPACK:\n"
-          "    - libraries : ${CP2K_SCALAPACK_LINK_LIBRARIES}\n\n")
+          "    - libraries: ${CP2K_SCALAPACK_LINK_LIBRARIES}\n\n")
 endif()
 
 if((CP2K_USE_ACCEL MATCHES "CUDA") OR (CP2K_USE_ACCEL MATCHES "HIP"))
@@ -818,20 +797,25 @@ if((CP2K_USE_ACCEL MATCHES "CUDA") OR (CP2K_USE_ACCEL MATCHES "HIP"))
   message("  - Hardware Acceleration:\n")
   if(CP2K_USE_ACCEL MATCHES "CUDA")
     message(
-      "   - CUDA:\n" "     - GPU target architecture : ${CP2K_WITH_GPU}\n"
-      "     - GPU architecture number : ${CP2K_ACC_ARCH_NUMBER}\n"
-      "     - GPU profiling enabled :   ${CP2K_WITH_CUDA_PROFILING}\n\n")
+      "   - CUDA:\n" # let below line separate
+      "     - GPU target architecture: ${CP2K_WITH_GPU}\n"
+      "     - GPU architecture number: ${CP2K_ACC_ARCH_NUMBER}\n"
+      "     - GPU profiling enabled: ${CP2K_WITH_CUDA_PROFILING}\n\n")
   endif()
 
   if(CP2K_USE_ACCEL MATCHES "HIP")
-    message("   - HIP:\n" "    - GPU target architecture : ${CP2K_WITH_GPU}\n"
-            "    - GPU architecture number : ${CP2K_ACC_ARCH_NUMBER}\n\n")
+    message(
+      "   - HIP:\n" # let below line separate
+      "     - GPU target architecture: ${CP2K_WITH_GPU}\n"
+      "     - GPU architecture number: ${CP2K_ACC_ARCH_NUMBER}\n"
+      "     - FLAGS: ${CMAKE_HIP_FLAGS}")
   endif()
 
   message(
-    "Note : Enabling hardware acceleration enable acceleration of the grid, pw, and dbm modules by default\n"
-    "    - PW   module : ${CP2K_USE_PW_GPU}\n"
-    "\n")
+    "      - GPU accelerated modules\n"
+    "        - PW     module: ${CP2K_ENABLE_PW_GPU}\n"
+    "        - GRID   module: ${CP2K_ENABLE_GRID_GPU}\n"
+    "        - DBM    module: ${CP2K_ENABLE_DBM_GPU}\n\n")
 endif()
 
 if(CP2K_USE_CUSOLVER_MP)
@@ -848,102 +832,111 @@ endif()
 
 if(CP2K_USE_LIBXC)
   message(
-    "  - LIBXC (note to package managers : libxc can be build with cmake as well)"
-    "   - include directories : ${CP2K_LIBXC_INCLUDE_DIRS}\n"
-    "   - libraries : ${CP2K_LIBXC_LINK_LIBRARIES}\n\n")
+    "  - LibXC\n" # let below line separate
+    "    - version:  ${Libxc_VERSION}\n"
+    "    - include directories: ${Libxc_INCLUDE_DIRS}\n"
+    "    - libraries: ${Libxc_LIBRARIES}\n\n")
 endif()
 
 if(CP2K_USE_LIBTORCH)
-  message("  - LIBTORCH\n" "    - libraries : ${CP2K_LIBTORCH_LIBRARIES}\n\n")
+  message("  - LIBTORCH\n" # let below line separate
+          "    - libraries: ${CP2K_LIBTORCH_LIBRARIES}\n\n")
+endif()
+
+if(CP2K_USE_HDF5)
+  message(
+    "  - HDF5\n" # let below line separate
+    "    - version: ${HDF5_VERSION}\n"
+    "    - include directories: ${HDF5_INCLUDE_DIRS}\n"
+    "    - libraries: ${HDF5_LIBRARIES}\n\n")
 endif()
 
 if(CP2K_USE_FFTW3)
   message("  - FFTW3\n"
-          "    - include directories : ${CP2K_FFTW3_INCLUDE_DIRS}\n"
-          "    - libraries : ${CP2K_FFTW3_LINK_LIBRARIES}\n\n")
+          "    - include directories: ${CP2K_FFTW3_INCLUDE_DIRS}\n"
+          "    - libraries: ${CP2K_FFTW3_LINK_LIBRARIES}\n\n")
 endif()
 
 if(CP2K_USE_PLUMED)
   message("  - PLUMED\n"
-          "    - include directories : ${CP2K_PLUMED_INCLUDE_DIRS}\n"
-          "    - libraries : ${CP2K_PLUMED_LINK_LIBRARIES}\n\n")
+          "    - include directories: ${CP2K_PLUMED_INCLUDE_DIRS}\n"
+          "    - libraries: ${CP2K_PLUMED_LINK_LIBRARIES}\n\n")
 endif()
 
 if(CP2K_USE_LIBXSMM)
   message(
-    "  - libxsmm\n"
-    "    - include directories : ${CP2K_LIBXSMM_INCLUDE_DIRS}\n"
-    "    - libraries :           ${CP2K_LIBXSMMEXT_LINK_LIBRARIES};${CP2K_LIBXSMMF_LINK_LIBRARIES}\n\n"
+    "  - LIBXSMM\n"
+    "    - include directories: ${CP2K_LIBXSMM_INCLUDE_DIRS}\n"
+    "    - libraries: ${CP2K_LIBXSMMEXT_LINK_LIBRARIES};${CP2K_LIBXSMMF_LINK_LIBRARIES}\n\n"
   )
 endif()
 
 if(CP2K_USE_SPLA)
-  message(" - SPLA\n" "   - include directories : ${SPLA_INCLUDE_DIRS}\n"
-          "   - lbraries : ${SPLA_LIBRARIES}\n\n")
+  message(" - SPLA\n" # let below line separate
+          "   - include directories: ${SPLA_INCLUDE_DIRS}\n"
+          "   - libraries: ${SPLA_LIBRARIES}\n\n")
 endif()
 
 if(CP2K_USE_DFTD4)
   message(
-    " - DFTD4 :\n" "   - include modules     :  ${DFTD4_DFTD4};${DFTD4_MCTC}\n"
-    "   - include directories :  ${DFTD4_INCLUDE_DIR}\n"
-    "   - libraries           :  ${DFTD4_LIBDIR}\n\n")
+    " - DFTD4\n"
+    "   - include directories: ${CP2K_DFTD4_INCLUDE_DIR}\n"
+    "   - libraries: ${CP2K_DFTD4_LINK_LIBRARIES};${CP2K_DFTD4_LIB_LINK_LIBRARIES}\n\n"
+  )
 endif()
 
-if(CP2K_USE_SIRIUS)
-  message(
-    " - SIRIUS :\n"
-    "   - include directories :  ${SIRIUS_INCLUDE_DIRS}\n"
-    "   - libraries           :  ${SIRIUS_LIBRARIES}\n"
-    "   - dependencies :\n"
-    "       - spla\n"
-    "       - SpFFT\n"
-    "       - SPGLIB\n"
-    "       - LibXC\n"
-    "       - fftw3\n"
-    "       - hdf5\n"
-    "       - GSL\n\n")
-
-  if(CP2K_USE_VDWXC)
-    message("     - VDWXC\n")
-  endif()
+if(CP2K_USE_DEEPMD)
+  message(" - DeePMD\n\n")
 endif()
 
-if(CP2K_USE_COSMA)
-  message(" - COSMA\n" "   - include directories : ${COSMA_INCLUDE_DIRS}\n"
-          "   - libraries           : ${COSMA_LIBRARIES}\n\n")
+if(CP2K_USE_LIBSMEAGOL)
+  message(" - LIBSMEAGOL\n"
+          "   - include directories: ${CP2K_LIBSMEAGOL_INCLUDE_DIRS}\n"
+          "   - libraries: ${CP2K_LIBSMEAGOL_LINK_LIBRARIES}\n\n")
 endif()
 
-if(CP2K_USE_QUIP)
-  message(" - QUIP\n"
-          "   - include directories : ${CP2K_LIBQUIP_INCLUDE_DIRS}\n"
-          "   - libraries :           ${CP2K_LIBQUIP_LINK_LIBRARIES}\n\n")
+if(CP2K_USE_SIRIUS)
+  message(" - SIRIUS")
 endif()
 
-if(CP2K_USE_PEXSI)
-  message(" - PEXSI\n\n")
+if(CP2K_USE_COSMA)
+  message(" - COSMA\n" # let below line separate
+          "   - include directories: ${CP2K_COSMA_INCLUDE_DIRS}\n"
+          "   - libraries: ${CP2K_COSMA_LINK_LIBRARIES}\n\n")
 endif()
 
 if(CP2K_USE_LIBINT2)
   message(" - libint2\n"
-          "   - include directories : ${CP2K_LIBINT2_INCLUDE_DIRS}\n"
-          "   - libraries :           ${CP2K_LIBINT2_LINK_LIBRARIES}\n\n")
+          "   - include directories: ${CP2K_LIBINT2_INCLUDE_DIRS}\n"
+          "   - libraries: ${CP2K_LIBINT2_LINK_LIBRARIES}\n\n")
 endif()
 
 if(CP2K_USE_VORI)
   message(" - libvori\n"
-          "   - include directories : ${CP2K_LIBVORI_INCLUDE_DIRS}\n"
-          "   - libraries :           ${CP2K_LIBVORI_LINK_LIBRARIES}\n\n")
+          "   - include directories: ${CP2K_LIBVORI_INCLUDE_DIRS}\n"
+          "   - libraries: ${CP2K_LIBVORI_LINK_LIBRARIES}\n\n")
 endif()
 
 if(CP2K_USE_ELPA)
-  message(" - ELPA\n" "   - include directories : ${CP2K_ELPA_INCLUDE_DIRS}\n"
-          "   - libraries           :  ${CP2K_ELPA_LINK_LIBRARIES}\n\n")
+  message(" - ELPA\n" # let below line separate
+          "   - include directories: ${CP2K_ELPA_INCLUDE_DIRS}\n"
+          "   - libraries: ${CP2K_ELPA_LINK_LIBRARIES}\n\n")
+endif()
+
+if(CP2K_USE_DLAF)
+  message(" - DLA-Future\n"
+          "   - include directories: ${CP2K_DLAF_INCLUDE_DIRS}\n"
+          "   - libraries: ${CP2K_DLAF_LINK_LIBRARIES}\n\n")
 endif()
 
-if(CP2K_USE_SUPERLU)
-  message(" - superlu\n"
-          "   - include directories : ${CP2K_SUPERLU_INCLUDE_DIRS}\n"
-          "   - libraries           : ${CP2K_SUPERLU_LINK_LIBRARIES}\n\n")
+if(CP2K_USE_GRPP)
+  message(" - grpp\n")
+endif()
+
+if(CP2K_USE_TREXIO)
+  message(" - trexio\n"
+          "   - include directories: ${CP2K_TREXIO_INCLUDE_DIRS}\n"
+          "   - libraries: ${CP2K_TREXIO_LINK_LIBRARIES}\n\n")
 endif()
 
 message(
@@ -961,6 +954,10 @@ if(NOT CP2K_USE_DFTD4)
   message("   - DFTD4")
 endif()
 
+if(NOT CP2K_USE_DEEPMD)
+  message("   - DeePMD")
+endif()
+
 if(NOT CP2K_USE_SIRIUS)
   message("   - SIRIUS")
 endif()
@@ -969,6 +966,10 @@ if(NOT CP2K_USE_SPGLIB)
   message("   - SPGLIB")
 endif()
 
+if(NOT CP2K_USE_LIBSMEAGOL)
+  message("   - libSMEAGOL")
+endif()
+
 if(NOT CP2K_USE_COSMA)
   message("   - COSMA")
 endif()
@@ -977,6 +978,10 @@ if(NOT CP2K_USE_SPLA)
   message("   - SPLA")
 endif()
 
+if(NOT CP2K_USE_HDF5)
+  message("   - HDF5\n")
+endif()
+
 if(${CP2K_USE_ACCEL} MATCHES "NONE")
   message("   - GPU acceleration is disabled")
 endif()
@@ -986,17 +991,13 @@ if(NOT CP2K_USE_ELPA)
 endif()
 
 if(NOT CP2K_USE_DLAF)
-  message("   - DLAF")
+  message("   - DLA-Future")
 endif()
 
 if(NOT CP2K_USE_PLUMED)
   message("   - PLUMED")
 endif()
 
-if(NOT CP2K_USE_QUIP)
-  message("   - QUIP")
-endif()
-
 if(NOT CP2K_USE_LIBXSMM)
   message("   - LIBXSMM")
 endif()
@@ -1017,21 +1018,24 @@ if(NOT CP2K_USE_FFTW3)
   message("   - FFTW3")
 endif()
 
-if(NOT CP2K_USE_PEXSI)
-  message("   - PEXSI")
+if(NOT CP2K_USE_LIBTORCH)
+  message("   - libtorch")
 endif()
 
-if(NOT CP2K_USE_SUPERLU)
-  message("   - SUPERLU")
+if(NOT CP2K_USE_TREXIO)
+  message("   - trexio")
 endif()
 
-if(NOT CP2K_USE_LIBTORCH)
-  message("   - libtorch")
+if(NOT CP2K_USE_GRPP)
+  message("   - grpp")
 endif()
 
-message("\n\n" "To run the regtests you need to run the following commands\n"
-        "\n\n cd ..\n" " export CP2K_DATA_DIR=${CMAKE_SOURCE_DIR}/data/\n"
-        " ./tests/do_regtest.py ${cp2k_BINARY_DIR}/bin ${__cp2k_ext}\n\n")
+message(
+  "\n\n" # let below line separate
+  "To run the regtests you need to run the following commands\n"
+  "\n\n cd ..\n" # let below line separate
+  " export CP2K_DATA_DIR=${CMAKE_SOURCE_DIR}/data/\n"
+  " ./tests/do_regtest.py ${cp2k_BINARY_DIR}/bin ${__cp2k_ext}\n\n")
 
 # files needed for cmake
 
diff --git a/cmake/CheckFortranSourceRuns.cmake b/cmake/CheckFortranSourceRuns.cmake
deleted file mode 100644
index d2f0182e02..0000000000
--- a/cmake/CheckFortranSourceRuns.cmake
+++ /dev/null
@@ -1,189 +0,0 @@
-#!-------------------------------------------------------------------------------------------------!
-#!   CP2K: A general program to perform molecular dynamics simulations                             !
-#!   Copyright 2000-2025 CP2K developers group <https://cp2k.org>                                  !
-#!                                                                                                 !
-#!   SPDX-License-Identifier: GPL-2.0-or-later                                                     !
-#!-------------------------------------------------------------------------------------------------!
-
-# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
-# file Copyright.txt or https://cmake.org/licensing for details.
-
-#[=======================================================================[.rst:
-CheckFortranSourceRuns
-----------------------
-
-Check if given Fortran source compiles and links into an executable and can
-subsequently be run.
-
-.. command:: check_fortran_source_runs
-
-  .. code-block:: cmake
-
-    check_fortran_source_runs(<code> <resultVar>
-        [SRC_EXT <extension>])
-
-  Check that the source supplied in ``<code>`` can be compiled as a Fortran source
-  file, linked as an executable and then run. The ``<code>`` must be a Fortran program
-  containing at least an ``end`` statement--for example:
-
-  .. code-block:: cmake
-
-    check_fortran_source_runs("real :: x[*]; call co_sum(x); end" F2018coarrayOK)
-
-  This command can help avoid costly build processes when a compiler lacks support
-  for a necessary feature, or a particular vendor library is not compatible with
-  the Fortran compiler version being used. Some of these failures only occur at runtime
-  instead of linktime, and a trivial runtime example can catch the issue before the
-  main build process.
-
-  If the ``<code>`` could be built and run
-  successfully, the internal cache variable specified by ``<resultVar>`` will
-  be set to 1, otherwise it will be set to an value that evaluates to boolean
-  false (e.g. an empty string or an error message).
-
-  By default, the test source file will be given a ``.F90`` file extension. The
-  ``SRC_EXT`` option can be used to override this with ``.<extension>`` instead.
-
-  The underlying check is performed by the :command:`try_run` command. The
-  compile and link commands can be influenced by setting any of the following
-  variables prior to calling ``check_fortran_source_runs()``:
-
-  ``CMAKE_REQUIRED_FLAGS``
-    Additional flags to pass to the compiler. Note that the contents of
-    :variable:`CMAKE_Fortran_FLAGS <CMAKE_<LANG>_FLAGS>` and its associated
-    configuration-specific variable are automatically added to the compiler
-    command before the contents of ``CMAKE_REQUIRED_FLAGS``.
-
-  ``CMAKE_REQUIRED_DEFINITIONS``
-    A :ref:`;-list <CMake Language Lists>` of compiler definitions of the form
-    ``-DFOO`` or ``-DFOO=bar``. A definition for the name specified by
-    ``<resultVar>`` will also be added automatically.
-
-  ``CMAKE_REQUIRED_INCLUDES``
-    A :ref:`;-list <CMake Language Lists>` of header search paths to pass to
-    the compiler. These will be the only header search paths used by
-    ``try_run()``, i.e. the contents of the :prop_dir:`INCLUDE_DIRECTORIES`
-    directory property will be ignored.
-
-  ``CMAKE_REQUIRED_LINK_OPTIONS``
-    A :ref:`;-list <CMake Language Lists>` of options to add to the link
-    command (see :command:`try_run` for further details).
-
-  ``CMAKE_REQUIRED_LIBRARIES``
-    A :ref:`;-list <CMake Language Lists>` of libraries to add to the link
-    command. These can be the name of system libraries or they can be
-    :ref:`Imported Targets <Imported Targets>` (see :command:`try_run` for
-    further details).
-
-  ``CMAKE_REQUIRED_QUIET``
-    If this variable evaluates to a boolean true value, all status messages
-    associated with the check will be suppressed.
-
-  The check is only performed once, with the result cached in the variable
-  named by ``<resultVar>``. Every subsequent CMake run will re-use this cached
-  value rather than performing the check again, even if the ``<code>`` changes.
-  In order to force the check to be re-evaluated, the variable named by
-  ``<resultVar>`` must be manually removed from the cache.
-
-#]=======================================================================]
-
-include_guard(GLOBAL)
-
-macro(CHECK_Fortran_SOURCE_RUNS SOURCE VAR)
-  if(NOT DEFINED "${VAR}")
-    set(_SRC_EXT)
-    set(_key)
-    foreach(arg ${ARGN})
-      if("${arg}" MATCHES "^(SRC_EXT)$")
-        set(_key "${arg}")
-      elseif(_key)
-        list(APPEND _${_key} "${arg}")
-      else()
-        message(FATAL_ERROR "Unknown argument:\n  ${arg}\n")
-      endif()
-    endforeach()
-    if(NOT _SRC_EXT)
-      set(_SRC_EXT F90)
-    endif()
-    if(CMAKE_REQUIRED_LINK_OPTIONS)
-      set(CHECK_Fortran_SOURCE_COMPILES_ADD_LINK_OPTIONS
-          LINK_OPTIONS ${CMAKE_REQUIRED_LINK_OPTIONS})
-    else()
-      set(CHECK_Fortran_SOURCE_COMPILES_ADD_LINK_OPTIONS)
-    endif()
-    if(CMAKE_REQUIRED_LIBRARIES)
-      set(CHECK_Fortran_SOURCE_COMPILES_ADD_LIBRARIES
-          LINK_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
-    else()
-      set(CHECK_Fortran_SOURCE_COMPILES_ADD_LIBRARIES)
-    endif()
-    if(CMAKE_REQUIRED_INCLUDES)
-      set(CHECK_Fortran_SOURCE_COMPILES_ADD_INCLUDES
-          "-DINCLUDE_DIRECTORIES:STRING=${CMAKE_REQUIRED_INCLUDES}")
-    else()
-      set(CHECK_Fortran_SOURCE_COMPILES_ADD_INCLUDES)
-    endif()
-    file(WRITE
-         "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/src.${_SRC_EXT}"
-         "${SOURCE}\n")
-
-    if(NOT CMAKE_REQUIRED_QUIET)
-      message(CHECK_START "Performing Test ${VAR}")
-    endif()
-    try_run(
-      ${VAR}_EXITCODE ${VAR}_COMPILED ${CMAKE_BINARY_DIR}
-      ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/src.${_SRC_EXT}
-      COMPILE_DEFINITIONS
-        -D${VAR} ${CMAKE_REQUIRED_DEFINITIONS}
-        ${CHECK_Fortran_SOURCE_COMPILES_ADD_LINK_OPTIONS}
-        ${CHECK_Fortran_SOURCE_COMPILES_ADD_LIBRARIES}
-      CMAKE_FLAGS
-        -DCOMPILE_DEFINITIONS:STRING=${CMAKE_REQUIRED_FLAGS}
-        -DCMAKE_SKIP_RPATH:BOOL=${CMAKE_SKIP_RPATH}
-        "${CHECK_Fortran_SOURCE_COMPILES_ADD_INCLUDES}"
-      COMPILE_OUTPUT_VARIABLE OUTPUT
-      RUN_OUTPUT_VARIABLE RUN_OUTPUT)
-
-    # if it did not compile make the return value fail code of 1
-    if(NOT ${VAR}_COMPILED)
-      set(${VAR}_EXITCODE 1)
-    endif()
-    # if the return value was 0 then it worked
-    if("${${VAR}_EXITCODE}" EQUAL 0)
-      set(${VAR}
-          1
-          CACHE INTERNAL "Test ${VAR}")
-      if(NOT CMAKE_REQUIRED_QUIET)
-        message(CHECK_PASS "Success")
-      endif()
-      file(
-        APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log
-        "Performing Fortran SOURCE FILE Test ${VAR} succeeded with the following output:\n"
-        "${OUTPUT}\n"
-        "...and run output:\n"
-        "${RUN_OUTPUT}\n"
-        "Return value: ${${VAR}}\n"
-        "Source file was:\n${SOURCE}\n")
-    else()
-      if(CMAKE_CROSSCOMPILING AND "${${VAR}_EXITCODE}" MATCHES "FAILED_TO_RUN")
-        set(${VAR} "${${VAR}_EXITCODE}")
-      else()
-        set(${VAR}
-            ""
-            CACHE INTERNAL "Test ${VAR}")
-      endif()
-
-      if(NOT CMAKE_REQUIRED_QUIET)
-        message(CHECK_FAIL "Failed")
-      endif()
-      file(
-        APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log
-        "Performing Fortran SOURCE FILE Test ${VAR} failed with the following output:\n"
-        "${OUTPUT}\n"
-        "...and run output:\n"
-        "${RUN_OUTPUT}\n"
-        "Return value: ${${VAR}_EXITCODE}\n"
-        "Source file was:\n${SOURCE}\n")
-    endif()
-  endif()
-endmacro()
diff --git a/cmake/CompilerConfiguration.cmake b/cmake/CompilerConfiguration.cmake
index 6e4f494ac0..16e25fbf6d 100644
--- a/cmake/CompilerConfiguration.cmake
+++ b/cmake/CompilerConfiguration.cmake
@@ -35,7 +35,8 @@ endif()
 # https://github.com/cp2k/dbcsr/issues/261 eventually check compiler version
 # (similar to -h system_alloc)
 add_compile_options(
-  "$<$<COMPILE_LANG_AND_ID:Fortran,GNU>:-mtune=native;-ffree-line-length-512;-ffree-form;-std=f2008;-fimplicit-none;-Werror=aliasing;-Werror=ampersand;-Werror=c-binding-type;-Werror=conversion;-Werror=intrinsic-shadow;-Werror=intrinsics-std;-Werror=line-truncation;-Werror=tabs;-Werror=target-lifetime;-Werror=underflow;-Werror=unused-but-set-variable;-Werror=unused-variable>"
+  "$<$<COMPILE_LANG_AND_ID:C,GNU>:-march=native;-mtune=native>"
+  "$<$<COMPILE_LANG_AND_ID:Fortran,GNU>:-march=native;-mtune=native;-fbacktrace;-ffree-line-length-none;-ffree-form;-std=f2008;-fimplicit-none;-Werror=aliasing;-Werror=ampersand;-Werror=c-binding-type;-Werror=conversion;-Werror=intrinsic-shadow;-Werror=intrinsics-std;-Werror=line-truncation;-Werror=tabs;-Werror=target-lifetime;-Werror=underflow;-Werror=unused-but-set-variable;-Werror=unused-variable>"
   "$<$<AND:$<COMPILE_LANG_AND_ID:Fortran,GNU>,$<VERSION_GREATER_EQUAL:${CMAKE_Fortran_COMPILER_VERSION},11>>:-fallow-argument-mismatch>"
   "$<$<COMPILE_LANG_AND_ID:Fortran,Intel>:-free -stand=f18 -fpp -heap-arrays>"
   "$<$<COMPILE_LANG_AND_ID:Fortran,PGI>:-Mfreeform -Mextend -Mallocatable=03>"
@@ -45,12 +46,12 @@ add_compile_options(
 )
 
 add_compile_options(
-  "$<$<AND:$<CONFIG:RELEASE>,$<COMPILE_LANG_AND_ID:Fortran,GNU>>:-O3;-g;-funroll-loops>"
+  "$<$<AND:$<CONFIG:RELEASE>,$<COMPILE_LANG_AND_ID:Fortran,GNU>>:-g;-funroll-loops>"
   "$<$<AND:$<CONFIG:RELEASE>,$<COMPILE_LANG_AND_ID:Fortran,PGI>>:-fast>"
   "$<$<AND:$<CONFIG:RELEASE>,$<COMPILE_LANG_AND_ID:Fortran,Intel>>:-O3;-g>"
   "$<$<AND:$<CONFIG:RELEASE>,$<COMPILE_LANG_AND_ID:Fortran,Cray>>:-O2;-G2>"
   "$<$<AND:$<CONFIG:RELEASE>,$<COMPILE_LANG_AND_ID:Fortran,NAG>>:-gline>"
-  "$<$<AND:$<CONFIG:RELEASE>,$<COMPILE_LANG_AND_ID:C,GNU>>:-O3;-g;-funroll-loops;-Wall>"
+  "$<$<AND:$<CONFIG:RELEASE>,$<COMPILE_LANG_AND_ID:C,GNU>>:-g;-funroll-loops;-Wall>"
   "$<$<AND:$<CONFIG:RELEASE>,$<COMPILE_LANG_AND_ID:C,PGI>>:-fast>"
   "$<$<AND:$<CONFIG:RELEASE>,$<COMPILE_LANG_AND_ID:C,Intel>>:-O3;-g>"
   "$<$<AND:$<CONFIG:RELEASE>,$<COMPILE_LANG_AND_ID:C,Cray>>:-O3>"
diff --git a/cmake/cmake_cp2k.sh b/cmake/cmake_cp2k.sh
new file mode 100755
index 0000000000..b2695f9067
--- /dev/null
+++ b/cmake/cmake_cp2k.sh
@@ -0,0 +1,270 @@
+#!/bin/bash
+
+# Authors: Ole Schuett, Matthias Krack
+
+if [[ "${0}" == "${BASH_SOURCE[0]}" ]]; then
+  echo "ERROR: Script ${0##*/} must be sourced"
+  echo "Usage: ${BASH_SOURCE##*/} <PROFILE> <VERSION>"
+  exit 1
+fi
+
+if (($# != 2)); then
+  echo "ERROR: Script ${BASH_SOURCE##*/} expects exactly two arguments"
+  echo "Usage: ${BASH_SOURCE##*/} <PROFILE> <VERSION>"
+  return 1
+fi
+
+PROFILE=$1
+VERSION=$2
+
+[[ -z "${TOOLCHAIN_DIR}" ]] && TOOLCHAIN_DIR="/opt/cp2k-toolchain"
+[[ -z "${INSTALL_PREFIX}" ]] && INSTALL_PREFIX="/opt/cp2k"
+
+# Using Ninja because of https://gitlab.kitware.com/cmake/cmake/issues/18188
+
+if [[ "${PROFILE}" == "spack" ]]; then
+  eval "$(spack env activate myenv --sh)"
+elif [[ "${PROFILE}" =~ ^(minimal|toolchain)$ ]]; then
+  # shellcheck disable=SC1091
+  source "${TOOLCHAIN_DIR}/install/setup"
+fi
+
+# Run CMake
+[[ -d build ]] && rm -rf build
+mkdir build
+cd build || return 1
+
+# TODO: Reconcile PROFILE/VERSION with CP2K_BUILD_OPTIONS in CMakeLists.txt
+if [[ "${PROFILE}" == "spack" ]] && [[ "${VERSION}" == "psmp" ]]; then
+  # PyTorch's TorchConfig.cmake is buried in the Python site-packages directory
+  export Torch_DIR="/opt/spack/var/spack/environments/myenv/spack-env/view/lib/python3.11/site-packages/torch/share/cmake/Torch"
+  cmake \
+    -GNinja \
+    -DCMAKE_BUILD_TYPE="Release" \
+    -DCMAKE_C_FLAGS="-fno-lto" \
+    -DCMAKE_Fortran_FLAGS="-fno-lto" \
+    -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
+    -DCP2K_BLAS_VENDOR="OpenBLAS" \
+    -DCP2K_SCALAPACK_VENDOR="GENERIC" \
+    -DCP2K_USE_LIBINT2=ON \
+    -DCP2K_USE_LIBXC=ON \
+    -DCP2K_USE_FFTW3=ON \
+    -DCP2K_USE_HDF5=ON \
+    -DCP2K_USE_SPGLIB=ON \
+    -DCP2K_USE_VORI=ON \
+    -DCP2K_USE_MPI=ON \
+    -DCP2K_USE_MPI_F08=ON \
+    -DCP2K_USE_LIBXSMM=ON \
+    -DCP2K_USE_PLUMED=ON \
+    -DCP2K_USE_SPLA=ON \
+    -DCP2K_USE_ELPA=ON \
+    -DCP2K_USE_COSMA=ON \
+    -DCP2K_USE_SIRIUS=ON \
+    -DCP2K_USE_LIBVDWXC=ON \
+    -DCP2K_USE_GRPP=ON \
+    -DCP2K_USE_TREXIO=ON \
+    -DCP2K_USE_LIBTORCH=ON \
+    -DCP2K_USE_DLAF=ON \
+    -DCP2K_USE_DFTD4=ON \
+    -DCP2K_USE_LIBSMEAGOL=ON \
+    -Werror=dev \
+    .. |& tee ./cmake.log
+  CMAKE_EXIT_CODE=$?
+
+elif [[ "${PROFILE}" == "toolchain" ]] && [[ "${VERSION}" == "ssmp" ]]; then
+  cmake \
+    -GNinja \
+    -DCMAKE_BUILD_TYPE="Release" \
+    -DCMAKE_INSTALL_LIBDIR=lib \
+    -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
+    -DCP2K_BLAS_VENDOR=OpenBLAS \
+    -DCP2K_USE_COSMA=OFF \
+    -DCP2K_USE_DEEPMD=ON \
+    -DCP2K_USE_DFTD4=ON \
+    -DCP2K_USE_DLAF=OFF \
+    -DCP2K_USE_FFTW3=ON \
+    -DCP2K_USE_GRPP=ON \
+    -DCP2K_USE_HDF5=ON \
+    -DCP2K_USE_LIBINT2=ON \
+    -DCP2K_USE_LIBTORCH=ON \
+    -DCP2K_USE_LIBXC=ON \
+    -DCP2K_USE_LIBXSMM=ON \
+    -DCP2K_USE_MPI=OFF \
+    -DCP2K_USE_MPI_F08=OFF \
+    -DCP2K_USE_SPGLIB=ON \
+    -DCP2K_USE_TREXIO=ON \
+    -DCP2K_USE_VORI=ON \
+    -Werror=dev \
+    .. |& tee ./cmake.log
+  CMAKE_EXIT_CODE=$?
+
+elif [[ "${PROFILE}" == "toolchain" ]] && [[ "${VERSION}" == "sdbg" ]]; then
+  cmake \
+    -GNinja \
+    -DCMAKE_BUILD_TYPE="RelWithDebInfo" \
+    -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
+    -DCP2K_BLAS_VENDOR=OpenBLAS \
+    -DCP2K_DEBUG_MODE=ON \
+    -DCP2K_USE_COSMA=OFF \
+    -DCP2K_USE_DLAF=OFF \
+    -DCP2K_USE_FFTW3=ON \
+    -DCP2K_USE_LIBINT2=ON \
+    -DCP2K_USE_LIBTORCH=OFF \
+    -DCP2K_USE_LIBXC=ON \
+    -DCP2K_USE_MPI=OFF \
+    -DCP2K_USE_MPI_F08=OFF \
+    -DCP2K_USE_SPGLIB=ON \
+    -DCP2K_USE_VORI=ON \
+    -Werror=dev \
+    .. |& tee ./cmake.log
+  CMAKE_EXIT_CODE=$?
+
+elif [[ "${PROFILE}" == "toolchain" ]] && [[ "${VERSION}" == "psmp" ]]; then
+  cmake \
+    -GNinja \
+    -DCMAKE_BUILD_TYPE="Release" \
+    -DCMAKE_INSTALL_LIBDIR=lib \
+    -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
+    -DCP2K_BLAS_VENDOR=OpenBLAS \
+    -DCP2K_USE_COSMA=ON \
+    -DCP2K_USE_DEEPMD=ON \
+    -DCP2K_USE_DFTD4=ON \
+    -DCP2K_USE_DLAF=OFF \
+    -DCP2K_USE_ELPA=ON \
+    -DCP2K_USE_FFTW3=ON \
+    -DCP2K_USE_GRPP=ON \
+    -DCP2K_USE_HDF5=ON \
+    -DCP2K_USE_LIBINT2=ON \
+    -DCP2K_USE_LIBSMEAGOL=ON \
+    -DCP2K_USE_LIBTORCH=ON \
+    -DCP2K_USE_LIBXC=ON \
+    -DCP2K_USE_LIBXSMM=ON \
+    -DCP2K_USE_MPI=ON \
+    -DCP2K_USE_MPI_F08=ON \
+    -DCP2K_USE_PLUMED=ON \
+    -DCP2K_USE_SIRIUS=ON \
+    -DCP2K_USE_SPGLIB=ON \
+    -DCP2K_USE_SPLA=ON \
+    -DCP2K_USE_TREXIO=ON \
+    -DCP2K_USE_VORI=ON \
+    -Werror=dev \
+    .. |& tee ./cmake.log
+  CMAKE_EXIT_CODE=$?
+
+elif [[ "${PROFILE}" == "toolchain" ]] && [[ "${VERSION}" == "pdbg" ]]; then
+  cmake \
+    -GNinja \
+    -DCMAKE_BUILD_TYPE="RelWithDebInfo" \
+    -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
+    -DCP2K_BLAS_VENDOR=OpenBLAS \
+    -DCP2K_DEBUG_MODE=ON \
+    -DCP2K_USE_COSMA=OFF \
+    -DCP2K_USE_DLAF=OFF \
+    -DCP2K_USE_FFTW3=ON \
+    -DCP2K_USE_LIBINT2=ON \
+    -DCP2K_USE_LIBTORCH=OFF \
+    -DCP2K_USE_LIBXC=ON \
+    -DCP2K_USE_MPI=ON \
+    -DCP2K_USE_MPI_F08=ON \
+    -DCP2K_USE_SPGLIB=ON \
+    -DCP2K_USE_VORI=ON \
+    -Werror=dev \
+    .. |& tee ./cmake.log
+  CMAKE_EXIT_CODE=$?
+
+elif [[ "${PROFILE}" == "ubuntu" ]] && [[ "${VERSION}" == "ssmp" ]]; then
+  # TODO fix spglib https://github.com/cp2k/cp2k/issues/3414
+  # NOTE: libxc 5.2.3 is provided, CP2K requires libxc 7
+  cmake \
+    -GNinja \
+    -DCMAKE_BUILD_TYPE="RelWithDebInfo" \
+    -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
+    -DCP2K_BLAS_VENDOR=OpenBLAS \
+    -DCP2K_USE_COSMA=OFF \
+    -DCP2K_USE_DLAF=OFF \
+    -DCP2K_USE_FFTW3=ON \
+    -DCP2K_USE_LIBINT2=ON \
+    -DCP2K_USE_LIBTORCH=OFF \
+    -DCP2K_USE_LIBXC=OFF \
+    -DCP2K_USE_LIBXSMM=ON \
+    -DCP2K_USE_HDF5=ON \
+    -DCP2K_USE_MPI=OFF \
+    -DCP2K_USE_MPI_F08=OFF \
+    -DCP2K_USE_SPGLIB=OFF \
+    -DCP2K_USE_VORI=OFF \
+    -Werror=dev \
+    .. |& tee ./cmake.log
+  CMAKE_EXIT_CODE=$?
+
+elif [[ "${PROFILE}" == "minimal" ]] && [[ "${VERSION}" == "ssmp" ]]; then
+  cmake \
+    -GNinja \
+    -DCMAKE_BUILD_TYPE="Release" \
+    -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
+    -DCP2K_BLAS_VENDOR=OpenBLAS \
+    -DCP2K_USE_COSMA=OFF \
+    -DCP2K_USE_DLAF=OFF \
+    -DCP2K_USE_FFTW3=OFF \
+    -DCP2K_USE_LIBINT2=OFF \
+    -DCP2K_USE_LIBTORCH=OFF \
+    -DCP2K_USE_LIBXC=OFF \
+    -DCP2K_USE_LIBXSMM=OFF \
+    -DCP2K_USE_MPI=OFF \
+    -DCP2K_USE_MPI_F08=OFF \
+    -DCP2K_USE_SPGLIB=OFF \
+    -DCP2K_USE_VORI=OFF \
+    -Werror=dev \
+    .. |& tee ./cmake.log
+  CMAKE_EXIT_CODE=$?
+
+elif [[ "${PROFILE}" == "minimal" ]] && [[ "${VERSION}" == "psmp" ]]; then
+  cmake \
+    -GNinja \
+    -DCMAKE_BUILD_TYPE="Release" \
+    -DCMAKE_INSTALL_LIBDIR=lib \
+    -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
+    -DCP2K_BLAS_VENDOR=OpenBLAS \
+    -DCP2K_USE_COSMA=OFF \
+    -DCP2K_USE_DEEPMD=OFF \
+    -DCP2K_USE_DFTD4=OFF \
+    -DCP2K_USE_DLAF=OFF \
+    -DCP2K_USE_ELPA=OFF \
+    -DCP2K_USE_FFTW3=ON \
+    -DCP2K_USE_GRPP=OFF \
+    -DCP2K_USE_HDF5=OFF \
+    -DCP2K_USE_LIBINT2=OFF \
+    -DCP2K_USE_LIBSMEAGOL=OFF \
+    -DCP2K_USE_LIBTORCH=OFF \
+    -DCP2K_USE_LIBXC=OFF \
+    -DCP2K_USE_LIBXSMM=ON \
+    -DCP2K_USE_MPI=ON \
+    -DCP2K_USE_MPI_F08=ON \
+    -DCP2K_USE_PLUMED=OFF \
+    -DCP2K_USE_SIRIUS=OFF \
+    -DCP2K_USE_SPGLIB=OFF \
+    -DCP2K_USE_SPLA=OFF \
+    -DCP2K_USE_TREXIO=OFF \
+    -DCP2K_USE_VORI=OFF \
+    -Werror=dev \
+    .. |& tee ./cmake.log
+  CMAKE_EXIT_CODE=$?
+
+else
+  echo "Unknown combination of PROFILE=\"${PROFILE}\" and VERSION=\"${VERSION}\""
+  return 1
+fi
+
+if ((CMAKE_EXIT_CODE != 0)); then
+  echo -e "\nSummary: CMake failed"
+  echo -e "Status: FAILED\n"
+  return 1
+fi
+
+# Check for CMake warnings
+if grep -A5 'CMake Warning' ./cmake.log; then
+  echo -e "\nSummary: Found CMake warnings"
+  echo -e "Status: FAILED\n"
+  return 1
+fi
+
+#EOF
diff --git a/cmake/cp2kConfig.cmake.in b/cmake/cp2kConfig.cmake.in
index 3b6481d444..0680f110b9 100644
--- a/cmake/cp2kConfig.cmake.in
+++ b/cmake/cp2kConfig.cmake.in
@@ -36,7 +36,7 @@ if(NOT TARGET cp2k::cp2k)
 
   set(cp2k_VERSION @cp2k_VERSION@)
 
-  find_dependency(DBCSR 2.5 REQUIRED)
+  find_dependency(DBCSR 2.8 REQUIRED)
 
   if(@CP2K_USE_LIBXSMM@)
     find_dependency(LibXSMM REQUIRED)
@@ -60,7 +60,7 @@ if(NOT TARGET cp2k::cp2k)
   endif()
 
   if(@CP2K_USE_LIBXC@)
-    find_dependency(LibXC 7 REQUIRED)
+    find_dependency(LibXC 7 REQUIRED CONFIG)
   endif()
 
   if(@CP2K_USE_COSMA@)
@@ -74,19 +74,11 @@ if(NOT TARGET cp2k::cp2k)
   if(@CP2K_USE_FFTW3_@)
     find_dependency(Fftw REQUIRED)
   endif()
-  # QUIP
-  if(@CP2K_USE_QUIP@)
-    find_dependency(Quip REQUIRED)
-  endif()
-
-  # libint
 
   if(@CP2K_USE_LIBINT2@)
     find_dependency(Libint2 REQUIRED)
   endif()
 
-  # spglib
-
   if(@CP2K_USE_SPGLIB@)
     find_dependency(LibSPG REQUIRED)
   endif()
@@ -99,27 +91,33 @@ if(NOT TARGET cp2k::cp2k)
     find_dependency(sirius REQUIRED)
   endif()
 
-  if(@CP2K_USE_SUPERLU@)
-    find_dependency(SuperLU REQUIRED)
+  if(@CP2K_USE_PLUMED@)
+    find_dependency(Plumed REQUIRED)
+  endif()
+
+  if(@CP2K_USE_LIBTORCH@)
+    find_dependency(Torch REQUIRED)
   endif()
 
-  if(@CP2K_USE_METIS@)
-    find_dependency(Metis)
+  if(@CP2K_USE_HDF5@)
+    find_dependency(HDF5 REQUIRED COMPONENTS C Fortran)
   endif()
 
-  if(@CP2K_USE_PEXSI@)
-    # PEXSI 1.2 uses cmake as build system
-    find_dependency(PEXSI REQUIRED)
+  if(@CP2K_USE_DFTD4@)
+    find_dependency(dftd4 REQUIRED)
   endif()
 
-  if(@CP2K_USE_PLUMED@)
-    find_dependency(Plumed REQUIRED)
+  if(@CP2K_USE_DEEPMD@)
+    find_dependency(DeepMD REQUIRED)
   endif()
 
-  if(@CP2K_USE_LIBTORCH@)
-    find_dependency(Torch REQUIRED)
+  if(@CP2K_USE_LIBSMEAGOL@)
+    find_dependency(libsmeagol REQUIRED)
   endif()
 
+  if(@CP2K_USE_VORI@)
+    find_dependency(LibVORI REQUIRED)
+  endif()
   include("${CMAKE_CURRENT_LIST_DIR}/cp2kTargets.cmake")
 
   # Clean-up module path.
diff --git a/cmake/modules/FindBlas.cmake b/cmake/modules/FindBlas.cmake
index 09d2fdfe69..9366d2e8d6 100644
--- a/cmake/modules/FindBlas.cmake
+++ b/cmake/modules/FindBlas.cmake
@@ -28,6 +28,7 @@ if(NOT CP2K_CONFIG_PACKAGE)
       "FlexiBLAS"
       "Atlas"
       "NVHPCBlas"
+      "NVPL"
       "CUSTOM")
 
   set(__BLAS_VENDOR_LIST ${CP2K_BLAS_VENDOR_LIST})
@@ -125,6 +126,9 @@ else()
   set(CP2K_BLAS_FOUND ON)
 endif()
 
+# cleanup list (regularly contains empty items)
+list(FILTER CP2K_BLAS_LINK_LIBRARIES EXCLUDE REGEX "^$")
+
 # we exclude the CP2K_BLAS_INCLUDE_DIRS from the list of mandatory variables as
 # having the fortran interface is usually enough. C, C++ and others languages
 # might require this information though
diff --git a/cmake/modules/FindLapack.cmake b/cmake/modules/FindLapack.cmake
index 8f1b714976..341d25128a 100644
--- a/cmake/modules/FindLapack.cmake
+++ b/cmake/modules/FindLapack.cmake
@@ -24,7 +24,7 @@ if(NOT CP2K_CONFIG_PACKAGE)
 
   if(CP2K_BLAS_FOUND)
     # LAPACK in the Intel MKL 10+ library?
-    if(CP2K_BLAS_VENDOR MATCHES "MKL|OpenBLAS|Armpl|SCI|FlexiBLAS|NVHPC")
+    if(CP2K_BLAS_VENDOR MATCHES "MKL|OpenBLAS|Armpl|SCI|FlexiBLAS|NVHPC|NVPL")
       # we just need to create the interface that's all
       get_target_property(CP2K_LAPACK_INCLUDE_DIRS cp2k::BLAS::blas
                           INTERFACE_INCLUDE_DIRECTORIES)
diff --git a/cmake/modules/FindLibVORI.cmake b/cmake/modules/FindLibVORI.cmake
index 468e906e6b..e6b6f3620c 100644
--- a/cmake/modules/FindLibVORI.cmake
+++ b/cmake/modules/FindLibVORI.cmake
@@ -14,7 +14,6 @@ include(cp2k_utils)
 
 cp2k_set_default_paths(LIBVORI "LibVORI")
 cp2k_find_libraries(LIBVORI vori)
-# cp2k_include_dirs(LIBVORI )
 
 if(CP2K_LIBVORI_INCLUDE_DIRS)
   find_package_handle_standard_args(
diff --git a/cmake/modules/FindLibXC.cmake b/cmake/modules/FindLibXC.cmake
deleted file mode 100644
index cebb9f61f6..0000000000
--- a/cmake/modules/FindLibXC.cmake
+++ /dev/null
@@ -1,60 +0,0 @@
-#!-------------------------------------------------------------------------------------------------!
-#!   CP2K: A general program to perform molecular dynamics simulations                             !
-#!   Copyright 2000-2025 CP2K developers group <https://cp2k.org>                                  !
-#!                                                                                                 !
-#!   SPDX-License-Identifier: GPL-2.0-or-later                                                     !
-#!-------------------------------------------------------------------------------------------------!
-
-include(FindPackageHandleStandardArgs)
-find_package(PkgConfig REQUIRED)
-include(cp2k_utils)
-
-cp2k_set_default_paths(LIBXC "LibXC")
-
-if(PKG_CONFIG_FOUND)
-  # For LibXC >= 7, the Fortran interface is only libxcf03
-  pkg_check_modules(CP2K_LIBXC IMPORTED_TARGET GLOBAL libxcf03 libxc>=7)
-endif()
-
-if(NOT CP2K_LIBXC_FOUND)
-  # Revert pkg_check_modules side effects
-  cp2k_set_default_paths(LIBXC "LibXC")
-  foreach(_var xc xcf03)
-    string(TOUPPER LIB${_var} _var_up)
-    cp2k_find_libraries(${_var_up} ${_var})
-  endforeach()
-endif()
-
-if(CP2K_LIBXC_FOUND)
-  # Require both libxc + libxcf03 for LibXC 7
-  set(CP2K_LIBXC_LINK_LIBRARIES
-      "${CP2K_LIBXCF03_LIBRARIES};${CP2K_LIBXC_LIBRARIES}")
-endif()
-
-if(NOT CP2K_LIBXC_INCLUDE_DIRS)
-  cp2k_include_dirs(LIBXC "xc.h;libxc/xc.h")
-endif()
-
-if(CP2K_LIBXC_INCLUDE_DIRS)
-  find_package_handle_standard_args(
-    LibXC DEFAULT_MSG CP2K_LIBXC_FOUND CP2K_LIBXC_LINK_LIBRARIES
-    CP2K_LIBXC_INCLUDE_DIRS)
-else()
-  find_package_handle_standard_args(LibXC DEFAULT_MSG CP2K_LIBXC_FOUND
-                                    CP2K_LIBXC_LINK_LIBRARIES)
-endif()
-if(CP2K_LIBXC_FOUND)
-  if(NOT TARGET cp2k::Libxc::xc)
-    add_library(cp2k::Libxc::xc INTERFACE IMPORTED)
-  endif()
-
-  if(CP2K_LIBXC_INCLUDE_DIRS)
-    set_target_properties(
-      cp2k::Libxc::xc PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
-                                 "${CP2K_LIBXC_INCLUDE_DIRS}")
-  endif()
-  target_link_libraries(cp2k::Libxc::xc INTERFACE ${CP2K_LIBXC_LINK_LIBRARIES})
-endif()
-
-mark_as_advanced(CP2K_LIBXC_FOUND CP2K_LIBXC_LINK_LIBRARIES
-                 CP2K_LIBXC_INCLUDE_DIRS)
diff --git a/cmake/modules/FindLibXSMM.cmake b/cmake/modules/FindLibXSMM.cmake
index d8c468605d..db3f121bd6 100644
--- a/cmake/modules/FindLibXSMM.cmake
+++ b/cmake/modules/FindLibXSMM.cmake
@@ -15,16 +15,12 @@ set(CP2K_LIBXSMMF_ROOT "${CP2K_LIBXSMM_PREFIX}")
 set(CP2K_LIBXSMMNOBLAS_ROOT "${CP2K_LIBXSMM_PREFIX}")
 
 if(PKG_CONFIG_FOUND)
-  pkg_check_modules(CP2K_LIBXSMM IMPORTED_TARGET GLOBAL libxsmm)
-  pkg_check_modules(CP2K_LIBXSMMEXT IMPORTED_TARGET GLOBAL libxsmmext)
-  pkg_check_modules(CP2K_LIBXSMMF IMPORTED_TARGET GLOBAL libxsmmf)
-  pkg_check_modules(CP2K_LIBXSMMNOBLAS IMPORTED_TARGET GLOBAL libxsmmnoblas)
-
-  # i need to do it twice because of dbcsr build option
-  pkg_check_modules(LIBXSMM QUIET IMPORTED_TARGET GLOBAL libxsmm)
-  pkg_check_modules(LIBXSMMEXT QUIET IMPORTED_TARGET GLOBAL libxsmmext)
-  pkg_check_modules(LIBXSMMF QUIET IMPORTED_TARGET GLOBAL libxsmmf)
-  pkg_check_modules(LIBXSMMNOBLAS QUIET IMPORTED_TARGET GLOBAL libxsmmnoblas)
+  foreach(__lib libxsmm libxsmmf libxsmmext libxsmmnoblas)
+    string(TOUPPER "${__lib}" __lib_search_up)
+    pkg_check_modules(CP2K_${__lib_search_up} IMPORTED_TARGET GLOBAL ${__lib})
+    # need to do it twice because of dbcsr build option
+    pkg_check_modules(${__lib_search_up} QUIET IMPORTED_TARGET GLOBAL ${__lib})
+  endforeach()
 endif()
 
 if(NOT CP2K_LIBXSMM_FOUND)
@@ -60,8 +56,11 @@ endif()
 if(NOT TARGET cp2k::LibXSMM::libxsmm)
   foreach(__lib libxsmm libxsmmf libxsmmext libxsmmnoblas)
     string(TOUPPER "CP2K_${__lib}" __lib_search_up)
+
     if(${__lib_search_up}_FOUND AND NOT TARGET cp2k::LibXSMM::${__lib})
       add_library(cp2k::LibXSMM::${__lib} INTERFACE IMPORTED)
+      target_link_directories(cp2k::LibXSMM::${__lib} INTERFACE
+                              ${${__lib_search_up}_LIBRARY_DIRS})
     endif()
 
     set_target_properties(
@@ -79,6 +78,6 @@ if(NOT TARGET cp2k::LibXSMM::libxsmm)
 endif()
 
 mark_as_advanced(
-  CP2K_LIBXSMM_INCLUDE_DIRS CP2K_LIBXSMMNOBLAS_LINK_LIBRARIES
-  CP2K_LIBXSMMEXT_LINK_LIBRARIES CP2K_LIBXSMMF_LINK_LIBRARIES
-  CP2K_LIBXSMM_LINK_LIBRARIES)
+  CP2K_LIBXSMM_INCLUDE_DIRS CP2K_LIBXSMM_LIBRARY_DIRS
+  CP2K_LIBXSMMNOBLAS_LINK_LIBRARIES CP2K_LIBXSMMEXT_LINK_LIBRARIES
+  CP2K_LIBXSMMF_LINK_LIBRARIES CP2K_LIBXSMM_LINK_LIBRARIES)
diff --git a/cmake/modules/FindMetis.cmake b/cmake/modules/FindMetis.cmake
deleted file mode 100644
index 007b9076a3..0000000000
--- a/cmake/modules/FindMetis.cmake
+++ /dev/null
@@ -1,35 +0,0 @@
-#!-------------------------------------------------------------------------------------------------!
-#!   CP2K: A general program to perform molecular dynamics simulations                             !
-#!   Copyright 2000-2025 CP2K developers group <https://cp2k.org>                                  !
-#!                                                                                                 !
-#!   SPDX-License-Identifier: GPL-2.0-or-later                                                     !
-#!-------------------------------------------------------------------------------------------------!
-
-# Copyright (c) 2022- ETH Zurich
-#
-# authors : Mathieu Taillefumier
-
-include(FindPackageHandleStandardArgs)
-include(cp2k_utils)
-
-cp2k_set_default_paths(METIS "Metis")
-
-cp2k_find_libraries(FLEXIBLAS "metis")
-cp2k_include_dirs(FFTW3 "metis.h")
-
-# check that METIS has been found
-# ---------------------------------
-find_package_handle_standard_args(Metis DEFAULT_MSG CP2K_METIS_LINK_LIBRARIES
-                                  CP2K_METIS_INCLUDE_DIRS CP2K_METIS_FOUND)
-
-if(CP2K_METIS_FOUND AND NOT TARGET cp2k::metis::metis)
-  add_library(cp2k::metis::metis INTERFACE IMPORTED)
-  set_target_properties(
-    cp2k::metis::metis
-    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${CP2K_METIS_INCLUDE_DIRS}"
-               INTERFACE_LINK_LIBRARIES "${CP2K_METIS_LINK_LIBRARIES}")
-endif()
-
-mark_as_advanced(CP2K_METIS_LINK_LIBRARIES)
-mark_as_advanced(CP2K_METIS_INCLUDE_DIRS)
-mark_as_advanced(CP2K_METIS_FOUND)
diff --git a/cmake/modules/FindNVPL.cmake b/cmake/modules/FindNVPL.cmake
new file mode 100644
index 0000000000..de18aab951
--- /dev/null
+++ b/cmake/modules/FindNVPL.cmake
@@ -0,0 +1,57 @@
+# Try to find NVPL with the provided CONFIG
+find_package(nvpl CONFIG COMPONENTS blac lapack scalapack fft)
+
+if(CP2K_BLAS_INTERFACE STREQUAL "64bits")
+  set(_nvpl_int "_ilp64")
+else()
+  set(_nvpl_int "_lp64")
+endif()
+
+if(CP2K_BLAS_THREADING STREQUAL "sequential")
+  set(_nvpl_thread "_seq")
+else()
+  set(_nvpl_thread "_omp")
+endif()
+
+# Look for separate components
+if(NOT nvpl_FOUND)
+  find_package(nvpl_blas CONFIG REQUIRED)
+  find_package(nvpl_lapack CONFIG REQUIRED)
+  find_package(nvpl_scalapack CONFIG REQUIRED)
+  # 0.4.0 is the first version with the fftw3.h header
+  find_package(nvpl_fft 0.4.0 CONFIG REQUIRED)
+endif()
+
+if(NOT TARGET "cp2k::BLAS::NVPL::blas")
+  add_library("cp2k::BLAS::NVPL::blas" INTERFACE IMPORTED)
+  target_link_libraries("cp2k::BLAS::NVPL::blas" INTERFACE "nvpl::blas${_nvpl_int}${_nvpl_thread}")
+endif()
+
+if(NOT TARGET "cp2k::BLAS::NVPL::lapack")
+  add_library("cp2k::BLAS::NVPL::lapack" INTERFACE IMPORTED)
+  target_link_libraries("cp2k::BLAS::NVPL::lapack" INTERFACE "nvpl::lapack${_nvpl_int}${_nvpl_thread}")
+endif()
+
+if(NOT TARGET "cp2k::BLAS::NVPL::scalapack_link")
+  add_library("cp2k::BLAS::NVPL::scalapack_link" INTERFACE IMPORTED)
+
+  get_target_property(CP2K_NVPL_LAPACK_LIBRARIES "nvpl::lapack${_nvpl_int}${_nvpl_thread}" INTERFACE_LINK_LIBRARIES)
+  get_target_property(CP2K_NVPL_SCALAPACK_LIBRARIES "nvpl::scalapack${_nvpl_int}" INTERFACE_LINK_LIBRARIES)
+  get_target_property(CP2K_NVPL_BLAS_INCLUDE_DIRS "nvpl::blas${_nvpl_int}${_nvpl_thread}" INTERFACE_INCLUDE_DIRECTORIES)
+  get_target_property(CP2K_NVPL_LAPACK_INCLUDE_DIRS "nvpl::lapack${_nvpl_int}${_nvpl_thread}" INTERFACE_INCLUDE_DIRECTORIES)
+  get_target_property(CP2K_NVPL_SCALAPACK_INCLUDE_DIRS "nvpl::scalapack${_nvpl_int}" INTERFACE_INCLUDE_DIRECTORIES)
+
+  set_target_properties(
+    cp2k::BLAS::NVPL::scalapack_link 
+    PROPERTIES INTERFACE_LINK_LIBRARIES 
+    "${CP2K_NVPL_LAPACK_LIBRARIES};${CP2K_NVPL_SCALAPACK_LIBRARIES}")
+  set_target_properties(
+    cp2k::BLAS::NVPL::scalapack_link 
+    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES 
+    "${CP2K_NVPL_BLAS_INCLUDE_DIRS};${CP2K_NVPL_LAPACK_INCLUDE_DIRS};${CP2K_NVPL_SCALAPACK_INCLUDE_DIRS}")
+endif()
+
+if(NOT TARGET "cp2k::FFTW3::fftw3")
+  add_library("cp2k::FFTW3::fftw3" INTERFACE IMPORTED)
+  target_link_libraries("cp2k::FFTW3::fftw3" INTERFACE "nvpl::fftw")
+endif()
diff --git a/cmake/modules/FindPEXSI.cmake b/cmake/modules/FindPEXSI.cmake
deleted file mode 100644
index ff82d4c843..0000000000
--- a/cmake/modules/FindPEXSI.cmake
+++ /dev/null
@@ -1,46 +0,0 @@
-#!-------------------------------------------------------------------------------------------------!
-#!   CP2K: A general program to perform molecular dynamics simulations                             !
-#!   Copyright 2000-2025 CP2K developers group <https://cp2k.org>                                  !
-#!                                                                                                 !
-#!   SPDX-License-Identifier: GPL-2.0-or-later                                                     !
-#!-------------------------------------------------------------------------------------------------!
-
-# Copyright (c) 2022- ETH Zurich
-#
-# authors : Mathieu Taillefumier
-
-include(FindPackageHandleStandardArgs)
-include(cp2k_utils)
-
-find_package(ptscotch)
-
-cp2k_set_default_paths(PEXSI "PEXSI")
-
-cp2k_find_libraries(PEXSI "pexsi")
-cp2k_include_dirs(PEXSI "pexsi.hpp")
-
-find_file(CP2K_PEXSI_MOD_FILE NAMES "f_ppexsi_interface.mod" PATCHS
-                                    "${CP2K_PEXSI_PREFIX}/include")
-
-if(NOT CP2K_PEXSI_MOD_FILE)
-  message(
-    FATAL_ERROR
-      "The pexsi library needs to be compiled with fortran support. Either recompile pexsi or disable it."
-  )
-endif()
-
-find_package_handle_standard_args(PEXSI DEFAULT_MSG CP2K_PEXSI_INCLUDE_DIRS
-                                  CP2K_PEXSI_LINK_LIBRARIES)
-
-if(CP2K_PEXSI_FOUND AND NOT TARGET cp2k::PEXSI::pexsi)
-  add_library(cp2k::PEXSI::pexsi INTERFACE IMPORTED)
-  set_target_properties(cp2k::PEXSI PROPERTIES INTERFACE_LINK_LIBRARIES
-                                               "${CP2K_PEXSI_LINK_LIBRARIES}")
-  if(DEFINED CP2K_PEXSI_INCLUDE_DIRS)
-    set_target_properties(cp2k::PEXSI PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
-                                                 "${CP2K_PEXSI_INCLUDE_DIRS}")
-  endif()
-endif()
-
-mark_as_advanced(CP2K_PEXSI_LINK_LIBRARIES CP2K_PEXSI_INCLUDE_DIRS
-                 CP2K_PEXSI_FOUND)
diff --git a/cmake/modules/FindPtscotch.cmake b/cmake/modules/FindPtscotch.cmake
deleted file mode 100644
index 2210166e3f..0000000000
--- a/cmake/modules/FindPtscotch.cmake
+++ /dev/null
@@ -1,72 +0,0 @@
-#!-------------------------------------------------------------------------------------------------!
-#!   CP2K: A general program to perform molecular dynamics simulations                             !
-#!   Copyright 2000-2025 CP2K developers group <https://cp2k.org>                                  !
-#!                                                                                                 !
-#!   SPDX-License-Identifier: GPL-2.0-or-later                                                     !
-#!-------------------------------------------------------------------------------------------------!
-
-# Copyright (c) 2022- ETH Zurich
-#
-# authors : Mathieu Taillefumier
-
-include(FindPackageHandleStandardArgs)
-include(cp2k_utils)
-
-cp2k_set_default_paths(PTSCOTCH "Ptscotch")
-
-find_package(Parmetis REQUIRED)
-find_package(Threads REQUIRED)
-find_package(MPI REQUIRED)
-
-# look for libraries
-
-foreach(
-  _lib
-  ptscotchparmetis
-  ptscotch
-  ptscotcherr
-  scotchmetis
-  scotch
-  scotcherr
-  ptesmumps)
-  string(TOUPPER "${_lib}" _lib_up)
-  cp2k_find_libraries("${_lib_up}" ${_lib})
-endforeach()
-
-# search for include files
-cp2k_include_dirs(PTSCOTCH
-                  "ptscotch.h openmpi/include/ptscotch.h ptsctoch/ptscotch.h")
-
-# check that PTSCOTCH has been found
-# ---------------------------------
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(
-  Ptscotch
-  DEFAULT_MSG
-  CP2K_PTSCOTCH_LINK_LIBRARIES
-  CP2K_PTSCOTCHPARMETIS_LINK_LIBRARIES
-  CP2K_PTSCOTCHERR_LINK_LIBRARIES
-  CP2K_SCOTCHMETIS_LINK_LIBRARIES
-  CP2K_SCOTCH_LINK_LIBRARIES
-  CP2K_SCOTCHERR_LINK_LIBRARIES
-  CP2K_PTESMUMPS_LINK_LIBRARIES)
-
-if(CP2K_PTSCOTCH_FOUND AND NOT TARGET cp2k::ptscotch::ptscotch)
-  add_library(cp2k::ptscotch::ptscotch INTERFACE IMPORTED)
-  set_target_properties(
-    cp2k::ptscotch::ptscotch
-    PROPERTIES
-      INTERFACE_INCLUDE_DIRECTORIES "${PTSCOTCH_INCLUDE_DIRS}"
-      INTERFACE_LINK_LIBRARIES
-      "${CP2K_PTSCOTCH_LINK_LIBRARIES};
-  ${CP2K_PTSCOTCHPARMETIS_LINK_LIBRARIES};
-  ${CP2K_PTSCOTCHERR_LINK_LIBRARIES};
-  ${CP2K_SCOTCHMETIS_LINK_LIBRARIES};
-  ${CP2K_SCOTCH_LINK_LIBRARIES};
-  ${CP2K_SCOTCHERR_LINK_LIBRARIES};
-  ${CP2K_PTESMUMPS_LINK_LIBRARIES}")
-endif()
-
-mark_as_advanced(CP2K_PTSCOTCH_FOUND)
-mark_as_advanced(CP2K_PTSCOTCH_LIBRARIES)
-mark_as_advanced(CP2K_PTSCOTCH_INCLUDE_DIRS)
diff --git a/cmake/modules/FindQuip.cmake b/cmake/modules/FindQuip.cmake
deleted file mode 100644
index 9b2c5083cc..0000000000
--- a/cmake/modules/FindQuip.cmake
+++ /dev/null
@@ -1,35 +0,0 @@
-#!-------------------------------------------------------------------------------------------------!
-#!   CP2K: A general program to perform molecular dynamics simulations                             !
-#!   Copyright 2000-2025 CP2K developers group <https://cp2k.org>                                  !
-#!                                                                                                 !
-#!   SPDX-License-Identifier: GPL-2.0-or-later                                                     !
-#!-------------------------------------------------------------------------------------------------!
-
-# Copyright (c) 2022- ETH Zurich
-#
-# authors : Mathieu Taillefumier
-
-include(FindPackageHandleStandardArgs)
-find_package(PkgConfig)
-cp2k_set_default_paths(LIBQUIP)
-
-pkg_search_module(CP2K_LIBQUIP quip "Quip")
-
-if(CP2K_LIBQUIP_FOUND)
-  cp2k_find_libraries(LIBQUIP "quip")
-  cp2k_include_dirs(LIBQUIP "quip.h")
-endif()
-find_package_handle_standard_args(Quip DEFAULT_MSG CP2K_LIBQUIP_INCLUDE_DIRS
-                                  CP2K_QUIP_LINK_LIBRARIES)
-
-if(CP2K_LIBQUIP_FOUND AND NOT TARGET cp2k::quip::quip)
-  add_library(cp2k::quip::quip INTERFACE IMPORTED)
-  set_target_properties(
-    cp2k::quip::quip
-    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${CP2K_LIBQUIP_INCLUDE_DIRS}"
-               INTERFACE_LINK_LIBRARIES "${CP2K_LIBQUIP_LINK_LIBRARIES}")
-endif()
-
-mark_as_advanced(CP2K_LIBQUIP_LINK_LIBRARIES)
-mark_as_advanced(CP2K_LIBQUIP_INCLUDE_DIRS)
-mark_as_advanced(CP2K_LIBQUIP_FOUND)
diff --git a/cmake/modules/FindSCALAPACK.cmake b/cmake/modules/FindSCALAPACK.cmake
index 951f0cd858..ffb0803c23 100644
--- a/cmake/modules/FindSCALAPACK.cmake
+++ b/cmake/modules/FindSCALAPACK.cmake
@@ -17,7 +17,20 @@ cp2k_set_default_paths(SCALAPACK "SCALAPACK")
 # check if we have mkl as blas library or not and pick the scalapack from mkl
 # distro if found
 if(NOT CP2K_CONFIG_PACKAGE)
-  if(CP2K_SCALAPACK_VENDOR STREQUAL "GENERIC")
+  if(CP2K_SCALAPACK_VENDOR MATCHES "MKL|auto"
+     AND TARGET cp2k::BLAS::MKL::scalapack_link)
+    # we have mkl check for the different mkl target
+    get_target_property(
+      CP2K_SCALAPACK_LINK_LIBRARIES cp2k::BLAS::MKL::scalapack_link
+      INTERFACE_LINK_LIBRARIES)
+    set(CP2K_SCALAPACK_FOUND yes)
+  elseif(CP2K_SCALAPACK_VENDOR MATCHES "SCI|auto"
+         AND TARGET cp2k::BLAS::SCI::scalapack_link)
+    get_target_property(
+      CP2K_SCALAPACK_LINK_LIBRARIES cp2k::BLAS::SCI::scalapack_link
+      INTERFACE_LINK_LIBRARIES)
+    set(CP2K_SCALAPACK_FOUND yes)
+  else() # if(CP2K_SCALAPACK_VENDOR MATCHES "GENERIC|auto")
     if(TARGET cp2k::BLAS::MKL::scalapack_link)
       message(
         WARNING
@@ -25,19 +38,30 @@ if(NOT CP2K_CONFIG_PACKAGE)
           "-                  FindScalapack warning                        -"
           "-----------------------------------------------------------------"
           "\n"
-          "You may want to use mkl implementation of scalapack. To do this\n"
-          "add -DCP2K_SCALAPACK_VENDOR=MKL to the cmake command line.      \n")
+          "You may want to use MKL implementation of ScaLAPACK. To do this\n"
+          "add -DCP2K_SCALAPACK_VENDOR=MKL to the CMake command line.\n\n")
     endif()
 
     if(TARGET cp2k::BLAS::SCI::scalapack_link)
+      message(
+        WARNING
+          "-----------------------------------------------------------------"
+          "-                  FindScalapack warning                        -"
+          "-----------------------------------------------------------------"
+          "\n"
+          "You may want to use Cray implementation of ScaLAPACK. To do this \n"
+          "add -DCP2K_SCALAPACK_VENDOR=SCI to the CMake command line.\n\n")
+    endif()
+
+    if(TARGET cp2k::BLAS::NVPL::scalapack_link)
       message(
         WARNING
           "-----------------------------------------------------------------\n"
           "-                  FindScalapack warning                        -\n"
           "-----------------------------------------------------------------\n"
           "\n"
-          "You may want to use Cray implementation of scalapack. To do this \n"
-          "add -DCP2K_SCALAPACK_VENDOR=SCI to the cmake command line\n\n")
+          "You may want to use NVPL implementation of ScaLAPACK. To do this \n"
+          "add -DCP2K_SCALAPACK_VENDOR=NVPL to the CMake command line.\n\n")
     endif()
 
     # try to detect location with pkgconfig
@@ -64,18 +88,24 @@ if(NOT CP2K_CONFIG_PACKAGE)
     endif()
 
   elseif(TARGET cp2k::BLAS::MKL::scalapack_link)
-    # we have mkl check for the different mkl target
     get_target_property(
       CP2K_SCALAPACK_LINK_LIBRARIES cp2k::BLAS::MKL::scalapack_link
       INTERFACE_LINK_LIBRARIES)
     set(CP2K_SCALAPACK_FOUND yes)
   elseif(TARGET cp2k::BLAS::SCI::scalapack_link)
-    # we have mkl check for the different mkl target
     get_target_property(
       CP2K_SCALAPACK_LINK_LIBRARIES cp2k::BLAS::SCI::scalapack_link
       INTERFACE_LINK_LIBRARIES)
+  elseif(TARGET cp2k::BLAS::NVPL::scalapack_link)
+    get_target_property(
+      CP2K_SCALAPACK_LINK_LIBRARIES cp2k::BLAS::NVPL::scalapack_link
+      INTERFACE_LINK_LIBRARIES)
   endif()
 endif()
+
+# cleanup list (regularly contains empty items)
+list(FILTER CP2K_SCALAPACK_LINK_LIBRARIES EXCLUDE REGEX "^$")
+
 # check if found
 find_package_handle_standard_args(SCALAPACK
                                   REQUIRED_VARS CP2K_SCALAPACK_LINK_LIBRARIES)
diff --git a/cmake/modules/FindSuperLU.cmake b/cmake/modules/FindSuperLU.cmake
deleted file mode 100644
index 7db1077dcb..0000000000
--- a/cmake/modules/FindSuperLU.cmake
+++ /dev/null
@@ -1,39 +0,0 @@
-#!-------------------------------------------------------------------------------------------------!
-#!   CP2K: A general program to perform molecular dynamics simulations                             !
-#!   Copyright 2000-2025 CP2K developers group <https://cp2k.org>                                  !
-#!                                                                                                 !
-#!   SPDX-License-Identifier: GPL-2.0-or-later                                                     !
-#!-------------------------------------------------------------------------------------------------!
-
-# Copyright (c) 2022- ETH Zurich
-#
-# authors : Mathieu Taillefumier
-
-include(FindPackageHandleStandardArgs)
-include(cp2k_utils)
-
-find_package(PkgConfig)
-cp2k_set_default_paths(SUPERLU "SuperLU")
-pkg_search_module(CP2K_SUPERLU IMPORTED_TARGET GLOBAL "superlu_dist")
-
-if(NOT CP2K_SUPERLU_FOUND)
-  cp2k_find_libraries(SUPERLU "superlu;superlu_dist")
-endif()
-
-if(NOT CP2K_SUPERLU_INCLUDE_DIRS)
-  cp2k_include_dirs(SUPERLU
-                    "supermatrix.h;SuperLU/supermatrix.h;superlu/supermatrix.h")
-endif()
-
-find_package_handle_standard_args(SuperLU DEFAULT_MSG CP2K_SUPERLU_INCLUDE_DIRS
-                                  CP2K_SUPERLU_LINK_LIBRARIES)
-
-if(CP2K_SUPERLU_FOUND AND NOT TARGET cp2k::superlu::superlu)
-  add_library(cp2k::superlu::superlu INTERFACE IMPORTED)
-endif()
-set_target_properties(
-  cp2k::superlu::superlu
-  PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${CP2K_SUPERLU_INCLUDE_DIRS}"
-             INTERFACE_LINK_LIBRARIES "${CP2K_SUPERLU_LINK_LIBRARIES}")
-mark_as_advanced(CP2K_SUPERLU_LINK_LIBRARIES CP2K_SUPERLU_INCLUDE_DIRS
-                 CP2K_SUPERLU_FOUND)
diff --git a/cmake/modules/FindTrexIO.cmake b/cmake/modules/FindTrexIO.cmake
new file mode 100644
index 0000000000..bc9f64adfa
--- /dev/null
+++ b/cmake/modules/FindTrexIO.cmake
@@ -0,0 +1,40 @@
+#!-------------------------------------------------------------------------------------------------!
+#!   CP2K: A general program to perform molecular dynamics simulations                             !
+#!   Copyright 2000-2025 CP2K developers group <https://cp2k.org>                                  !
+#!                                                                                                 !
+#!   SPDX-License-Identifier: GPL-2.0-or-later                                                     !
+#!-------------------------------------------------------------------------------------------------!
+
+include(FindPackageHandleStandardArgs)
+find_package(PkgConfig REQUIRED)
+include(cp2k_utils)
+
+cp2k_set_default_paths(TREXIO "trexio")
+
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(CP2K_TREXIO IMPORTED_TARGET GLOBAL trexio)
+endif()
+
+if(NOT CP2K_TREXIO_FOUND)
+  cp2k_find_libraries(TREXIO "trexio")
+  cp2k_include_dirs(TREXIO "trexio.h")
+endif()
+
+find_package_handle_standard_args(
+  TrexIO DEFAULT_MSG CP2K_TREXIO_INCLUDE_DIRS CP2K_TREXIO_LINK_LIBRARIES
+  CP2K_TREXIO_LINK_LIBRARIES)
+
+if(CP2K_TREXIO_FOUND)
+  if(NOT TARGET cp2k::trexio::trexio)
+    add_library(cp2k::trexio::trexio INTERFACE IMPORTED)
+  endif()
+
+  set_target_properties(
+    cp2k::trexio::trexio PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
+                                    "${CP2K_TREXIO_INCLUDE_DIRS}")
+  target_link_libraries(cp2k::trexio::trexio
+                        INTERFACE ${CP2K_TREXIO_LINK_LIBRARIES})
+endif()
+
+mark_as_advanced(CP2K_TREXIO_FOUND CP2K_TREXIO_LINK_LIBRARIES
+                 CP2K_TREXIO_INCLUDE_DIRS)
diff --git a/cmake/modules/Findlibsmeagol.cmake b/cmake/modules/Findlibsmeagol.cmake
new file mode 100644
index 0000000000..0078c52526
--- /dev/null
+++ b/cmake/modules/Findlibsmeagol.cmake
@@ -0,0 +1,40 @@
+#!-------------------------------------------------------------------------------------------------!
+#!   CP2K: A general program to perform molecular dynamics simulations                             !
+#!   Copyright 2000-2025 CP2K developers group <https://cp2k.org>                                  !
+#!                                                                                                 !
+#!   SPDX-License-Identifier: GPL-2.0-or-later                                                     !
+#!-------------------------------------------------------------------------------------------------!
+
+# Copyright (c) 2025- ETH Zurich
+#
+# author: Rocco Meli
+
+include(FindPackageHandleStandardArgs)
+include(cp2k_utils)
+
+cp2k_find_libraries(LIBSMEAGOL "smeagol")
+cp2k_include_dirs(LIBSMEAGOL "negfmod.mod")
+
+if(CP2K_LIBSMEAGOL_INCLUDE_DIRS)
+  find_package_handle_standard_args(
+    libsmeagol DEFAULT_MSG CP2K_LIBSMEAGOL_LINK_LIBRARIES
+    CP2K_LIBSMEAGOL_INCLUDE_DIRS)
+else()
+  find_package_handle_standard_args(libsmeagol DEFAULT_MSG
+                                    CP2K_LIBSMEAGOL_LINK_LIBRARIES)
+endif()
+
+if(NOT TARGET cp2k::libsmeagol::smeagol)
+  add_library(cp2k::libsmeagol::smeagol INTERFACE IMPORTED)
+  set_target_properties(
+    cp2k::libsmeagol::smeagol PROPERTIES INTERFACE_LINK_LIBRARIES
+                                         "${CP2K_LIBSMEAGOL_LINK_LIBRARIES}")
+  if(CP2K_LIBSMEAGOL_INCLUDE_DIRS)
+    set_target_properties(
+      cp2k::libsmeagol::smeagol PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
+                                           "${CP2K_LIBSMEAGOL_INCLUDE_DIRS}")
+  endif()
+endif()
+
+mark_as_advanced(CP2K_LIBSMEAGOL_ROOT CP2K_LIBSMEAGOL_INCLUDE_DIRS
+                 CP2K_LIBSMEAGOL_LINK_LIBRARIES CP2K_LIBSMEAGOL_LIBRARIES)
