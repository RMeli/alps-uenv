diff --git a/CMakeLists.txt b/CMakeLists.txt
index a03f7d4009..fa2e43b88c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -180,7 +180,7 @@ set(CP2K_BLAS_VENDOR
     "auto"
     CACHE STRING "Blas library for computations on host")
 
-set(CP2K_SCALAPACK_VENDOR_LIST "MKL" "SCI" "GENERIC" "auto")
+set(CP2K_SCALAPACK_VENDOR_LIST "MKL" "SCI" "NVPL" "GENERIC" "auto")
 set(CP2K_SCALAPACK_VENDOR
     "auto"
     CACHE STRING "scalapack vendor/generic backend")
@@ -188,7 +188,8 @@ set_property(CACHE CP2K_SCALAPACK_VENDOR PROPERTY STRINGS
                                                   ${CP2K_SCALAPACK_VENDOR_LIST})
 
 if(NOT ${CP2K_SCALAPACK_VENDOR} IN_LIST CP2K_SCALAPACK_VENDOR_LIST)
-  message(FATAL_ERROR "Invalid scalapack vendor backend")
+  message(FATAL_ERROR "Invalid ScaLAPACK vendor backend '${CP2K_SCALAPACK_VENDOR}'"
+                      "Valid options are: ${CP2K_SCALAPACK_VENDOR_LIST}")
 endif()
 
 set(CP2K_BUILD_OPTIONS_LIST "CUSTOM" "DEFAULT" "MINIMAL" "FULL" "SERIAL")
@@ -619,7 +620,18 @@ endif()
 # we set this variable to ON when we want fftw3 support (with or without MKL).
 set(CP2K_USE_FFTW3_ OFF)
 if(CP2K_USE_FFTW3)
-  if(NOT CP2K_BLAS_VENDOR MATCHES "MKL" OR CP2K_USE_FFTW3_WITH_MKL)
+  if(CP2K_BLAS_VENDOR MATCHES "MKL" AND NOT CP2K_USE_FFTW3_WITH_MKL)
+    message("-- Using the MKL implementation of FFTW3.")
+    set(CP2K_USE_FFTW3_MKL_ ON)
+  elseif(CP2K_BLAS_VENDOR STREQUAL "NVPL")
+    message("-- Using the NVPL implementation of FFTW3.")
+    if(CP2K_ENABLE_FFTW3_THREADS_SUPPORT OR CP2K_ENABLE_FFTW3_OPENMP_SUPPORT)
+      message(
+        FATAL_ERROR
+        "NVPL FFTW has not threads/OpenMP support.")
+    endif()
+    set(CP2K_USE_FFTW3_ ON)
+  else()
     find_package(Fftw REQUIRED)
     if(CP2K_ENABLE_FFTW3_THREADS_SUPPORT AND CP2K_ENABLE_FFTW3_OPENMP_SUPPORT)
       message(
@@ -643,9 +655,6 @@ if(CP2K_USE_FFTW3)
       )
     endif()
     set(CP2K_USE_FFTW3_ ON)
-  else()
-    message("-- Using the MKL implementation of FFTW3.")
-    set(CP2K_USE_FFTW3_MKL_ ON)
   endif()
 endif()
 
diff --git a/cmake/modules/FindBlas.cmake b/cmake/modules/FindBlas.cmake
index deb67cff96..9366d2e8d6 100644
--- a/cmake/modules/FindBlas.cmake
+++ b/cmake/modules/FindBlas.cmake
@@ -28,6 +28,7 @@ if(NOT CP2K_CONFIG_PACKAGE)
       "FlexiBLAS"
       "Atlas"
       "NVHPCBlas"
+      "NVPL"
       "CUSTOM")
 
   set(__BLAS_VENDOR_LIST ${CP2K_BLAS_VENDOR_LIST})
diff --git a/cmake/modules/FindLapack.cmake b/cmake/modules/FindLapack.cmake
index 8f1b714976..341d25128a 100644
--- a/cmake/modules/FindLapack.cmake
+++ b/cmake/modules/FindLapack.cmake
@@ -24,7 +24,7 @@ if(NOT CP2K_CONFIG_PACKAGE)
 
   if(CP2K_BLAS_FOUND)
     # LAPACK in the Intel MKL 10+ library?
-    if(CP2K_BLAS_VENDOR MATCHES "MKL|OpenBLAS|Armpl|SCI|FlexiBLAS|NVHPC")
+    if(CP2K_BLAS_VENDOR MATCHES "MKL|OpenBLAS|Armpl|SCI|FlexiBLAS|NVHPC|NVPL")
       # we just need to create the interface that's all
       get_target_property(CP2K_LAPACK_INCLUDE_DIRS cp2k::BLAS::blas
                           INTERFACE_INCLUDE_DIRECTORIES)
diff --git a/cmake/modules/FindNVPL.cmake b/cmake/modules/FindNVPL.cmake
new file mode 100644
index 0000000000..1b23de9d9b
--- /dev/null
+++ b/cmake/modules/FindNVPL.cmake
@@ -0,0 +1,57 @@
+# Try to find NVPL with the provided CONFIG
+find_package(nvpl CONFIG COMPONENTS blas lapack scalapack fft)
+
+if(CP2K_BLAS_INTERFACE STREQUAL "64bits")
+  set(_nvpl_int "_ilp64")
+else()
+  set(_nvpl_int "_lp64")
+endif()
+
+if(CP2K_BLAS_THREADING STREQUAL "sequential")
+  set(_nvpl_thread "_seq")
+else()
+  set(_nvpl_thread "_omp")
+endif()
+
+# Look for separate components
+if(NOT nvpl_FOUND)
+  find_package(nvpl_blas CONFIG REQUIRED)
+  find_package(nvpl_lapack CONFIG REQUIRED)
+  find_package(nvpl_scalapack CONFIG REQUIRED)
+  # 0.4.0 is the first version with the fftw3.h header
+  find_package(nvpl_fft 0.4.0 CONFIG REQUIRED)
+endif()
+
+if(NOT TARGET "cp2k::BLAS::NVPL::blas")
+  add_library("cp2k::BLAS::NVPL::blas" INTERFACE IMPORTED)
+  target_link_libraries("cp2k::BLAS::NVPL::blas" INTERFACE "nvpl::blas${_nvpl_int}${_nvpl_thread}")
+endif()
+
+if(NOT TARGET "cp2k::BLAS::NVPL::lapack")
+  add_library("cp2k::BLAS::NVPL::lapack" INTERFACE IMPORTED)
+  target_link_libraries("cp2k::BLAS::NVPL::lapack" INTERFACE "nvpl::lapack${_nvpl_int}${_nvpl_thread}")
+endif()
+
+if(NOT TARGET "cp2k::BLAS::NVPL::scalapack_link")
+  add_library("cp2k::BLAS::NVPL::scalapack_link" INTERFACE IMPORTED)
+
+  get_target_property(CP2K_NVPL_LAPACK_LIBRARIES "nvpl::lapack${_nvpl_int}${_nvpl_thread}" INTERFACE_LINK_LIBRARIES)
+  get_target_property(CP2K_NVPL_SCALAPACK_LIBRARIES "nvpl::scalapack${_nvpl_int}" INTERFACE_LINK_LIBRARIES)
+  get_target_property(CP2K_NVPL_BLAS_INCLUDE_DIRS "nvpl::blas${_nvpl_int}${_nvpl_thread}" INTERFACE_INCLUDE_DIRECTORIES)
+  get_target_property(CP2K_NVPL_LAPACK_INCLUDE_DIRS "nvpl::lapack${_nvpl_int}${_nvpl_thread}" INTERFACE_INCLUDE_DIRECTORIES)
+  get_target_property(CP2K_NVPL_SCALAPACK_INCLUDE_DIRS "nvpl::scalapack${_nvpl_int}" INTERFACE_INCLUDE_DIRECTORIES)
+
+  set_target_properties(
+    cp2k::BLAS::NVPL::scalapack_link 
+    PROPERTIES INTERFACE_LINK_LIBRARIES 
+    "${CP2K_NVPL_LAPACK_LIBRARIES};${CP2K_NVPL_SCALAPACK_LIBRARIES}")
+  set_target_properties(
+    cp2k::BLAS::NVPL::scalapack_link 
+    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES 
+    "${CP2K_NVPL_BLAS_INCLUDE_DIRS};${CP2K_NVPL_LAPACK_INCLUDE_DIRS};${CP2K_NVPL_SCALAPACK_INCLUDE_DIRS}")
+endif()
+
+if(NOT TARGET "cp2k::FFTW3::fftw3")
+  add_library("cp2k::FFTW3::fftw3" INTERFACE IMPORTED)
+  target_link_libraries("cp2k::FFTW3::fftw3" INTERFACE "nvpl::fftw")
+endif()
diff --git a/cmake/modules/FindSCALAPACK.cmake b/cmake/modules/FindSCALAPACK.cmake
index 24d8f7bb6d..806333f0cd 100644
--- a/cmake/modules/FindSCALAPACK.cmake
+++ b/cmake/modules/FindSCALAPACK.cmake
@@ -17,20 +17,23 @@ cp2k_set_default_paths(SCALAPACK "SCALAPACK")
 # check if we have mkl as blas library or not and pick the scalapack from mkl
 # distro if found
 if(NOT CP2K_CONFIG_PACKAGE)
-  if(CP2K_SCALAPACK_VENDOR MATCHES "MKL|auto"
-     AND TARGET cp2k::BLAS::MKL::scalapack_link)
+  if(CP2K_SCALAPACK_VENDOR MATCHES "MKL|auto" AND TARGET cp2k::BLAS::MKL::scalapack_link)
     # we have mkl check for the different mkl target
     get_target_property(
       CP2K_SCALAPACK_LINK_LIBRARIES cp2k::BLAS::MKL::scalapack_link
       INTERFACE_LINK_LIBRARIES)
     set(CP2K_SCALAPACK_FOUND yes)
-  elseif(CP2K_SCALAPACK_VENDOR MATCHES "SCI|auto"
-         AND TARGET cp2k::BLAS::SCI::scalapack_link)
+  elseif(CP2K_SCALAPACK_VENDOR MATCHES "SCI|auto" AND TARGET cp2k::BLAS::SCI::scalapack_link)
     get_target_property(
       CP2K_SCALAPACK_LINK_LIBRARIES cp2k::BLAS::SCI::scalapack_link
       INTERFACE_LINK_LIBRARIES)
     set(CP2K_SCALAPACK_FOUND yes)
-  else() # if(CP2K_SCALAPACK_VENDOR MATCHES "GENERIC|auto")
+  elseif(CP2K_SCALAPACK_VENDOR MATCHES "NVPL|auto" AND TARGET cp2k::BLAS::NVPL::scalapack_link)
+    get_target_property(
+      CP2K_SCALAPACK_LINK_LIBRARIES cp2k::BLAS::NVPL::scalapack_link
+      INTERFACE_LINK_LIBRARIES)
+    set(CP2K_SCALAPACK_FOUND yes)
+  else()
     if(TARGET cp2k::BLAS::MKL::scalapack_link)
       message(
         WARNING
@@ -38,17 +41,30 @@ if(NOT CP2K_CONFIG_PACKAGE)
           "-                  FindScalapack warning                        -"
           "-----------------------------------------------------------------"
           "\n"
-          "You may want to use mkl implementation of scalapack. To do this\n"
-          "add -DCP2K_SCALAPACK_VENDOR=MKL to the cmake command line.\n")
-    elseif(TARGET cp2k::BLAS::SCI::scalapack_link)
+          "You may want to use MKL implementation of ScaLAPACK. To do this\n"
+          "add -DCP2K_SCALAPACK_VENDOR=MKL to the CMake command line.\n\n")
+    endif()
+
+    if(TARGET cp2k::BLAS::SCI::scalapack_link)
       message(
         WARNING
           "-----------------------------------------------------------------"
           "-                  FindScalapack warning                        -"
           "-----------------------------------------------------------------"
           "\n"
-          "You may want to use Cray implementation of scalapack. To do this\n"
-          "add -DCP2K_SCALAPACK_VENDOR=SCI to the cmake command line\n\n")
+          "You may want to use Cray implementation of ScaLAPACK. To do this \n"
+          "add -DCP2K_SCALAPACK_VENDOR=SCI to the CMake command line.\n\n")
+    endif()
+
+    if(TARGET cp2k::BLAS::NVPL::scalapack_link)
+      message(
+        WARNING
+          "-----------------------------------------------------------------\n"
+          "-                  FindScalapack warning                        -\n"
+          "-----------------------------------------------------------------\n"
+          "\n"
+          "You may want to use NVPL implementation of ScaLAPACK. To do this \n"
+          "add -DCP2K_SCALAPACK_VENDOR=NVPL to the CMake command line.\n\n")
     endif()
 
     # try to detect location with pkgconfig
